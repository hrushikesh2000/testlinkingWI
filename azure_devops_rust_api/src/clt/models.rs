// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentGroup {
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(
        rename = "creationTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_time: Option<String>,
    #[serde(rename = "groupId", default, skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    #[serde(rename = "groupName", default, skip_serializing_if = "Option::is_none")]
    pub group_name: Option<String>,
    #[serde(
        rename = "machineAccessData",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub machine_access_data: Vec<AgentGroupAccessData>,
    #[serde(
        rename = "machineConfiguration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub machine_configuration: Option<WebApiUserLoadTestMachineInput>,
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentGroupAccessData {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub details: Option<String>,
    #[serde(
        rename = "storageConnectionString",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub storage_connection_string: Option<String>,
    #[serde(
        rename = "storageEndPoint",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub storage_end_point: Option<String>,
    #[serde(
        rename = "storageName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub storage_name: Option<String>,
    #[serde(
        rename = "storageType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub storage_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Application {
    #[serde(
        rename = "applicationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub application_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(
        rename = "pathSeperator",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub path_seperator: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationCounters {
    #[serde(
        rename = "applicationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub application_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "isDefault", default, skip_serializing_if = "Option::is_none")]
    pub is_default: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationType {
    #[serde(
        rename = "actionUriLink",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub action_uri_link: Option<String>,
    #[serde(
        rename = "autPortalLink",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub aut_portal_link: Option<String>,
    #[serde(rename = "isEnabled", default, skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<bool>,
    #[serde(
        rename = "maxComponentsAllowedForCollection",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_components_allowed_for_collection: Option<i32>,
    #[serde(
        rename = "maxCountersAllowed",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_counters_allowed: Option<i32>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BrowserMix {
    #[serde(
        rename = "browserName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub browser_name: Option<String>,
    #[serde(
        rename = "browserPercentage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub browser_percentage: Option<f32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CltCustomerIntelligenceData {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub area: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub feature: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CounterGroup {
    #[serde(rename = "groupName", default, skip_serializing_if = "Option::is_none")]
    pub group_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CounterInstanceSamples {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(
        rename = "counterInstanceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub counter_instance_id: Option<String>,
    #[serde(
        rename = "nextRefreshTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub next_refresh_time: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub values: Vec<CounterSample>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CounterSample {
    #[serde(rename = "baseValue", default, skip_serializing_if = "Option::is_none")]
    pub base_value: Option<i64>,
    #[serde(
        rename = "computedValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub computed_value: Option<f32>,
    #[serde(
        rename = "counterFrequency",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub counter_frequency: Option<i64>,
    #[serde(
        rename = "counterInstanceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub counter_instance_id: Option<String>,
    #[serde(
        rename = "counterType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub counter_type: Option<String>,
    #[serde(
        rename = "intervalEndDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub interval_end_date: Option<String>,
    #[serde(
        rename = "intervalNumber",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub interval_number: Option<i32>,
    #[serde(rename = "rawValue", default, skip_serializing_if = "Option::is_none")]
    pub raw_value: Option<i64>,
    #[serde(
        rename = "systemFrequency",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub system_frequency: Option<i64>,
    #[serde(rename = "timeStamp", default, skip_serializing_if = "Option::is_none")]
    pub time_stamp: Option<i64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CounterSampleQueryDetails {
    #[serde(
        rename = "counterInstanceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub counter_instance_id: Option<String>,
    #[serde(
        rename = "fromInterval",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub from_interval: Option<i32>,
    #[serde(
        rename = "toInterval",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub to_interval: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CounterSamplesResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(
        rename = "maxBatchSize",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_batch_size: Option<i32>,
    #[serde(
        rename = "totalSamplesCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_samples_count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub values: Vec<CounterInstanceSamples>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Diagnostics {
    #[serde(
        rename = "diagnosticStoreConnectionString",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub diagnostic_store_connection_string: Option<String>,
    #[serde(
        rename = "lastModifiedTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_time: Option<String>,
    #[serde(
        rename = "relativePathToDiagnosticFiles",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub relative_path_to_diagnostic_files: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DropAccessData {
    #[serde(
        rename = "dropContainerUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub drop_container_url: Option<String>,
    #[serde(rename = "sasKey", default, skip_serializing_if = "Option::is_none")]
    pub sas_key: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorDetails {
    #[serde(
        rename = "lastErrorDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_error_date: Option<String>,
    #[serde(
        rename = "messageText",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub message_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub occurrences: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
    #[serde(
        rename = "scenarioName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub scenario_name: Option<String>,
    #[serde(
        rename = "stackTrace",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub stack_trace: Option<String>,
    #[serde(
        rename = "testCaseName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectBase {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityRef {
    #[serde(flatten)]
    pub graph_subject_base: GraphSubjectBase,
    #[serde(
        rename = "directoryAlias",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub directory_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inactive: Option<bool>,
    #[serde(
        rename = "isAadIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_aad_identity: Option<bool>,
    #[serde(
        rename = "isContainer",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_container: Option<bool>,
    #[serde(
        rename = "isDeletedInOrigin",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_deleted_in_origin: Option<bool>,
    #[serde(
        rename = "profileUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub profile_url: Option<String>,
    #[serde(
        rename = "uniqueName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LoadGenerationGeoLocation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percentage: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LoadTest {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LoadTestDefinition {
    #[serde(
        rename = "agentCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_count: Option<i32>,
    #[serde(rename = "browserMixs", default, skip_serializing_if = "Vec::is_empty")]
    pub browser_mixs: Vec<BrowserMix>,
    #[serde(rename = "coreCount", default, skip_serializing_if = "Option::is_none")]
    pub core_count: Option<i32>,
    #[serde(
        rename = "coresPerAgent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub cores_per_agent: Option<i32>,
    #[serde(
        rename = "loadGenerationGeoLocations",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub load_generation_geo_locations: Vec<LoadGenerationGeoLocation>,
    #[serde(
        rename = "loadPatternName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub load_pattern_name: Option<String>,
    #[serde(
        rename = "loadTestName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub load_test_name: Option<String>,
    #[serde(rename = "maxVusers", default, skip_serializing_if = "Option::is_none")]
    pub max_vusers: Option<i32>,
    #[serde(
        rename = "runDuration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_duration: Option<i32>,
    #[serde(
        rename = "samplingRate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sampling_rate: Option<i32>,
    #[serde(rename = "thinkTime", default, skip_serializing_if = "Option::is_none")]
    pub think_time: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub urls: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LoadTestErrors {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub occurrences: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub types: Vec<Type>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LoadTestRunDetails {
    #[serde(flatten)]
    pub load_test_run_settings: LoadTestRunSettings,
    #[serde(
        rename = "virtualUserCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub virtual_user_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LoadTestRunSettings {
    #[serde(
        rename = "agentCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_count: Option<i32>,
    #[serde(rename = "coreCount", default, skip_serializing_if = "Option::is_none")]
    pub core_count: Option<i32>,
    #[serde(
        rename = "coresPerAgent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub cores_per_agent: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    #[serde(
        rename = "loadGeneratorMachinesType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub load_generator_machines_type: Option<load_test_run_settings::LoadGeneratorMachinesType>,
    #[serde(
        rename = "samplingInterval",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sampling_interval: Option<i32>,
    #[serde(
        rename = "warmUpDuration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub warm_up_duration: Option<i32>,
}
pub mod load_test_run_settings {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LoadGeneratorMachinesType {
        #[serde(rename = "default")]
        Default,
        #[serde(rename = "cltLoadAgent")]
        CltLoadAgent,
        #[serde(rename = "userLoadAgent")]
        UserLoadAgent,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OverridableRunSettings {
    #[serde(
        rename = "loadGeneratorMachinesType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub load_generator_machines_type: Option<overridable_run_settings::LoadGeneratorMachinesType>,
    #[serde(
        rename = "staticAgentRunSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub static_agent_run_settings: Option<StaticAgentRunSetting>,
}
pub mod overridable_run_settings {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LoadGeneratorMachinesType {
        #[serde(rename = "default")]
        Default,
        #[serde(rename = "cltLoadAgent")]
        CltLoadAgent,
        #[serde(rename = "userLoadAgent")]
        UserLoadAgent,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PageSummary {
    #[serde(
        rename = "averagePageTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub average_page_time: Option<f64>,
    #[serde(rename = "pageUrl", default, skip_serializing_if = "Option::is_none")]
    pub page_url: Option<String>,
    #[serde(
        rename = "percentagePagesMeetingGoal",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub percentage_pages_meeting_goal: Option<i32>,
    #[serde(
        rename = "percentileData",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub percentile_data: Vec<SummaryPercentileData>,
    #[serde(
        rename = "scenarioName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub scenario_name: Option<String>,
    #[serde(rename = "testName", default, skip_serializing_if = "Option::is_none")]
    pub test_name: Option<String>,
    #[serde(
        rename = "totalPages",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_pages: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RequestSummary {
    #[serde(
        rename = "averageResponseTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub average_response_time: Option<f64>,
    #[serde(
        rename = "failedRequests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub failed_requests: Option<i32>,
    #[serde(
        rename = "passedRequests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub passed_requests: Option<i32>,
    #[serde(
        rename = "percentileData",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub percentile_data: Vec<SummaryPercentileData>,
    #[serde(
        rename = "requestsPerSec",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requests_per_sec: Option<f64>,
    #[serde(
        rename = "requestUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_url: Option<String>,
    #[serde(
        rename = "scenarioName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub scenario_name: Option<String>,
    #[serde(rename = "testName", default, skip_serializing_if = "Option::is_none")]
    pub test_name: Option<String>,
    #[serde(
        rename = "totalRequests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_requests: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScenarioSummary {
    #[serde(
        rename = "maxUserLoad",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_user_load: Option<i32>,
    #[serde(
        rename = "minUserLoad",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub min_user_load: Option<i32>,
    #[serde(
        rename = "scenarioName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub scenario_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StaticAgentRunSetting {
    #[serde(
        rename = "loadGeneratorMachinesType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub load_generator_machines_type: Option<static_agent_run_setting::LoadGeneratorMachinesType>,
    #[serde(
        rename = "staticAgentGroupName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub static_agent_group_name: Option<String>,
}
pub mod static_agent_run_setting {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LoadGeneratorMachinesType {
        #[serde(rename = "default")]
        Default,
        #[serde(rename = "cltLoadAgent")]
        CltLoadAgent,
        #[serde(rename = "userLoadAgent")]
        UserLoadAgent,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubType {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(
        rename = "errorDetailList",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub error_detail_list: Vec<ErrorDetails>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub occurrences: Option<i32>,
    #[serde(
        rename = "subTypeName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_type_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SummaryPercentileData {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percentile: Option<i32>,
    #[serde(
        rename = "percentileValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub percentile_value: Option<f64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TenantDetails {
    #[serde(
        rename = "accessDetails",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub access_details: Vec<AgentGroupAccessData>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "staticMachines",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub static_machines: Vec<WebApiTestMachine>,
    #[serde(
        rename = "userLoadAgentInput",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub user_load_agent_input: Option<WebApiUserLoadTestMachineInput>,
    #[serde(
        rename = "userLoadAgentResourcesUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub user_load_agent_resources_uri: Option<String>,
    #[serde(
        rename = "validGeoLocations",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub valid_geo_locations: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestDefinition {
    #[serde(flatten)]
    pub test_definition_basic: TestDefinitionBasic,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "loadGenerationGeoLocations",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub load_generation_geo_locations: Vec<LoadGenerationGeoLocation>,
    #[serde(
        rename = "loadTestDefinitionSource",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub load_test_definition_source: Option<String>,
    #[serde(
        rename = "runSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_settings: Option<LoadTestRunSettings>,
    #[serde(
        rename = "staticAgentRunSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub static_agent_run_settings: Option<StaticAgentRunSetting>,
    #[serde(
        rename = "testDetails",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_details: Option<LoadTest>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestDefinitionBasic {
    #[serde(
        rename = "accessData",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub access_data: Option<DropAccessData>,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "lastModifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_by: Option<IdentityRef>,
    #[serde(
        rename = "lastModifiedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_date: Option<String>,
    #[serde(
        rename = "loadTestType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub load_test_type: Option<test_definition_basic::LoadTestType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
pub mod test_definition_basic {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LoadTestType {
        #[serde(rename = "visualStudioLoadTest")]
        VisualStudioLoadTest,
        #[serde(rename = "jMeter")]
        JMeter,
        #[serde(rename = "oldLoadTestFile")]
        OldLoadTestFile,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestDrop {
    #[serde(
        rename = "accessData",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub access_data: Option<DropAccessData>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(rename = "dropType", default, skip_serializing_if = "Option::is_none")]
    pub drop_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "loadTestDefinition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub load_test_definition: Option<LoadTestDefinition>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestDropRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResults {
    #[serde(
        rename = "cloudLoadTestSolutionUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub cloud_load_test_solution_url: Option<String>,
    #[serde(
        rename = "counterGroups",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub counter_groups: Vec<CounterGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub diagnostics: Option<Diagnostics>,
    #[serde(
        rename = "resultsUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub results_url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultsSummary {
    #[serde(
        rename = "overallPageSummary",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub overall_page_summary: Option<PageSummary>,
    #[serde(
        rename = "overallRequestSummary",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub overall_request_summary: Option<RequestSummary>,
    #[serde(
        rename = "overallScenarioSummary",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub overall_scenario_summary: Option<ScenarioSummary>,
    #[serde(
        rename = "overallTestSummary",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub overall_test_summary: Option<TestSummary>,
    #[serde(
        rename = "overallTransactionSummary",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub overall_transaction_summary: Option<TransactionSummary>,
    #[serde(
        rename = "topSlowPages",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub top_slow_pages: Vec<PageSummary>,
    #[serde(
        rename = "topSlowRequests",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub top_slow_requests: Vec<RequestSummary>,
    #[serde(
        rename = "topSlowTests",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub top_slow_tests: Vec<TestSummary>,
    #[serde(
        rename = "topSlowTransactions",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub top_slow_transactions: Vec<TransactionSummary>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRun {
    #[serde(flatten)]
    pub test_run_basic: TestRunBasic,
    #[serde(
        rename = "abortMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub abort_message: Option<TestRunAbortMessage>,
    #[serde(
        rename = "autInitializationError",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub aut_initialization_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub chargeable: Option<bool>,
    #[serde(
        rename = "chargedVUserminutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub charged_v_userminutes: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "executionFinishedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub execution_finished_date: Option<String>,
    #[serde(
        rename = "executionStartedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub execution_started_date: Option<String>,
    #[serde(
        rename = "queuedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub queued_date: Option<String>,
    #[serde(
        rename = "retentionState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub retention_state: Option<test_run::RetentionState>,
    #[serde(
        rename = "runSourceIdentifier",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_source_identifier: Option<String>,
    #[serde(
        rename = "runSourceUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_source_url: Option<String>,
    #[serde(rename = "startedBy", default, skip_serializing_if = "Option::is_none")]
    pub started_by: Option<IdentityRef>,
    #[serde(
        rename = "startedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub started_date: Option<String>,
    #[serde(rename = "stoppedBy", default, skip_serializing_if = "Option::is_none")]
    pub stopped_by: Option<IdentityRef>,
    #[serde(rename = "subState", default, skip_serializing_if = "Option::is_none")]
    pub sub_state: Option<test_run::SubState>,
    #[serde(
        rename = "supersedeRunSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub supersede_run_settings: Option<OverridableRunSettings>,
    #[serde(rename = "testDrop", default, skip_serializing_if = "Option::is_none")]
    pub test_drop: Option<TestDropRef>,
    #[serde(
        rename = "testSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_settings: Option<TestSettings>,
    #[serde(
        rename = "warmUpStartedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub warm_up_started_date: Option<String>,
    #[serde(
        rename = "webResultUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub web_result_url: Option<String>,
}
pub mod test_run {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RetentionState {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "markedForDeletion")]
        MarkedForDeletion,
        #[serde(rename = "deleted")]
        Deleted,
        #[serde(rename = "retain")]
        Retain,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SubState {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "validatingTestRun")]
        ValidatingTestRun,
        #[serde(rename = "acquiringResources")]
        AcquiringResources,
        #[serde(rename = "configuringAgents")]
        ConfiguringAgents,
        #[serde(rename = "executingSetupScript")]
        ExecutingSetupScript,
        #[serde(rename = "warmingUp")]
        WarmingUp,
        #[serde(rename = "runningTest")]
        RunningTest,
        #[serde(rename = "executingCleanupScript")]
        ExecutingCleanupScript,
        #[serde(rename = "collectingResults")]
        CollectingResults,
        #[serde(rename = "success")]
        Success,
        #[serde(rename = "partialSuccess")]
        PartialSuccess,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunAbortMessage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cause: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub details: Vec<String>,
    #[serde(
        rename = "loggedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub logged_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunBasic {
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(rename = "deletedBy", default, skip_serializing_if = "Option::is_none")]
    pub deleted_by: Option<IdentityRef>,
    #[serde(
        rename = "deletedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deleted_date: Option<String>,
    #[serde(
        rename = "finishedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub finished_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "loadGenerationGeoLocations",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub load_generation_geo_locations: Vec<LoadGenerationGeoLocation>,
    #[serde(
        rename = "loadTestFileName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub load_test_file_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "runNumber", default, skip_serializing_if = "Option::is_none")]
    pub run_number: Option<i32>,
    #[serde(rename = "runSource", default, skip_serializing_if = "Option::is_none")]
    pub run_source: Option<String>,
    #[serde(
        rename = "runSpecificDetails",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_specific_details: Option<LoadTestRunDetails>,
    #[serde(rename = "runType", default, skip_serializing_if = "Option::is_none")]
    pub run_type: Option<test_run_basic::RunType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<test_run_basic::State>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod test_run_basic {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RunType {
        #[serde(rename = "visualStudioLoadTest")]
        VisualStudioLoadTest,
        #[serde(rename = "jMeterLoadTest")]
        JMeterLoadTest,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "stopping")]
        Stopping,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "aborted")]
        Aborted,
        #[serde(rename = "error")]
        Error,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunCounterInstance {
    #[serde(
        rename = "categoryName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub category_name: Option<String>,
    #[serde(
        rename = "counterInstanceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub counter_instance_id: Option<String>,
    #[serde(
        rename = "counterName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub counter_name: Option<String>,
    #[serde(
        rename = "counterUnits",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub counter_units: Option<String>,
    #[serde(
        rename = "instanceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub instance_name: Option<String>,
    #[serde(
        rename = "isPreselectedCounter",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_preselected_counter: Option<bool>,
    #[serde(
        rename = "machineName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub machine_name: Option<String>,
    #[serde(
        rename = "partOfCounterGroups",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub part_of_counter_groups: Vec<String>,
    #[serde(
        rename = "summaryData",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub summary_data: Option<WebInstanceSummaryData>,
    #[serde(
        rename = "uniqueName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunMessage {
    #[serde(rename = "agentId", default, skip_serializing_if = "Option::is_none")]
    pub agent_id: Option<String>,
    #[serde(rename = "errorCode", default, skip_serializing_if = "Option::is_none")]
    pub error_code: Option<String>,
    #[serde(
        rename = "loggedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub logged_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "messageId", default, skip_serializing_if = "Option::is_none")]
    pub message_id: Option<String>,
    #[serde(
        rename = "messageSource",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub message_source: Option<test_run_message::MessageSource>,
    #[serde(
        rename = "messageType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub message_type: Option<test_run_message::MessageType>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod test_run_message {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MessageSource {
        #[serde(rename = "setupScript")]
        SetupScript,
        #[serde(rename = "cleanupScript")]
        CleanupScript,
        #[serde(rename = "validation")]
        Validation,
        #[serde(rename = "other")]
        Other,
        #[serde(rename = "autCounterCollection")]
        AutCounterCollection,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MessageType {
        #[serde(rename = "info")]
        Info,
        #[serde(rename = "output")]
        Output,
        #[serde(rename = "error")]
        Error,
        #[serde(rename = "warning")]
        Warning,
        #[serde(rename = "critical")]
        Critical,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSettings {
    #[serde(
        rename = "cleanupCommand",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub cleanup_command: Option<String>,
    #[serde(
        rename = "hostProcessPlatform",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub host_process_platform: Option<test_settings::HostProcessPlatform>,
    #[serde(
        rename = "setupCommand",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub setup_command: Option<String>,
}
pub mod test_settings {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum HostProcessPlatform {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "msil")]
        Msil,
        #[serde(rename = "x86")]
        X86,
        #[serde(rename = "ia64")]
        Ia64,
        #[serde(rename = "amd64")]
        Amd64,
        #[serde(rename = "arm")]
        Arm,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSummary {
    #[serde(
        rename = "averageTestTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub average_test_time: Option<f64>,
    #[serde(
        rename = "failedTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub failed_tests: Option<i32>,
    #[serde(
        rename = "passedTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub passed_tests: Option<i32>,
    #[serde(
        rename = "percentileData",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub percentile_data: Vec<SummaryPercentileData>,
    #[serde(
        rename = "scenarioName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub scenario_name: Option<String>,
    #[serde(rename = "testName", default, skip_serializing_if = "Option::is_none")]
    pub test_name: Option<String>,
    #[serde(
        rename = "totalTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_tests: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionSummary {
    #[serde(
        rename = "averageResponseTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub average_response_time: Option<f64>,
    #[serde(
        rename = "averageTransactionTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub average_transaction_time: Option<f64>,
    #[serde(
        rename = "percentileData",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub percentile_data: Vec<SummaryPercentileData>,
    #[serde(
        rename = "scenarioName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub scenario_name: Option<String>,
    #[serde(rename = "testName", default, skip_serializing_if = "Option::is_none")]
    pub test_name: Option<String>,
    #[serde(
        rename = "totalTransactions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_transactions: Option<i32>,
    #[serde(
        rename = "transactionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub transaction_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Type {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub occurrences: Option<i32>,
    #[serde(rename = "subTypes", default, skip_serializing_if = "Vec::is_empty")]
    pub sub_types: Vec<SubType>,
    #[serde(rename = "typeName", default, skip_serializing_if = "Option::is_none")]
    pub type_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebApiLoadTestMachineInput {
    #[serde(
        rename = "machineGroupId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub machine_group_id: Option<String>,
    #[serde(
        rename = "machineType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub machine_type: Option<web_api_load_test_machine_input::MachineType>,
    #[serde(
        rename = "setupConfiguration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub setup_configuration: Option<WebApiSetupParamaters>,
    #[serde(
        rename = "supportedRunTypes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub supported_run_types: Vec<serde_json::Value>,
}
pub mod web_api_load_test_machine_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MachineType {
        #[serde(rename = "default")]
        Default,
        #[serde(rename = "cltLoadAgent")]
        CltLoadAgent,
        #[serde(rename = "userLoadAgent")]
        UserLoadAgent,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebApiSetupParamaters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configurations: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebApiTestMachine {
    #[serde(
        rename = "lastHeartBeat",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_heart_beat: Option<String>,
    #[serde(
        rename = "machineName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub machine_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebApiUserLoadTestMachineInput {
    #[serde(flatten)]
    pub web_api_load_test_machine_input: WebApiLoadTestMachineInput,
    #[serde(
        rename = "agentGroupName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_group_name: Option<String>,
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(
        rename = "userLoadAgentResourcesUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub user_load_agent_resources_uri: Option<String>,
    #[serde(
        rename = "vstsAccountUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub vsts_account_uri: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebInstanceSummaryData {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub average: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<f64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationCountersList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ApplicationCounters>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Application>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationTypeList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ApplicationType>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestDefinitionBasicList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestDefinitionBasic>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunCounterInstanceList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestRunCounterInstance>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunMessageList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestRunMessage>,
}
