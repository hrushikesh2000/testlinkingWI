// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Consumer {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub actions: Vec<ConsumerAction>,
    #[serde(
        rename = "authenticationType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub authentication_type: Option<consumer::AuthenticationType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "externalConfiguration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub external_configuration: Option<ExternalConfigurationDescriptor>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(
        rename = "informationUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub information_url: Option<String>,
    #[serde(
        rename = "inputDescriptors",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub input_descriptors: Vec<InputDescriptor>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod consumer {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AuthenticationType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "oAuth")]
        OAuth,
        #[serde(rename = "external")]
        External,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConsumerAction {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(
        rename = "allowResourceVersionOverride",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub allow_resource_version_override: Option<bool>,
    #[serde(
        rename = "consumerId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub consumer_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "inputDescriptors",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub input_descriptors: Vec<InputDescriptor>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "supportedEventTypes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub supported_event_types: Vec<String>,
    #[serde(
        rename = "supportedResourceVersions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub supported_resource_versions: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Event {
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(
        rename = "detailedMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub detailed_message: Option<FormattedEventMessage>,
    #[serde(rename = "eventType", default, skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<FormattedEventMessage>,
    #[serde(
        rename = "publisherId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<serde_json::Value>,
    #[serde(
        rename = "resourceContainers",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_containers: Option<serde_json::Value>,
    #[serde(
        rename = "resourceVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_version: Option<String>,
    #[serde(
        rename = "sessionToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub session_token: Option<SessionToken>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventTypeDescriptor {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "inputDescriptors",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub input_descriptors: Vec<InputDescriptor>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "publisherId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_id: Option<String>,
    #[serde(
        rename = "supportedResourceVersions",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub supported_resource_versions: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExternalConfigurationDescriptor {
    #[serde(
        rename = "createSubscriptionUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub create_subscription_url: Option<String>,
    #[serde(
        rename = "editSubscriptionPropertyName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub edit_subscription_property_name: Option<String>,
    #[serde(
        rename = "hostedOnly",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub hosted_only: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FormattedEventMessage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub markdown: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectBase {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityRef {
    #[serde(flatten)]
    pub graph_subject_base: GraphSubjectBase,
    #[serde(
        rename = "directoryAlias",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub directory_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inactive: Option<bool>,
    #[serde(
        rename = "isAadIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_aad_identity: Option<bool>,
    #[serde(
        rename = "isContainer",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_container: Option<bool>,
    #[serde(
        rename = "isDeletedInOrigin",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_deleted_in_origin: Option<bool>,
    #[serde(
        rename = "profileUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub profile_url: Option<String>,
    #[serde(
        rename = "uniqueName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputDescriptor {
    #[serde(
        rename = "dependencyInputIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub dependency_input_ids: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "groupName", default, skip_serializing_if = "Option::is_none")]
    pub group_name: Option<String>,
    #[serde(
        rename = "hasDynamicValueInformation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub has_dynamic_value_information: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "inputMode", default, skip_serializing_if = "Option::is_none")]
    pub input_mode: Option<input_descriptor::InputMode>,
    #[serde(
        rename = "isConfidential",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_confidential: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(
        rename = "useInDefaultDescription",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub use_in_default_description: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation: Option<InputValidation>,
    #[serde(rename = "valueHint", default, skip_serializing_if = "Option::is_none")]
    pub value_hint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<InputValues>,
}
pub mod input_descriptor {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum InputMode {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "textBox")]
        TextBox,
        #[serde(rename = "passwordBox")]
        PasswordBox,
        #[serde(rename = "combo")]
        Combo,
        #[serde(rename = "radioButtons")]
        RadioButtons,
        #[serde(rename = "checkBox")]
        CheckBox,
        #[serde(rename = "textArea")]
        TextArea,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputFilter {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub conditions: Vec<InputFilterCondition>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputFilterCondition {
    #[serde(
        rename = "caseSensitive",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub case_sensitive: Option<bool>,
    #[serde(rename = "inputId", default, skip_serializing_if = "Option::is_none")]
    pub input_id: Option<String>,
    #[serde(
        rename = "inputValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub input_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<input_filter_condition::Operator>,
}
pub mod input_filter_condition {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Operator {
        #[serde(rename = "equals")]
        Equals,
        #[serde(rename = "notEquals")]
        NotEquals,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValidation {
    #[serde(rename = "dataType", default, skip_serializing_if = "Option::is_none")]
    pub data_type: Option<input_validation::DataType>,
    #[serde(
        rename = "isRequired",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_required: Option<bool>,
    #[serde(rename = "maxLength", default, skip_serializing_if = "Option::is_none")]
    pub max_length: Option<i32>,
    #[serde(rename = "maxValue", default, skip_serializing_if = "Option::is_none")]
    pub max_value: Option<String>,
    #[serde(rename = "minLength", default, skip_serializing_if = "Option::is_none")]
    pub min_length: Option<i32>,
    #[serde(rename = "minValue", default, skip_serializing_if = "Option::is_none")]
    pub min_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
    #[serde(
        rename = "patternMismatchErrorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pattern_mismatch_error_message: Option<String>,
}
pub mod input_validation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "string")]
        String,
        #[serde(rename = "number")]
        Number,
        #[serde(rename = "boolean")]
        Boolean,
        #[serde(rename = "guid")]
        Guid,
        #[serde(rename = "uri")]
        Uri,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(
        rename = "displayValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValues {
    #[serde(
        rename = "defaultValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<InputValuesError>,
    #[serde(rename = "inputId", default, skip_serializing_if = "Option::is_none")]
    pub input_id: Option<String>,
    #[serde(
        rename = "isDisabled",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_disabled: Option<bool>,
    #[serde(
        rename = "isLimitedToPossibleValues",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_limited_to_possible_values: Option<bool>,
    #[serde(
        rename = "isReadOnly",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_read_only: Option<bool>,
    #[serde(
        rename = "possibleValues",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub possible_values: Vec<InputValue>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValuesError {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValuesQuery {
    #[serde(
        rename = "currentValues",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub current_values: Option<serde_json::Value>,
    #[serde(rename = "inputValues", default, skip_serializing_if = "Vec::is_empty")]
    pub input_values: Vec<InputValues>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Notification {
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub details: Option<NotificationDetails>,
    #[serde(rename = "eventId", default, skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "modifiedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<notification::Result>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<notification::Status>,
    #[serde(
        rename = "subscriberId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub subscriber_id: Option<String>,
    #[serde(
        rename = "subscriptionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub subscription_id: Option<String>,
}
pub mod notification {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "filtered")]
        Filtered,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "processing")]
        Processing,
        #[serde(rename = "requestInProgress")]
        RequestInProgress,
        #[serde(rename = "completed")]
        Completed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationDetails {
    #[serde(
        rename = "completedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completed_date: Option<String>,
    #[serde(
        rename = "consumerActionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub consumer_action_id: Option<String>,
    #[serde(
        rename = "consumerId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub consumer_id: Option<String>,
    #[serde(
        rename = "consumerInputs",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub consumer_inputs: Option<serde_json::Value>,
    #[serde(
        rename = "dequeuedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub dequeued_date: Option<String>,
    #[serde(
        rename = "errorDetail",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_detail: Option<String>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub event: Option<Event>,
    #[serde(rename = "eventType", default, skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    #[serde(
        rename = "processedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub processed_date: Option<String>,
    #[serde(
        rename = "publisherId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_id: Option<String>,
    #[serde(
        rename = "publisherInputs",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_inputs: Option<serde_json::Value>,
    #[serde(
        rename = "queuedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub queued_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<String>,
    #[serde(
        rename = "requestAttempts",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_attempts: Option<i32>,
    #[serde(
        rename = "requestDuration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_duration: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub response: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationResultsSummaryDetail {
    #[serde(
        rename = "notificationCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub notification_count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<notification_results_summary_detail::Result>,
}
pub mod notification_results_summary_detail {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "filtered")]
        Filtered,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationsQuery {
    #[serde(
        rename = "associatedSubscriptions",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub associated_subscriptions: Vec<Subscription>,
    #[serde(
        rename = "includeDetails",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_details: Option<bool>,
    #[serde(
        rename = "maxCreatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_created_date: Option<String>,
    #[serde(
        rename = "maxResults",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_results: Option<i32>,
    #[serde(
        rename = "maxResultsPerSubscription",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_results_per_subscription: Option<i32>,
    #[serde(
        rename = "minCreatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub min_created_date: Option<String>,
    #[serde(
        rename = "publisherId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_id: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<Notification>,
    #[serde(
        rename = "resultType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_type: Option<notifications_query::ResultType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<notifications_query::Status>,
    #[serde(
        rename = "subscriptionIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub subscription_ids: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub summary: Vec<NotificationSummary>,
}
pub mod notifications_query {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ResultType {
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "filtered")]
        Filtered,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "processing")]
        Processing,
        #[serde(rename = "requestInProgress")]
        RequestInProgress,
        #[serde(rename = "completed")]
        Completed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationSummary {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<NotificationResultsSummaryDetail>,
    #[serde(
        rename = "subscriptionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub subscription_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Publisher {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "inputDescriptors",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub input_descriptors: Vec<InputDescriptor>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "serviceInstanceType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub service_instance_type: Option<String>,
    #[serde(
        rename = "supportedEvents",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub supported_events: Vec<EventTypeDescriptor>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PublisherEvent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub diagnostics: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub event: Option<Event>,
    #[serde(
        rename = "isFilteredEvent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_filtered_event: Option<bool>,
    #[serde(
        rename = "notificationData",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub notification_data: Option<serde_json::Value>,
    #[serde(
        rename = "otherResourceVersions",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub other_resource_versions: Vec<VersionedResource>,
    #[serde(
        rename = "publisherInputFilters",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub publisher_input_filters: Vec<InputFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscription: Option<Subscription>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PublishersQuery {
    #[serde(
        rename = "publisherIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub publisher_ids: Vec<String>,
    #[serde(
        rename = "publisherInputs",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_inputs: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<Publisher>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceContainer {
    #[serde(rename = "baseUrl", default, skip_serializing_if = "Option::is_none")]
    pub base_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SessionToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
    #[serde(rename = "validTo", default, skip_serializing_if = "Option::is_none")]
    pub valid_to: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Subscription {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(
        rename = "actionDescription",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub action_description: Option<String>,
    #[serde(
        rename = "consumerActionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub consumer_action_id: Option<String>,
    #[serde(
        rename = "consumerId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub consumer_id: Option<String>,
    #[serde(
        rename = "consumerInputs",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub consumer_inputs: Option<serde_json::Value>,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(
        rename = "eventDescription",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub event_description: Option<String>,
    #[serde(rename = "eventType", default, skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "lastProbationRetryDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_probation_retry_date: Option<String>,
    #[serde(
        rename = "modifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_by: Option<IdentityRef>,
    #[serde(
        rename = "modifiedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_date: Option<String>,
    #[serde(
        rename = "probationRetries",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub probation_retries: Option<String>,
    #[serde(
        rename = "publisherId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_id: Option<String>,
    #[serde(
        rename = "publisherInputs",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_inputs: Option<serde_json::Value>,
    #[serde(
        rename = "resourceVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<subscription::Status>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscriber: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod subscription {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "enabled")]
        Enabled,
        #[serde(rename = "onProbation")]
        OnProbation,
        #[serde(rename = "disabledByUser")]
        DisabledByUser,
        #[serde(rename = "disabledBySystem")]
        DisabledBySystem,
        #[serde(rename = "disabledByInactiveIdentity")]
        DisabledByInactiveIdentity,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubscriptionDiagnostics {
    #[serde(
        rename = "deliveryResults",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_results: Option<SubscriptionTracing>,
    #[serde(
        rename = "deliveryTracing",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_tracing: Option<SubscriptionTracing>,
    #[serde(
        rename = "evaluationTracing",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub evaluation_tracing: Option<SubscriptionTracing>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubscriptionInputValuesQuery {
    #[serde(rename = "inputValues", default, skip_serializing_if = "Vec::is_empty")]
    pub input_values: Vec<InputValues>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<subscription_input_values_query::Scope>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscription: Option<Subscription>,
}
pub mod subscription_input_values_query {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Scope {
        #[serde(rename = "publisher")]
        Publisher,
        #[serde(rename = "consumer")]
        Consumer,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubscriptionsQuery {
    #[serde(
        rename = "consumerActionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub consumer_action_id: Option<String>,
    #[serde(
        rename = "consumerId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub consumer_id: Option<String>,
    #[serde(
        rename = "consumerInputFilters",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub consumer_input_filters: Vec<InputFilter>,
    #[serde(rename = "eventType", default, skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    #[serde(
        rename = "publisherId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_id: Option<String>,
    #[serde(
        rename = "publisherInputFilters",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub publisher_input_filters: Vec<InputFilter>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<Subscription>,
    #[serde(
        rename = "subscriberId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub subscriber_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubscriptionTracing {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "endDate", default, skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(
        rename = "maxTracedEntries",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_traced_entries: Option<i32>,
    #[serde(rename = "startDate", default, skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(
        rename = "tracedEntries",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub traced_entries: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateSubscripitonDiagnosticsParameters {
    #[serde(
        rename = "deliveryResults",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_results: Option<UpdateSubscripitonTracingParameters>,
    #[serde(
        rename = "deliveryTracing",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_tracing: Option<UpdateSubscripitonTracingParameters>,
    #[serde(
        rename = "evaluationTracing",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub evaluation_tracing: Option<UpdateSubscripitonTracingParameters>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateSubscripitonTracingParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VersionedResource {
    #[serde(
        rename = "compatibleWith",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub compatible_with: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<serde_json::Value>,
    #[serde(
        rename = "resourceVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConsumerActionList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ConsumerAction>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConsumerList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Consumer>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventTypeDescriptorList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<EventTypeDescriptor>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Notification>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PublisherList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Publisher>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubscriptionList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Subscription>,
}
