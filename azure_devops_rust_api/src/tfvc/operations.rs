// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
#![doc = "generated by AutoRust 0.1.0"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
use super::{models, API_VERSION};
#[derive(Clone)]
pub struct Client {
    endpoint: String,
    credential: std::sync::Arc<dyn azure_core::auth::TokenCredential>,
    scopes: Vec<String>,
    pipeline: azure_core::Pipeline,
}
#[derive(Clone)]
pub struct ClientBuilder {
    credential: std::sync::Arc<dyn azure_core::auth::TokenCredential>,
    endpoint: Option<String>,
    scopes: Option<Vec<String>>,
}
pub const DEFAULT_ENDPOINT: &str = azure_core::resource_manager_endpoint::AZURE_PUBLIC_CLOUD;
impl ClientBuilder {
    pub fn new(credential: std::sync::Arc<dyn azure_core::auth::TokenCredential>) -> Self {
        Self {
            credential,
            endpoint: None,
            scopes: None,
        }
    }
    pub fn endpoint(mut self, endpoint: impl Into<String>) -> Self {
        self.endpoint = Some(endpoint.into());
        self
    }
    pub fn scopes(mut self, scopes: &[&str]) -> Self {
        self.scopes = Some(scopes.iter().map(|scope| (*scope).to_owned()).collect());
        self
    }
    pub fn build(self) -> Client {
        let endpoint = self.endpoint.unwrap_or_else(|| DEFAULT_ENDPOINT.to_owned());
        let scopes = self
            .scopes
            .unwrap_or_else(|| vec![format!("{}/", endpoint)]);
        Client::new(endpoint, self.credential, scopes)
    }
}
impl Client {
    pub(crate) fn endpoint(&self) -> &str {
        self.endpoint.as_str()
    }
    pub(crate) fn token_credential(&self) -> &dyn azure_core::auth::TokenCredential {
        self.credential.as_ref()
    }
    pub(crate) fn scopes(&self) -> Vec<&str> {
        self.scopes.iter().map(String::as_str).collect()
    }
    pub(crate) async fn send(
        &self,
        request: impl Into<azure_core::Request>,
    ) -> Result<azure_core::Response, azure_core::Error> {
        let mut context = azure_core::Context::default();
        let mut request = request.into();
        self.pipeline.send(&mut context, &mut request).await
    }
    pub fn new(
        endpoint: impl Into<String>,
        credential: std::sync::Arc<dyn azure_core::auth::TokenCredential>,
        scopes: Vec<String>,
    ) -> Self {
        let endpoint = endpoint.into();
        let pipeline = azure_core::Pipeline::new(
            option_env!("CARGO_PKG_NAME"),
            option_env!("CARGO_PKG_VERSION"),
            azure_core::ClientOptions::default(),
            Vec::new(),
            Vec::new(),
        );
        Self {
            endpoint,
            credential,
            scopes,
            pipeline,
        }
    }
    pub fn branches(&self) -> branches::Client {
        branches::Client(self.clone())
    }
    pub fn changesets(&self) -> changesets::Client {
        changesets::Client(self.clone())
    }
    pub fn items(&self) -> items::Client {
        items::Client(self.clone())
    }
    pub fn labels(&self) -> labels::Client {
        labels::Client(self.clone())
    }
    pub fn shelvesets(&self) -> shelvesets::Client {
        shelvesets::Client(self.clone())
    }
}
#[non_exhaustive]
#[derive(Debug, thiserror :: Error)]
#[allow(non_camel_case_types)]
pub enum Error {
    #[error(transparent)]
    Changesets_GetChangesetChanges(#[from] changesets::get_changeset_changes::Error),
    #[error(transparent)]
    Changesets_GetChangesetWorkItems(#[from] changesets::get_changeset_work_items::Error),
    #[error(transparent)]
    Changesets_GetBatchedChangesets(#[from] changesets::get_batched_changesets::Error),
    #[error(transparent)]
    Labels_GetLabelItems(#[from] labels::get_label_items::Error),
    #[error(transparent)]
    Shelvesets_Get(#[from] shelvesets::get::Error),
    #[error(transparent)]
    Shelvesets_GetShelvesetChanges(#[from] shelvesets::get_shelveset_changes::Error),
    #[error(transparent)]
    Shelvesets_GetShelvesetWorkItems(#[from] shelvesets::get_shelveset_work_items::Error),
    #[error(transparent)]
    Branches_GetBranchRefs(#[from] branches::get_branch_refs::Error),
    #[error(transparent)]
    Changesets_GetChangesets(#[from] changesets::get_changesets::Error),
    #[error(transparent)]
    Changesets_Create(#[from] changesets::create::Error),
    #[error(transparent)]
    Changesets_Get(#[from] changesets::get::Error),
    #[error(transparent)]
    Items_GetItemsBatch(#[from] items::get_items_batch::Error),
    #[error(transparent)]
    Items_List(#[from] items::list::Error),
    #[error(transparent)]
    Labels_List(#[from] labels::list::Error),
    #[error(transparent)]
    Labels_Get(#[from] labels::get::Error),
    #[error(transparent)]
    Shelvesets_List(#[from] shelvesets::list::Error),
    #[error(transparent)]
    Branches_Get(#[from] branches::get::Error),
    #[error(transparent)]
    Branches_GetBranches(#[from] branches::get_branches::Error),
    #[error(transparent)]
    Items_Get(#[from] items::get::Error),
}
pub mod changesets {
    use super::{models, API_VERSION};
    pub struct Client(pub(crate) super::Client);
    impl Client {
        pub fn get_changeset_changes(
            &self,
            organization: impl Into<String>,
            id: i32,
        ) -> get_changeset_changes::Builder {
            get_changeset_changes::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                id,
                skip: None,
                top: None,
                continuation_token: None,
            }
        }
        pub fn get_changeset_work_items(
            &self,
            organization: impl Into<String>,
            id: i32,
        ) -> get_changeset_work_items::Builder {
            get_changeset_work_items::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                id,
            }
        }
        pub fn get_batched_changesets(
            &self,
            organization: impl Into<String>,
            body: impl Into<models::TfvcChangesetsRequestData>,
        ) -> get_batched_changesets::Builder {
            get_batched_changesets::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body: body.into(),
            }
        }
        pub fn get_changesets(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
        ) -> get_changesets::Builder {
            get_changesets::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                max_comment_length: None,
                skip: None,
                top: None,
                orderby: None,
                search_criteria_author: None,
                search_criteria_follow_renames: None,
                search_criteria_from_date: None,
                search_criteria_from_id: None,
                search_criteria_include_links: None,
                search_criteria_item_path: None,
                search_criteria_mappings: None,
                search_criteria_to_date: None,
                search_criteria_to_id: None,
            }
        }
        pub fn create(
            &self,
            organization: impl Into<String>,
            body: impl Into<models::TfvcChangeset>,
            project: impl Into<String>,
        ) -> create::Builder {
            create::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body: body.into(),
                project: project.into(),
            }
        }
        pub fn get(
            &self,
            organization: impl Into<String>,
            id: i32,
            project: impl Into<String>,
        ) -> get::Builder {
            get::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                id,
                project: project.into(),
                max_change_count: None,
                include_details: None,
                include_work_items: None,
                max_comment_length: None,
                include_source_rename: None,
                skip: None,
                top: None,
                orderby: None,
                search_criteria_author: None,
                search_criteria_follow_renames: None,
                search_criteria_from_date: None,
                search_criteria_from_id: None,
                search_criteria_include_links: None,
                search_criteria_item_path: None,
                search_criteria_mappings: None,
                search_criteria_to_date: None,
                search_criteria_to_id: None,
            }
        }
    }
    pub mod get_changeset_changes {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) id: i32,
            pub(crate) skip: Option<i32>,
            pub(crate) top: Option<i32>,
            pub(crate) continuation_token: Option<String>,
        }
        impl Builder {
            pub fn skip(mut self, skip: i32) -> Self {
                self.skip = Some(skip);
                self
            }
            pub fn top(mut self, top: i32) -> Self {
                self.top = Some(top);
                self
            }
            pub fn continuation_token(mut self, continuation_token: impl Into<String>) -> Self {
                self.continuation_token = Some(continuation_token.into());
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<
                'static,
                std::result::Result<models::TfvcChangeList, Error>,
            > {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/_apis/tfvc/changesets/{}/changes",
                        self.client.endpoint(),
                        &self.organization,
                        &self.id
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::GET);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    if let Some(skip) = &self.skip {
                        url.query_pairs_mut()
                            .append_pair("$skip", &skip.to_string());
                    }
                    if let Some(top) = &self.top {
                        url.query_pairs_mut().append_pair("$top", &top.to_string());
                    }
                    if let Some(continuation_token) = &self.continuation_token {
                        url.query_pairs_mut()
                            .append_pair("continuationToken", continuation_token);
                    }
                    let req_body = azure_core::EMPTY_BODY;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::TfvcChangeList =
                                serde_json::from_slice(&rsp_body).map_err(|source| {
                                    Error::Deserialize(source, rsp_body.clone())
                                })?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
    pub mod get_changeset_work_items {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<
                'static,
                std::result::Result<models::AssociatedWorkItemList, Error>,
            > {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/_apis/tfvc/changesets/{}/workItems",
                        self.client.endpoint(),
                        &self.organization,
                        &self.id
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::GET);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    let req_body = azure_core::EMPTY_BODY;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::AssociatedWorkItemList =
                                serde_json::from_slice(&rsp_body).map_err(|source| {
                                    Error::Deserialize(source, rsp_body.clone())
                                })?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
    pub mod get_batched_changesets {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: models::TfvcChangesetsRequestData,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<
                'static,
                std::result::Result<models::TfvcChangesetRefList, Error>,
            > {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/_apis/tfvc/changesetsbatch",
                        self.client.endpoint(),
                        &self.organization
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::POST);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    req_builder = req_builder.header("content-type", "application/json");
                    let req_body = azure_core::to_json(&self.body).map_err(Error::Serialize)?;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::TfvcChangesetRefList =
                                serde_json::from_slice(&rsp_body).map_err(|source| {
                                    Error::Deserialize(source, rsp_body.clone())
                                })?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
    pub mod get_changesets {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) max_comment_length: Option<i32>,
            pub(crate) skip: Option<i32>,
            pub(crate) top: Option<i32>,
            pub(crate) orderby: Option<String>,
            pub(crate) search_criteria_author: Option<String>,
            pub(crate) search_criteria_follow_renames: Option<bool>,
            pub(crate) search_criteria_from_date: Option<String>,
            pub(crate) search_criteria_from_id: Option<i32>,
            pub(crate) search_criteria_include_links: Option<bool>,
            pub(crate) search_criteria_item_path: Option<String>,
            pub(crate) search_criteria_mappings: Option<Vec<models::TfvcMappingFilter>>,
            pub(crate) search_criteria_to_date: Option<String>,
            pub(crate) search_criteria_to_id: Option<i32>,
        }
        impl Builder {
            pub fn max_comment_length(mut self, max_comment_length: i32) -> Self {
                self.max_comment_length = Some(max_comment_length);
                self
            }
            pub fn skip(mut self, skip: i32) -> Self {
                self.skip = Some(skip);
                self
            }
            pub fn top(mut self, top: i32) -> Self {
                self.top = Some(top);
                self
            }
            pub fn orderby(mut self, orderby: impl Into<String>) -> Self {
                self.orderby = Some(orderby.into());
                self
            }
            pub fn search_criteria_author(
                mut self,
                search_criteria_author: impl Into<String>,
            ) -> Self {
                self.search_criteria_author = Some(search_criteria_author.into());
                self
            }
            pub fn search_criteria_follow_renames(
                mut self,
                search_criteria_follow_renames: bool,
            ) -> Self {
                self.search_criteria_follow_renames = Some(search_criteria_follow_renames);
                self
            }
            pub fn search_criteria_from_date(
                mut self,
                search_criteria_from_date: impl Into<String>,
            ) -> Self {
                self.search_criteria_from_date = Some(search_criteria_from_date.into());
                self
            }
            pub fn search_criteria_from_id(mut self, search_criteria_from_id: i32) -> Self {
                self.search_criteria_from_id = Some(search_criteria_from_id);
                self
            }
            pub fn search_criteria_include_links(
                mut self,
                search_criteria_include_links: bool,
            ) -> Self {
                self.search_criteria_include_links = Some(search_criteria_include_links);
                self
            }
            pub fn search_criteria_item_path(
                mut self,
                search_criteria_item_path: impl Into<String>,
            ) -> Self {
                self.search_criteria_item_path = Some(search_criteria_item_path.into());
                self
            }
            pub fn search_criteria_mappings(
                mut self,
                search_criteria_mappings: impl Into<Vec<models::TfvcMappingFilter>>,
            ) -> Self {
                self.search_criteria_mappings = Some(search_criteria_mappings.into());
                self
            }
            pub fn search_criteria_to_date(
                mut self,
                search_criteria_to_date: impl Into<String>,
            ) -> Self {
                self.search_criteria_to_date = Some(search_criteria_to_date.into());
                self
            }
            pub fn search_criteria_to_id(mut self, search_criteria_to_id: i32) -> Self {
                self.search_criteria_to_id = Some(search_criteria_to_id);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<
                'static,
                std::result::Result<models::TfvcChangesetRefList, Error>,
            > {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/{}/_apis/tfvc/changesets",
                        self.client.endpoint(),
                        &self.organization,
                        &self.project
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::GET);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    if let Some(max_comment_length) = &self.max_comment_length {
                        url.query_pairs_mut()
                            .append_pair("maxCommentLength", &max_comment_length.to_string());
                    }
                    if let Some(skip) = &self.skip {
                        url.query_pairs_mut()
                            .append_pair("$skip", &skip.to_string());
                    }
                    if let Some(top) = &self.top {
                        url.query_pairs_mut().append_pair("$top", &top.to_string());
                    }
                    if let Some(orderby) = &self.orderby {
                        url.query_pairs_mut().append_pair("$orderby", orderby);
                    }
                    if let Some(search_criteria_author) = &self.search_criteria_author {
                        url.query_pairs_mut()
                            .append_pair("searchCriteria.author", search_criteria_author);
                    }
                    if let Some(search_criteria_follow_renames) =
                        &self.search_criteria_follow_renames
                    {
                        url.query_pairs_mut().append_pair(
                            "searchCriteria.followRenames",
                            &search_criteria_follow_renames.to_string(),
                        );
                    }
                    if let Some(search_criteria_from_date) = &self.search_criteria_from_date {
                        url.query_pairs_mut()
                            .append_pair("searchCriteria.fromDate", search_criteria_from_date);
                    }
                    if let Some(search_criteria_from_id) = &self.search_criteria_from_id {
                        url.query_pairs_mut().append_pair(
                            "searchCriteria.fromId",
                            &search_criteria_from_id.to_string(),
                        );
                    }
                    if let Some(search_criteria_include_links) = &self.search_criteria_include_links
                    {
                        url.query_pairs_mut().append_pair(
                            "searchCriteria.includeLinks",
                            &search_criteria_include_links.to_string(),
                        );
                    }
                    if let Some(search_criteria_item_path) = &self.search_criteria_item_path {
                        url.query_pairs_mut()
                            .append_pair("searchCriteria.itemPath", search_criteria_item_path);
                    }
                    if let Some(search_criteria_mappings) = &self.search_criteria_mappings {
                        url.query_pairs_mut().append_pair(
                            "searchCriteria.mappings",
                            &search_criteria_mappings.to_string(),
                        );
                    }
                    if let Some(search_criteria_to_date) = &self.search_criteria_to_date {
                        url.query_pairs_mut()
                            .append_pair("searchCriteria.toDate", search_criteria_to_date);
                    }
                    if let Some(search_criteria_to_id) = &self.search_criteria_to_id {
                        url.query_pairs_mut()
                            .append_pair("searchCriteria.toId", &search_criteria_to_id.to_string());
                    }
                    let req_body = azure_core::EMPTY_BODY;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::TfvcChangesetRefList =
                                serde_json::from_slice(&rsp_body).map_err(|source| {
                                    Error::Deserialize(source, rsp_body.clone())
                                })?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
    pub mod create {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: models::TfvcChangeset,
            pub(crate) project: String,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<
                'static,
                std::result::Result<models::TfvcChangesetRef, Error>,
            > {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/{}/_apis/tfvc/changesets",
                        self.client.endpoint(),
                        &self.organization,
                        &self.project
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::POST);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    req_builder = req_builder.header("content-type", "application/json");
                    let req_body = azure_core::to_json(&self.body).map_err(Error::Serialize)?;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::TfvcChangesetRef =
                                serde_json::from_slice(&rsp_body).map_err(|source| {
                                    Error::Deserialize(source, rsp_body.clone())
                                })?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
    pub mod get {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) id: i32,
            pub(crate) project: String,
            pub(crate) max_change_count: Option<i32>,
            pub(crate) include_details: Option<bool>,
            pub(crate) include_work_items: Option<bool>,
            pub(crate) max_comment_length: Option<i32>,
            pub(crate) include_source_rename: Option<bool>,
            pub(crate) skip: Option<i32>,
            pub(crate) top: Option<i32>,
            pub(crate) orderby: Option<String>,
            pub(crate) search_criteria_author: Option<String>,
            pub(crate) search_criteria_follow_renames: Option<bool>,
            pub(crate) search_criteria_from_date: Option<String>,
            pub(crate) search_criteria_from_id: Option<i32>,
            pub(crate) search_criteria_include_links: Option<bool>,
            pub(crate) search_criteria_item_path: Option<String>,
            pub(crate) search_criteria_mappings: Option<Vec<models::TfvcMappingFilter>>,
            pub(crate) search_criteria_to_date: Option<String>,
            pub(crate) search_criteria_to_id: Option<i32>,
        }
        impl Builder {
            pub fn max_change_count(mut self, max_change_count: i32) -> Self {
                self.max_change_count = Some(max_change_count);
                self
            }
            pub fn include_details(mut self, include_details: bool) -> Self {
                self.include_details = Some(include_details);
                self
            }
            pub fn include_work_items(mut self, include_work_items: bool) -> Self {
                self.include_work_items = Some(include_work_items);
                self
            }
            pub fn max_comment_length(mut self, max_comment_length: i32) -> Self {
                self.max_comment_length = Some(max_comment_length);
                self
            }
            pub fn include_source_rename(mut self, include_source_rename: bool) -> Self {
                self.include_source_rename = Some(include_source_rename);
                self
            }
            pub fn skip(mut self, skip: i32) -> Self {
                self.skip = Some(skip);
                self
            }
            pub fn top(mut self, top: i32) -> Self {
                self.top = Some(top);
                self
            }
            pub fn orderby(mut self, orderby: impl Into<String>) -> Self {
                self.orderby = Some(orderby.into());
                self
            }
            pub fn search_criteria_author(
                mut self,
                search_criteria_author: impl Into<String>,
            ) -> Self {
                self.search_criteria_author = Some(search_criteria_author.into());
                self
            }
            pub fn search_criteria_follow_renames(
                mut self,
                search_criteria_follow_renames: bool,
            ) -> Self {
                self.search_criteria_follow_renames = Some(search_criteria_follow_renames);
                self
            }
            pub fn search_criteria_from_date(
                mut self,
                search_criteria_from_date: impl Into<String>,
            ) -> Self {
                self.search_criteria_from_date = Some(search_criteria_from_date.into());
                self
            }
            pub fn search_criteria_from_id(mut self, search_criteria_from_id: i32) -> Self {
                self.search_criteria_from_id = Some(search_criteria_from_id);
                self
            }
            pub fn search_criteria_include_links(
                mut self,
                search_criteria_include_links: bool,
            ) -> Self {
                self.search_criteria_include_links = Some(search_criteria_include_links);
                self
            }
            pub fn search_criteria_item_path(
                mut self,
                search_criteria_item_path: impl Into<String>,
            ) -> Self {
                self.search_criteria_item_path = Some(search_criteria_item_path.into());
                self
            }
            pub fn search_criteria_mappings(
                mut self,
                search_criteria_mappings: impl Into<Vec<models::TfvcMappingFilter>>,
            ) -> Self {
                self.search_criteria_mappings = Some(search_criteria_mappings.into());
                self
            }
            pub fn search_criteria_to_date(
                mut self,
                search_criteria_to_date: impl Into<String>,
            ) -> Self {
                self.search_criteria_to_date = Some(search_criteria_to_date.into());
                self
            }
            pub fn search_criteria_to_id(mut self, search_criteria_to_id: i32) -> Self {
                self.search_criteria_to_id = Some(search_criteria_to_id);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<
                'static,
                std::result::Result<models::TfvcChangeset, Error>,
            > {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/{}/_apis/tfvc/changesets/{}",
                        self.client.endpoint(),
                        &self.organization,
                        &self.project,
                        &self.id
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::GET);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    if let Some(max_change_count) = &self.max_change_count {
                        url.query_pairs_mut()
                            .append_pair("maxChangeCount", &max_change_count.to_string());
                    }
                    if let Some(include_details) = &self.include_details {
                        url.query_pairs_mut()
                            .append_pair("includeDetails", &include_details.to_string());
                    }
                    if let Some(include_work_items) = &self.include_work_items {
                        url.query_pairs_mut()
                            .append_pair("includeWorkItems", &include_work_items.to_string());
                    }
                    if let Some(max_comment_length) = &self.max_comment_length {
                        url.query_pairs_mut()
                            .append_pair("maxCommentLength", &max_comment_length.to_string());
                    }
                    if let Some(include_source_rename) = &self.include_source_rename {
                        url.query_pairs_mut()
                            .append_pair("includeSourceRename", &include_source_rename.to_string());
                    }
                    if let Some(skip) = &self.skip {
                        url.query_pairs_mut()
                            .append_pair("$skip", &skip.to_string());
                    }
                    if let Some(top) = &self.top {
                        url.query_pairs_mut().append_pair("$top", &top.to_string());
                    }
                    if let Some(orderby) = &self.orderby {
                        url.query_pairs_mut().append_pair("$orderby", orderby);
                    }
                    if let Some(search_criteria_author) = &self.search_criteria_author {
                        url.query_pairs_mut()
                            .append_pair("searchCriteria.author", search_criteria_author);
                    }
                    if let Some(search_criteria_follow_renames) =
                        &self.search_criteria_follow_renames
                    {
                        url.query_pairs_mut().append_pair(
                            "searchCriteria.followRenames",
                            &search_criteria_follow_renames.to_string(),
                        );
                    }
                    if let Some(search_criteria_from_date) = &self.search_criteria_from_date {
                        url.query_pairs_mut()
                            .append_pair("searchCriteria.fromDate", search_criteria_from_date);
                    }
                    if let Some(search_criteria_from_id) = &self.search_criteria_from_id {
                        url.query_pairs_mut().append_pair(
                            "searchCriteria.fromId",
                            &search_criteria_from_id.to_string(),
                        );
                    }
                    if let Some(search_criteria_include_links) = &self.search_criteria_include_links
                    {
                        url.query_pairs_mut().append_pair(
                            "searchCriteria.includeLinks",
                            &search_criteria_include_links.to_string(),
                        );
                    }
                    if let Some(search_criteria_item_path) = &self.search_criteria_item_path {
                        url.query_pairs_mut()
                            .append_pair("searchCriteria.itemPath", search_criteria_item_path);
                    }
                    if let Some(search_criteria_mappings) = &self.search_criteria_mappings {
                        url.query_pairs_mut().append_pair(
                            "searchCriteria.mappings",
                            &search_criteria_mappings.to_string(),
                        );
                    }
                    if let Some(search_criteria_to_date) = &self.search_criteria_to_date {
                        url.query_pairs_mut()
                            .append_pair("searchCriteria.toDate", search_criteria_to_date);
                    }
                    if let Some(search_criteria_to_id) = &self.search_criteria_to_id {
                        url.query_pairs_mut()
                            .append_pair("searchCriteria.toId", &search_criteria_to_id.to_string());
                    }
                    let req_body = azure_core::EMPTY_BODY;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::TfvcChangeset =
                                serde_json::from_slice(&rsp_body).map_err(|source| {
                                    Error::Deserialize(source, rsp_body.clone())
                                })?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
}
pub mod labels {
    use super::{models, API_VERSION};
    pub struct Client(pub(crate) super::Client);
    impl Client {
        pub fn get_label_items(
            &self,
            organization: impl Into<String>,
            label_id: impl Into<String>,
        ) -> get_label_items::Builder {
            get_label_items::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                label_id: label_id.into(),
                top: None,
                skip: None,
            }
        }
        pub fn list(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
        ) -> list::Builder {
            list::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                request_data_include_links: None,
                request_data_item_label_filter: None,
                request_data_label_scope: None,
                request_data_max_item_count: None,
                request_data_name: None,
                request_data_owner: None,
                top: None,
                skip: None,
            }
        }
        pub fn get(
            &self,
            organization: impl Into<String>,
            label_id: impl Into<String>,
            project: impl Into<String>,
        ) -> get::Builder {
            get::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                label_id: label_id.into(),
                project: project.into(),
                request_data_include_links: None,
                request_data_item_label_filter: None,
                request_data_label_scope: None,
                request_data_max_item_count: None,
                request_data_name: None,
                request_data_owner: None,
            }
        }
    }
    pub mod get_label_items {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) label_id: String,
            pub(crate) top: Option<i32>,
            pub(crate) skip: Option<i32>,
        }
        impl Builder {
            pub fn top(mut self, top: i32) -> Self {
                self.top = Some(top);
                self
            }
            pub fn skip(mut self, skip: i32) -> Self {
                self.skip = Some(skip);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, std::result::Result<models::TfvcItemList, Error>>
            {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/_apis/tfvc/labels/{}/items",
                        self.client.endpoint(),
                        &self.organization,
                        &self.label_id
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::GET);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    if let Some(top) = &self.top {
                        url.query_pairs_mut().append_pair("$top", &top.to_string());
                    }
                    if let Some(skip) = &self.skip {
                        url.query_pairs_mut()
                            .append_pair("$skip", &skip.to_string());
                    }
                    let req_body = azure_core::EMPTY_BODY;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::TfvcItemList = serde_json::from_slice(&rsp_body)
                                .map_err(|source| Error::Deserialize(source, rsp_body.clone()))?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
    pub mod list {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) request_data_include_links: Option<bool>,
            pub(crate) request_data_item_label_filter: Option<String>,
            pub(crate) request_data_label_scope: Option<String>,
            pub(crate) request_data_max_item_count: Option<i32>,
            pub(crate) request_data_name: Option<String>,
            pub(crate) request_data_owner: Option<String>,
            pub(crate) top: Option<i32>,
            pub(crate) skip: Option<i32>,
        }
        impl Builder {
            pub fn request_data_include_links(mut self, request_data_include_links: bool) -> Self {
                self.request_data_include_links = Some(request_data_include_links);
                self
            }
            pub fn request_data_item_label_filter(
                mut self,
                request_data_item_label_filter: impl Into<String>,
            ) -> Self {
                self.request_data_item_label_filter = Some(request_data_item_label_filter.into());
                self
            }
            pub fn request_data_label_scope(
                mut self,
                request_data_label_scope: impl Into<String>,
            ) -> Self {
                self.request_data_label_scope = Some(request_data_label_scope.into());
                self
            }
            pub fn request_data_max_item_count(mut self, request_data_max_item_count: i32) -> Self {
                self.request_data_max_item_count = Some(request_data_max_item_count);
                self
            }
            pub fn request_data_name(mut self, request_data_name: impl Into<String>) -> Self {
                self.request_data_name = Some(request_data_name.into());
                self
            }
            pub fn request_data_owner(mut self, request_data_owner: impl Into<String>) -> Self {
                self.request_data_owner = Some(request_data_owner.into());
                self
            }
            pub fn top(mut self, top: i32) -> Self {
                self.top = Some(top);
                self
            }
            pub fn skip(mut self, skip: i32) -> Self {
                self.skip = Some(skip);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<
                'static,
                std::result::Result<models::TfvcLabelRefList, Error>,
            > {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/{}/_apis/tfvc/labels",
                        self.client.endpoint(),
                        &self.organization,
                        &self.project
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::GET);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    if let Some(request_data_include_links) = &self.request_data_include_links {
                        url.query_pairs_mut().append_pair(
                            "requestData.includeLinks",
                            &request_data_include_links.to_string(),
                        );
                    }
                    if let Some(request_data_item_label_filter) =
                        &self.request_data_item_label_filter
                    {
                        url.query_pairs_mut().append_pair(
                            "requestData.itemLabelFilter",
                            request_data_item_label_filter,
                        );
                    }
                    if let Some(request_data_label_scope) = &self.request_data_label_scope {
                        url.query_pairs_mut()
                            .append_pair("requestData.labelScope", request_data_label_scope);
                    }
                    if let Some(request_data_max_item_count) = &self.request_data_max_item_count {
                        url.query_pairs_mut().append_pair(
                            "requestData.maxItemCount",
                            &request_data_max_item_count.to_string(),
                        );
                    }
                    if let Some(request_data_name) = &self.request_data_name {
                        url.query_pairs_mut()
                            .append_pair("requestData.name", request_data_name);
                    }
                    if let Some(request_data_owner) = &self.request_data_owner {
                        url.query_pairs_mut()
                            .append_pair("requestData.owner", request_data_owner);
                    }
                    if let Some(top) = &self.top {
                        url.query_pairs_mut().append_pair("$top", &top.to_string());
                    }
                    if let Some(skip) = &self.skip {
                        url.query_pairs_mut()
                            .append_pair("$skip", &skip.to_string());
                    }
                    let req_body = azure_core::EMPTY_BODY;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::TfvcLabelRefList =
                                serde_json::from_slice(&rsp_body).map_err(|source| {
                                    Error::Deserialize(source, rsp_body.clone())
                                })?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
    pub mod get {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) label_id: String,
            pub(crate) project: String,
            pub(crate) request_data_include_links: Option<bool>,
            pub(crate) request_data_item_label_filter: Option<String>,
            pub(crate) request_data_label_scope: Option<String>,
            pub(crate) request_data_max_item_count: Option<i32>,
            pub(crate) request_data_name: Option<String>,
            pub(crate) request_data_owner: Option<String>,
        }
        impl Builder {
            pub fn request_data_include_links(mut self, request_data_include_links: bool) -> Self {
                self.request_data_include_links = Some(request_data_include_links);
                self
            }
            pub fn request_data_item_label_filter(
                mut self,
                request_data_item_label_filter: impl Into<String>,
            ) -> Self {
                self.request_data_item_label_filter = Some(request_data_item_label_filter.into());
                self
            }
            pub fn request_data_label_scope(
                mut self,
                request_data_label_scope: impl Into<String>,
            ) -> Self {
                self.request_data_label_scope = Some(request_data_label_scope.into());
                self
            }
            pub fn request_data_max_item_count(mut self, request_data_max_item_count: i32) -> Self {
                self.request_data_max_item_count = Some(request_data_max_item_count);
                self
            }
            pub fn request_data_name(mut self, request_data_name: impl Into<String>) -> Self {
                self.request_data_name = Some(request_data_name.into());
                self
            }
            pub fn request_data_owner(mut self, request_data_owner: impl Into<String>) -> Self {
                self.request_data_owner = Some(request_data_owner.into());
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, std::result::Result<models::TfvcLabel, Error>>
            {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/{}/_apis/tfvc/labels/{}",
                        self.client.endpoint(),
                        &self.organization,
                        &self.project,
                        &self.label_id
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::GET);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    if let Some(request_data_include_links) = &self.request_data_include_links {
                        url.query_pairs_mut().append_pair(
                            "requestData.includeLinks",
                            &request_data_include_links.to_string(),
                        );
                    }
                    if let Some(request_data_item_label_filter) =
                        &self.request_data_item_label_filter
                    {
                        url.query_pairs_mut().append_pair(
                            "requestData.itemLabelFilter",
                            request_data_item_label_filter,
                        );
                    }
                    if let Some(request_data_label_scope) = &self.request_data_label_scope {
                        url.query_pairs_mut()
                            .append_pair("requestData.labelScope", request_data_label_scope);
                    }
                    if let Some(request_data_max_item_count) = &self.request_data_max_item_count {
                        url.query_pairs_mut().append_pair(
                            "requestData.maxItemCount",
                            &request_data_max_item_count.to_string(),
                        );
                    }
                    if let Some(request_data_name) = &self.request_data_name {
                        url.query_pairs_mut()
                            .append_pair("requestData.name", request_data_name);
                    }
                    if let Some(request_data_owner) = &self.request_data_owner {
                        url.query_pairs_mut()
                            .append_pair("requestData.owner", request_data_owner);
                    }
                    let req_body = azure_core::EMPTY_BODY;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::TfvcLabel = serde_json::from_slice(&rsp_body)
                                .map_err(|source| Error::Deserialize(source, rsp_body.clone()))?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
}
pub mod shelvesets {
    use super::{models, API_VERSION};
    pub struct Client(pub(crate) super::Client);
    impl Client {
        pub fn get(
            &self,
            organization: impl Into<String>,
            shelveset_id: impl Into<String>,
        ) -> get::Builder {
            get::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                shelveset_id: shelveset_id.into(),
                request_data_include_details: None,
                request_data_include_links: None,
                request_data_include_work_items: None,
                request_data_max_change_count: None,
                request_data_max_comment_length: None,
                request_data_name: None,
                request_data_owner: None,
            }
        }
        pub fn get_shelveset_changes(
            &self,
            organization: impl Into<String>,
            shelveset_id: impl Into<String>,
        ) -> get_shelveset_changes::Builder {
            get_shelveset_changes::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                shelveset_id: shelveset_id.into(),
                top: None,
                skip: None,
            }
        }
        pub fn get_shelveset_work_items(
            &self,
            organization: impl Into<String>,
            shelveset_id: impl Into<String>,
        ) -> get_shelveset_work_items::Builder {
            get_shelveset_work_items::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                shelveset_id: shelveset_id.into(),
            }
        }
        pub fn list(&self, organization: impl Into<String>) -> list::Builder {
            list::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                request_data_include_details: None,
                request_data_include_links: None,
                request_data_include_work_items: None,
                request_data_max_change_count: None,
                request_data_max_comment_length: None,
                request_data_name: None,
                request_data_owner: None,
                top: None,
                skip: None,
            }
        }
    }
    pub mod get {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) shelveset_id: String,
            pub(crate) request_data_include_details: Option<bool>,
            pub(crate) request_data_include_links: Option<bool>,
            pub(crate) request_data_include_work_items: Option<bool>,
            pub(crate) request_data_max_change_count: Option<i32>,
            pub(crate) request_data_max_comment_length: Option<i32>,
            pub(crate) request_data_name: Option<String>,
            pub(crate) request_data_owner: Option<String>,
        }
        impl Builder {
            pub fn request_data_include_details(
                mut self,
                request_data_include_details: bool,
            ) -> Self {
                self.request_data_include_details = Some(request_data_include_details);
                self
            }
            pub fn request_data_include_links(mut self, request_data_include_links: bool) -> Self {
                self.request_data_include_links = Some(request_data_include_links);
                self
            }
            pub fn request_data_include_work_items(
                mut self,
                request_data_include_work_items: bool,
            ) -> Self {
                self.request_data_include_work_items = Some(request_data_include_work_items);
                self
            }
            pub fn request_data_max_change_count(
                mut self,
                request_data_max_change_count: i32,
            ) -> Self {
                self.request_data_max_change_count = Some(request_data_max_change_count);
                self
            }
            pub fn request_data_max_comment_length(
                mut self,
                request_data_max_comment_length: i32,
            ) -> Self {
                self.request_data_max_comment_length = Some(request_data_max_comment_length);
                self
            }
            pub fn request_data_name(mut self, request_data_name: impl Into<String>) -> Self {
                self.request_data_name = Some(request_data_name.into());
                self
            }
            pub fn request_data_owner(mut self, request_data_owner: impl Into<String>) -> Self {
                self.request_data_owner = Some(request_data_owner.into());
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<
                'static,
                std::result::Result<models::TfvcShelveset, Error>,
            > {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/_apis/tfvc/shelvesets",
                        self.client.endpoint(),
                        &self.organization
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::GET);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    let shelveset_id = &self.shelveset_id;
                    url.query_pairs_mut()
                        .append_pair("shelvesetId", shelveset_id);
                    if let Some(request_data_include_details) = &self.request_data_include_details {
                        url.query_pairs_mut().append_pair(
                            "requestData.includeDetails",
                            &request_data_include_details.to_string(),
                        );
                    }
                    if let Some(request_data_include_links) = &self.request_data_include_links {
                        url.query_pairs_mut().append_pair(
                            "requestData.includeLinks",
                            &request_data_include_links.to_string(),
                        );
                    }
                    if let Some(request_data_include_work_items) =
                        &self.request_data_include_work_items
                    {
                        url.query_pairs_mut().append_pair(
                            "requestData.includeWorkItems",
                            &request_data_include_work_items.to_string(),
                        );
                    }
                    if let Some(request_data_max_change_count) = &self.request_data_max_change_count
                    {
                        url.query_pairs_mut().append_pair(
                            "requestData.maxChangeCount",
                            &request_data_max_change_count.to_string(),
                        );
                    }
                    if let Some(request_data_max_comment_length) =
                        &self.request_data_max_comment_length
                    {
                        url.query_pairs_mut().append_pair(
                            "requestData.maxCommentLength",
                            &request_data_max_comment_length.to_string(),
                        );
                    }
                    if let Some(request_data_name) = &self.request_data_name {
                        url.query_pairs_mut()
                            .append_pair("requestData.name", request_data_name);
                    }
                    if let Some(request_data_owner) = &self.request_data_owner {
                        url.query_pairs_mut()
                            .append_pair("requestData.owner", request_data_owner);
                    }
                    let req_body = azure_core::EMPTY_BODY;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::TfvcShelveset =
                                serde_json::from_slice(&rsp_body).map_err(|source| {
                                    Error::Deserialize(source, rsp_body.clone())
                                })?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
    pub mod get_shelveset_changes {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) shelveset_id: String,
            pub(crate) top: Option<i32>,
            pub(crate) skip: Option<i32>,
        }
        impl Builder {
            pub fn top(mut self, top: i32) -> Self {
                self.top = Some(top);
                self
            }
            pub fn skip(mut self, skip: i32) -> Self {
                self.skip = Some(skip);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<
                'static,
                std::result::Result<models::TfvcChangeList, Error>,
            > {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/_apis/tfvc/shelvesets/changes",
                        self.client.endpoint(),
                        &self.organization
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::GET);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    let shelveset_id = &self.shelveset_id;
                    url.query_pairs_mut()
                        .append_pair("shelvesetId", shelveset_id);
                    if let Some(top) = &self.top {
                        url.query_pairs_mut().append_pair("$top", &top.to_string());
                    }
                    if let Some(skip) = &self.skip {
                        url.query_pairs_mut()
                            .append_pair("$skip", &skip.to_string());
                    }
                    let req_body = azure_core::EMPTY_BODY;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::TfvcChangeList =
                                serde_json::from_slice(&rsp_body).map_err(|source| {
                                    Error::Deserialize(source, rsp_body.clone())
                                })?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
    pub mod get_shelveset_work_items {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) shelveset_id: String,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<
                'static,
                std::result::Result<models::AssociatedWorkItemList, Error>,
            > {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/_apis/tfvc/shelvesets/workitems",
                        self.client.endpoint(),
                        &self.organization
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::GET);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    let shelveset_id = &self.shelveset_id;
                    url.query_pairs_mut()
                        .append_pair("shelvesetId", shelveset_id);
                    let req_body = azure_core::EMPTY_BODY;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::AssociatedWorkItemList =
                                serde_json::from_slice(&rsp_body).map_err(|source| {
                                    Error::Deserialize(source, rsp_body.clone())
                                })?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
    pub mod list {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) request_data_include_details: Option<bool>,
            pub(crate) request_data_include_links: Option<bool>,
            pub(crate) request_data_include_work_items: Option<bool>,
            pub(crate) request_data_max_change_count: Option<i32>,
            pub(crate) request_data_max_comment_length: Option<i32>,
            pub(crate) request_data_name: Option<String>,
            pub(crate) request_data_owner: Option<String>,
            pub(crate) top: Option<i32>,
            pub(crate) skip: Option<i32>,
        }
        impl Builder {
            pub fn request_data_include_details(
                mut self,
                request_data_include_details: bool,
            ) -> Self {
                self.request_data_include_details = Some(request_data_include_details);
                self
            }
            pub fn request_data_include_links(mut self, request_data_include_links: bool) -> Self {
                self.request_data_include_links = Some(request_data_include_links);
                self
            }
            pub fn request_data_include_work_items(
                mut self,
                request_data_include_work_items: bool,
            ) -> Self {
                self.request_data_include_work_items = Some(request_data_include_work_items);
                self
            }
            pub fn request_data_max_change_count(
                mut self,
                request_data_max_change_count: i32,
            ) -> Self {
                self.request_data_max_change_count = Some(request_data_max_change_count);
                self
            }
            pub fn request_data_max_comment_length(
                mut self,
                request_data_max_comment_length: i32,
            ) -> Self {
                self.request_data_max_comment_length = Some(request_data_max_comment_length);
                self
            }
            pub fn request_data_name(mut self, request_data_name: impl Into<String>) -> Self {
                self.request_data_name = Some(request_data_name.into());
                self
            }
            pub fn request_data_owner(mut self, request_data_owner: impl Into<String>) -> Self {
                self.request_data_owner = Some(request_data_owner.into());
                self
            }
            pub fn top(mut self, top: i32) -> Self {
                self.top = Some(top);
                self
            }
            pub fn skip(mut self, skip: i32) -> Self {
                self.skip = Some(skip);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<
                'static,
                std::result::Result<models::TfvcShelvesetRefList, Error>,
            > {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/_apis/tfvc/shelvesets?",
                        self.client.endpoint(),
                        &self.organization
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::GET);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    if let Some(request_data_include_details) = &self.request_data_include_details {
                        url.query_pairs_mut().append_pair(
                            "requestData.includeDetails",
                            &request_data_include_details.to_string(),
                        );
                    }
                    if let Some(request_data_include_links) = &self.request_data_include_links {
                        url.query_pairs_mut().append_pair(
                            "requestData.includeLinks",
                            &request_data_include_links.to_string(),
                        );
                    }
                    if let Some(request_data_include_work_items) =
                        &self.request_data_include_work_items
                    {
                        url.query_pairs_mut().append_pair(
                            "requestData.includeWorkItems",
                            &request_data_include_work_items.to_string(),
                        );
                    }
                    if let Some(request_data_max_change_count) = &self.request_data_max_change_count
                    {
                        url.query_pairs_mut().append_pair(
                            "requestData.maxChangeCount",
                            &request_data_max_change_count.to_string(),
                        );
                    }
                    if let Some(request_data_max_comment_length) =
                        &self.request_data_max_comment_length
                    {
                        url.query_pairs_mut().append_pair(
                            "requestData.maxCommentLength",
                            &request_data_max_comment_length.to_string(),
                        );
                    }
                    if let Some(request_data_name) = &self.request_data_name {
                        url.query_pairs_mut()
                            .append_pair("requestData.name", request_data_name);
                    }
                    if let Some(request_data_owner) = &self.request_data_owner {
                        url.query_pairs_mut()
                            .append_pair("requestData.owner", request_data_owner);
                    }
                    if let Some(top) = &self.top {
                        url.query_pairs_mut().append_pair("$top", &top.to_string());
                    }
                    if let Some(skip) = &self.skip {
                        url.query_pairs_mut()
                            .append_pair("$skip", &skip.to_string());
                    }
                    let req_body = azure_core::EMPTY_BODY;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::TfvcShelvesetRefList =
                                serde_json::from_slice(&rsp_body).map_err(|source| {
                                    Error::Deserialize(source, rsp_body.clone())
                                })?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
}
pub mod branches {
    use super::{models, API_VERSION};
    pub struct Client(pub(crate) super::Client);
    impl Client {
        pub fn get_branch_refs(
            &self,
            organization: impl Into<String>,
            scope_path: impl Into<String>,
            project: impl Into<String>,
        ) -> get_branch_refs::Builder {
            get_branch_refs::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                scope_path: scope_path.into(),
                project: project.into(),
                include_deleted: None,
                include_links: None,
            }
        }
        pub fn get(
            &self,
            organization: impl Into<String>,
            path: impl Into<String>,
            project: impl Into<String>,
        ) -> get::Builder {
            get::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                path: path.into(),
                project: project.into(),
                include_parent: None,
                include_children: None,
            }
        }
        pub fn get_branches(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
        ) -> get_branches::Builder {
            get_branches::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                include_parent: None,
                include_children: None,
                include_deleted: None,
                include_links: None,
            }
        }
    }
    pub mod get_branch_refs {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) scope_path: String,
            pub(crate) project: String,
            pub(crate) include_deleted: Option<bool>,
            pub(crate) include_links: Option<bool>,
        }
        impl Builder {
            pub fn include_deleted(mut self, include_deleted: bool) -> Self {
                self.include_deleted = Some(include_deleted);
                self
            }
            pub fn include_links(mut self, include_links: bool) -> Self {
                self.include_links = Some(include_links);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<
                'static,
                std::result::Result<models::TfvcBranchRefList, Error>,
            > {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/{}/_apis/tfvc/branches",
                        self.client.endpoint(),
                        &self.organization,
                        &self.project
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::GET);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    let scope_path = &self.scope_path;
                    url.query_pairs_mut().append_pair("scopePath", scope_path);
                    if let Some(include_deleted) = &self.include_deleted {
                        url.query_pairs_mut()
                            .append_pair("includeDeleted", &include_deleted.to_string());
                    }
                    if let Some(include_links) = &self.include_links {
                        url.query_pairs_mut()
                            .append_pair("includeLinks", &include_links.to_string());
                    }
                    let req_body = azure_core::EMPTY_BODY;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::TfvcBranchRefList =
                                serde_json::from_slice(&rsp_body).map_err(|source| {
                                    Error::Deserialize(source, rsp_body.clone())
                                })?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
    pub mod get {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) path: String,
            pub(crate) project: String,
            pub(crate) include_parent: Option<bool>,
            pub(crate) include_children: Option<bool>,
        }
        impl Builder {
            pub fn include_parent(mut self, include_parent: bool) -> Self {
                self.include_parent = Some(include_parent);
                self
            }
            pub fn include_children(mut self, include_children: bool) -> Self {
                self.include_children = Some(include_children);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, std::result::Result<models::TfvcBranch, Error>>
            {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/{}/_apis/tfvc/branches?path={}",
                        self.client.endpoint(),
                        &self.organization,
                        &self.project,
                        &self.path
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::GET);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    let path = &self.path;
                    url.query_pairs_mut().append_pair("path", path);
                    if let Some(include_parent) = &self.include_parent {
                        url.query_pairs_mut()
                            .append_pair("includeParent", &include_parent.to_string());
                    }
                    if let Some(include_children) = &self.include_children {
                        url.query_pairs_mut()
                            .append_pair("includeChildren", &include_children.to_string());
                    }
                    let req_body = azure_core::EMPTY_BODY;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::TfvcBranch = serde_json::from_slice(&rsp_body)
                                .map_err(|source| {
                                Error::Deserialize(source, rsp_body.clone())
                            })?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
    pub mod get_branches {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) include_parent: Option<bool>,
            pub(crate) include_children: Option<bool>,
            pub(crate) include_deleted: Option<bool>,
            pub(crate) include_links: Option<bool>,
        }
        impl Builder {
            pub fn include_parent(mut self, include_parent: bool) -> Self {
                self.include_parent = Some(include_parent);
                self
            }
            pub fn include_children(mut self, include_children: bool) -> Self {
                self.include_children = Some(include_children);
                self
            }
            pub fn include_deleted(mut self, include_deleted: bool) -> Self {
                self.include_deleted = Some(include_deleted);
                self
            }
            pub fn include_links(mut self, include_links: bool) -> Self {
                self.include_links = Some(include_links);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<
                'static,
                std::result::Result<models::TfvcBranchList, Error>,
            > {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/{}/_apis/tfvc/branches?",
                        self.client.endpoint(),
                        &self.organization,
                        &self.project
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::GET);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    if let Some(include_parent) = &self.include_parent {
                        url.query_pairs_mut()
                            .append_pair("includeParent", &include_parent.to_string());
                    }
                    if let Some(include_children) = &self.include_children {
                        url.query_pairs_mut()
                            .append_pair("includeChildren", &include_children.to_string());
                    }
                    if let Some(include_deleted) = &self.include_deleted {
                        url.query_pairs_mut()
                            .append_pair("includeDeleted", &include_deleted.to_string());
                    }
                    if let Some(include_links) = &self.include_links {
                        url.query_pairs_mut()
                            .append_pair("includeLinks", &include_links.to_string());
                    }
                    let req_body = azure_core::EMPTY_BODY;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::TfvcBranchList =
                                serde_json::from_slice(&rsp_body).map_err(|source| {
                                    Error::Deserialize(source, rsp_body.clone())
                                })?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
}
pub mod items {
    use super::{models, API_VERSION};
    pub struct Client(pub(crate) super::Client);
    impl Client {
        pub fn get_items_batch(
            &self,
            organization: impl Into<String>,
            body: impl Into<models::TfvcItemRequestData>,
            project: impl Into<String>,
        ) -> get_items_batch::Builder {
            get_items_batch::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body: body.into(),
                project: project.into(),
            }
        }
        pub fn list(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
        ) -> list::Builder {
            list::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                scope_path: None,
                recursion_level: None,
                include_links: None,
                version_descriptor_version: None,
                version_descriptor_version_option: None,
                version_descriptor_version_type: None,
            }
        }
        pub fn get(
            &self,
            organization: impl Into<String>,
            path: impl Into<String>,
            project: impl Into<String>,
        ) -> get::Builder {
            get::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                path: path.into(),
                project: project.into(),
                file_name: None,
                download: None,
                scope_path: None,
                recursion_level: None,
                version_descriptor_version: None,
                version_descriptor_version_option: None,
                version_descriptor_version_type: None,
                include_content: None,
            }
        }
    }
    pub mod get_items_batch {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: models::TfvcItemRequestData,
            pub(crate) project: String,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, std::result::Result<Vec<String>, Error>>
            {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/{}/_apis/tfvc/itembatch",
                        self.client.endpoint(),
                        &self.organization,
                        &self.project
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::POST);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    req_builder = req_builder.header("content-type", "application/json");
                    let req_body = azure_core::to_json(&self.body).map_err(Error::Serialize)?;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: Vec<String> = serde_json::from_slice(&rsp_body)
                                .map_err(|source| Error::Deserialize(source, rsp_body.clone()))?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
    pub mod list {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) scope_path: Option<String>,
            pub(crate) recursion_level: Option<String>,
            pub(crate) include_links: Option<bool>,
            pub(crate) version_descriptor_version: Option<String>,
            pub(crate) version_descriptor_version_option: Option<String>,
            pub(crate) version_descriptor_version_type: Option<String>,
        }
        impl Builder {
            pub fn scope_path(mut self, scope_path: impl Into<String>) -> Self {
                self.scope_path = Some(scope_path.into());
                self
            }
            pub fn recursion_level(mut self, recursion_level: impl Into<String>) -> Self {
                self.recursion_level = Some(recursion_level.into());
                self
            }
            pub fn include_links(mut self, include_links: bool) -> Self {
                self.include_links = Some(include_links);
                self
            }
            pub fn version_descriptor_version(
                mut self,
                version_descriptor_version: impl Into<String>,
            ) -> Self {
                self.version_descriptor_version = Some(version_descriptor_version.into());
                self
            }
            pub fn version_descriptor_version_option(
                mut self,
                version_descriptor_version_option: impl Into<String>,
            ) -> Self {
                self.version_descriptor_version_option =
                    Some(version_descriptor_version_option.into());
                self
            }
            pub fn version_descriptor_version_type(
                mut self,
                version_descriptor_version_type: impl Into<String>,
            ) -> Self {
                self.version_descriptor_version_type = Some(version_descriptor_version_type.into());
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, std::result::Result<models::TfvcItemList, Error>>
            {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/{}/_apis/tfvc/items",
                        self.client.endpoint(),
                        &self.organization,
                        &self.project
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::GET);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    if let Some(scope_path) = &self.scope_path {
                        url.query_pairs_mut().append_pair("scopePath", scope_path);
                    }
                    if let Some(recursion_level) = &self.recursion_level {
                        url.query_pairs_mut()
                            .append_pair("recursionLevel", recursion_level);
                    }
                    if let Some(include_links) = &self.include_links {
                        url.query_pairs_mut()
                            .append_pair("includeLinks", &include_links.to_string());
                    }
                    if let Some(version_descriptor_version) = &self.version_descriptor_version {
                        url.query_pairs_mut()
                            .append_pair("versionDescriptor.version", version_descriptor_version);
                    }
                    if let Some(version_descriptor_version_option) =
                        &self.version_descriptor_version_option
                    {
                        url.query_pairs_mut().append_pair(
                            "versionDescriptor.versionOption",
                            version_descriptor_version_option,
                        );
                    }
                    if let Some(version_descriptor_version_type) =
                        &self.version_descriptor_version_type
                    {
                        url.query_pairs_mut().append_pair(
                            "versionDescriptor.versionType",
                            version_descriptor_version_type,
                        );
                    }
                    let req_body = azure_core::EMPTY_BODY;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::TfvcItemList = serde_json::from_slice(&rsp_body)
                                .map_err(|source| Error::Deserialize(source, rsp_body.clone()))?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
    pub mod get {
        use super::{models, API_VERSION};
        #[derive(Debug, thiserror :: Error)]
        pub enum Error {
            #[error("Unexpected HTTP status code {}", status_code)]
            UnexpectedResponse {
                status_code: http::StatusCode,
                body: bytes::Bytes,
            },
            #[error("Failed to parse request URL: {0}")]
            ParseUrl(url::ParseError),
            #[error("Failed to build request: {0}")]
            BuildRequest(http::Error),
            #[error("Failed to serialize request body: {0}")]
            Serialize(serde_json::Error),
            #[error("Failed to get access token: {0}")]
            GetToken(azure_core::Error),
            #[error("Failed to execute request: {0}")]
            SendRequest(azure_core::Error),
            #[error("Failed to get response bytes: {0}")]
            ResponseBytes(azure_core::StreamError),
            #[error("Failed to deserialize response: {0}, body: {1:?}")]
            Deserialize(serde_json::Error, bytes::Bytes),
        }
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) path: String,
            pub(crate) project: String,
            pub(crate) file_name: Option<String>,
            pub(crate) download: Option<bool>,
            pub(crate) scope_path: Option<String>,
            pub(crate) recursion_level: Option<String>,
            pub(crate) version_descriptor_version: Option<String>,
            pub(crate) version_descriptor_version_option: Option<String>,
            pub(crate) version_descriptor_version_type: Option<String>,
            pub(crate) include_content: Option<bool>,
        }
        impl Builder {
            pub fn file_name(mut self, file_name: impl Into<String>) -> Self {
                self.file_name = Some(file_name.into());
                self
            }
            pub fn download(mut self, download: bool) -> Self {
                self.download = Some(download);
                self
            }
            pub fn scope_path(mut self, scope_path: impl Into<String>) -> Self {
                self.scope_path = Some(scope_path.into());
                self
            }
            pub fn recursion_level(mut self, recursion_level: impl Into<String>) -> Self {
                self.recursion_level = Some(recursion_level.into());
                self
            }
            pub fn version_descriptor_version(
                mut self,
                version_descriptor_version: impl Into<String>,
            ) -> Self {
                self.version_descriptor_version = Some(version_descriptor_version.into());
                self
            }
            pub fn version_descriptor_version_option(
                mut self,
                version_descriptor_version_option: impl Into<String>,
            ) -> Self {
                self.version_descriptor_version_option =
                    Some(version_descriptor_version_option.into());
                self
            }
            pub fn version_descriptor_version_type(
                mut self,
                version_descriptor_version_type: impl Into<String>,
            ) -> Self {
                self.version_descriptor_version_type = Some(version_descriptor_version_type.into());
                self
            }
            pub fn include_content(mut self, include_content: bool) -> Self {
                self.include_content = Some(include_content);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, std::result::Result<models::TfvcItem, Error>>
            {
                Box::pin(async move {
                    let url_str = &format!(
                        "{}/{}/{}/_apis/tfvc/items?path={}",
                        self.client.endpoint(),
                        &self.organization,
                        &self.project,
                        &self.path
                    );
                    let mut url = url::Url::parse(url_str).map_err(Error::ParseUrl)?;
                    let mut req_builder = http::request::Builder::new();
                    req_builder = req_builder.method(http::Method::GET);
                    let credential = self.client.token_credential();
                    let token_response = credential
                        .get_token(&self.client.scopes().join(" "))
                        .await
                        .map_err(Error::GetToken)?;
                    req_builder = req_builder.header(
                        http::header::AUTHORIZATION,
                        format!("Bearer {}", token_response.token.secret()),
                    );
                    url.query_pairs_mut()
                        .append_pair("api-version", super::API_VERSION);
                    let path = &self.path;
                    url.query_pairs_mut().append_pair("path", path);
                    if let Some(file_name) = &self.file_name {
                        url.query_pairs_mut().append_pair("fileName", file_name);
                    }
                    if let Some(download) = &self.download {
                        url.query_pairs_mut()
                            .append_pair("download", &download.to_string());
                    }
                    if let Some(scope_path) = &self.scope_path {
                        url.query_pairs_mut().append_pair("scopePath", scope_path);
                    }
                    if let Some(recursion_level) = &self.recursion_level {
                        url.query_pairs_mut()
                            .append_pair("recursionLevel", recursion_level);
                    }
                    if let Some(version_descriptor_version) = &self.version_descriptor_version {
                        url.query_pairs_mut()
                            .append_pair("versionDescriptor.version", version_descriptor_version);
                    }
                    if let Some(version_descriptor_version_option) =
                        &self.version_descriptor_version_option
                    {
                        url.query_pairs_mut().append_pair(
                            "versionDescriptor.versionOption",
                            version_descriptor_version_option,
                        );
                    }
                    if let Some(version_descriptor_version_type) =
                        &self.version_descriptor_version_type
                    {
                        url.query_pairs_mut().append_pair(
                            "versionDescriptor.versionType",
                            version_descriptor_version_type,
                        );
                    }
                    if let Some(include_content) = &self.include_content {
                        url.query_pairs_mut()
                            .append_pair("includeContent", &include_content.to_string());
                    }
                    let req_body = azure_core::EMPTY_BODY;
                    req_builder = req_builder.uri(url.as_str());
                    let req = req_builder.body(req_body).map_err(Error::BuildRequest)?;
                    let rsp = self.client.send(req).await.map_err(Error::SendRequest)?;
                    let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                    match rsp_status {
                        http::StatusCode::OK => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            let rsp_value: models::TfvcItem = serde_json::from_slice(&rsp_body)
                                .map_err(|source| Error::Deserialize(source, rsp_body.clone()))?;
                            Ok(rsp_value)
                        }
                        status_code => {
                            let rsp_body = azure_core::collect_pinned_stream(rsp_stream)
                                .await
                                .map_err(Error::ResponseBytes)?;
                            Err(Error::UnexpectedResponse {
                                status_code,
                                body: rsp_body,
                            })
                        }
                    }
                })
            }
        }
    }
}
