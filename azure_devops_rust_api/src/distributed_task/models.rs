#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AadOauthTokenRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refresh: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AadOauthTokenResult {
    #[serde(
        rename = "accessToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub access_token: Option<String>,
    #[serde(
        rename = "refreshTokenCache",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub refresh_token_cache: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentChangeEvent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<TaskAgent>,
    #[serde(rename = "eventType", default, skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<TaskAgentPoolReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentJobRequestMessage {
    #[serde(flatten)]
    pub job_request_message: JobRequestMessage,
    #[serde(
        rename = "lockedUntil",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub locked_until: Option<String>,
    #[serde(rename = "lockToken", default, skip_serializing_if = "Option::is_none")]
    pub lock_token: Option<String>,
    #[serde(rename = "requestId", default, skip_serializing_if = "Option::is_none")]
    pub request_id: Option<i64>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tasks: Vec<TaskInstance>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentPoolEvent {
    #[serde(rename = "eventType", default, skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<TaskAgentPool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentQueueEvent {
    #[serde(rename = "eventType", default, skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue: Option<TaskAgentQueue>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentQueuesEvent {
    #[serde(rename = "eventType", default, skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub queues: Vec<TaskAgentQueue>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentRefreshMessage {
    #[serde(rename = "agentId", default, skip_serializing_if = "Option::is_none")]
    pub agent_id: Option<i32>,
    #[serde(
        rename = "targetVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AuthenticationSchemeReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inputs: Option<serde_json::Value>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AuthorizationHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureKeyVaultPermission {
    #[serde(flatten)]
    pub azure_resource_permission: AzureResourcePermission,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureKeyVaultVariableGroupProviderData {
    #[serde(flatten)]
    pub variable_group_provider_data: VariableGroupProviderData,
    #[serde(
        rename = "lastRefreshedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_refreshed_on: Option<String>,
    #[serde(
        rename = "serviceEndpointId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub service_endpoint_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureKeyVaultVariableValue {
    #[serde(flatten)]
    pub variable_value: VariableValue,
    #[serde(
        rename = "contentType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expires: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureManagementGroup {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureManagementGroupQueryResult {
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<AzureManagementGroup>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzurePermission {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provisioned: Option<bool>,
    #[serde(
        rename = "resourceProvider",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_provider: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureResourcePermission {
    #[serde(flatten)]
    pub azure_permission: AzurePermission,
    #[serde(
        rename = "resourceGroup",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_group: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureRoleAssignmentPermission {
    #[serde(flatten)]
    pub azure_permission: AzurePermission,
    #[serde(
        rename = "roleAssignmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub role_assignment_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureSpnOperationStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(
        rename = "statusMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub status_message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureSubscription {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(
        rename = "subscriptionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub subscription_id: Option<String>,
    #[serde(
        rename = "subscriptionTenantId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub subscription_tenant_id: Option<String>,
    #[serde(
        rename = "subscriptionTenantName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub subscription_tenant_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureSubscriptionQueryResult {
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<AzureSubscription>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientCertificate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CounterVariable {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seed: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataSource {
    #[serde(
        rename = "authenticationScheme",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub authentication_scheme: Option<AuthenticationSchemeReference>,
    #[serde(
        rename = "endpointUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub endpoint_url: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub headers: Vec<AuthorizationHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "resourceUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_url: Option<String>,
    #[serde(
        rename = "resultSelector",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_selector: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataSourceBinding {
    #[serde(flatten)]
    pub data_source_binding_base: DataSourceBindingBase,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataSourceBindingBase {
    #[serde(
        rename = "callbackContextTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub callback_context_template: Option<String>,
    #[serde(
        rename = "callbackRequiredTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub callback_required_template: Option<String>,
    #[serde(
        rename = "dataSourceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub data_source_name: Option<String>,
    #[serde(
        rename = "endpointId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub endpoint_id: Option<String>,
    #[serde(
        rename = "endpointUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub endpoint_url: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub headers: Vec<AuthorizationHeader>,
    #[serde(
        rename = "initialContextTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub initial_context_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<serde_json::Value>,
    #[serde(
        rename = "requestContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_content: Option<String>,
    #[serde(
        rename = "requestVerb",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_verb: Option<String>,
    #[serde(
        rename = "resultSelector",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_selector: Option<String>,
    #[serde(
        rename = "resultTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataSourceDetails {
    #[serde(
        rename = "dataSourceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub data_source_name: Option<String>,
    #[serde(
        rename = "dataSourceUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub data_source_url: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub headers: Vec<AuthorizationHeader>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<serde_json::Value>,
    #[serde(
        rename = "resourceUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_url: Option<String>,
    #[serde(
        rename = "resultSelector",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_selector: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Demand {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DemandEquals {
    #[serde(flatten)]
    pub demand: Demand,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DemandExists {
    #[serde(flatten)]
    pub demand: Demand,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DemandMinimumVersion {
    #[serde(flatten)]
    pub demand: Demand,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<DemandSource>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DemandSource {
    #[serde(
        rename = "sourceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_name: Option<String>,
    #[serde(
        rename = "sourceType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_type: Option<demand_source::SourceType>,
    #[serde(
        rename = "sourceVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_version: Option<String>,
}
pub mod demand_source {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SourceType {
        #[serde(rename = "task")]
        Task,
        #[serde(rename = "feature")]
        Feature,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DependencyBinding {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DependencyData {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub input: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub map: Vec<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DependsOn {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub input: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub map: Vec<DependencyBinding>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentGatesChangeEvent {
    #[serde(rename = "gateNames", default, skip_serializing_if = "Vec::is_empty")]
    pub gate_names: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentGroup {
    #[serde(flatten)]
    pub deployment_group_reference: DeploymentGroupReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "machineCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub machine_count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub machines: Vec<DeploymentMachine>,
    #[serde(rename = "machineTags", default, skip_serializing_if = "Vec::is_empty")]
    pub machine_tags: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentGroupCreateParameter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "poolId", default, skip_serializing_if = "Option::is_none")]
    pub pool_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentGroupCreateParameterPoolProperty {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentGroupMetrics {
    #[serde(
        rename = "columnsHeader",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub columns_header: Option<MetricsColumnsHeader>,
    #[serde(
        rename = "deploymentGroup",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deployment_group: Option<DeploymentGroupReference>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub rows: Vec<MetricsRow>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentGroupReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<TaskAgentPoolReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ProjectReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentGroupUpdateParameter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentMachine {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<TaskAgent>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<PropertiesCollection>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentMachineChangedData {
    #[serde(flatten)]
    pub deployment_machine: DeploymentMachine,
    #[serde(rename = "addedTags", default, skip_serializing_if = "Vec::is_empty")]
    pub added_tags: Vec<String>,
    #[serde(rename = "deletedTags", default, skip_serializing_if = "Vec::is_empty")]
    pub deleted_tags: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentMachineGroup {
    #[serde(flatten)]
    pub deployment_machine_group_reference: DeploymentMachineGroupReference,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub machines: Vec<DeploymentMachine>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentMachineGroupReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<TaskAgentPoolReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ProjectReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentMachinesChangeEvent {
    #[serde(
        rename = "machineGroupReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub machine_group_reference: Option<DeploymentGroupReference>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub machines: Vec<DeploymentMachineChangedData>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentPoolSummary {
    #[serde(
        rename = "deploymentGroups",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub deployment_groups: Vec<DeploymentGroupReference>,
    #[serde(
        rename = "offlineAgentsCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub offline_agents_count: Option<i32>,
    #[serde(
        rename = "onlineAgentsCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub online_agents_count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<TaskAgentPoolReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<EnvironmentResourceReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentTargetUpdateParameter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiagnosticLogMetadata {
    #[serde(rename = "agentId", default, skip_serializing_if = "Option::is_none")]
    pub agent_id: Option<i32>,
    #[serde(rename = "agentName", default, skip_serializing_if = "Option::is_none")]
    pub agent_name: Option<String>,
    #[serde(rename = "fileName", default, skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    #[serde(rename = "phaseName", default, skip_serializing_if = "Option::is_none")]
    pub phase_name: Option<String>,
    #[serde(
        rename = "phaseResult",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub phase_result: Option<String>,
    #[serde(rename = "poolId", default, skip_serializing_if = "Option::is_none")]
    pub pool_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ElasticAgentPoolResizedEvent {
    #[serde(rename = "newSize", default, skip_serializing_if = "Option::is_none")]
    pub new_size: Option<i32>,
    #[serde(rename = "poolId", default, skip_serializing_if = "Option::is_none")]
    pub pool_id: Option<i32>,
    #[serde(rename = "poolName", default, skip_serializing_if = "Option::is_none")]
    pub pool_name: Option<String>,
    #[serde(
        rename = "previousSize",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub previous_size: Option<i32>,
    #[serde(
        rename = "resourceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ElasticNode {
    #[serde(rename = "agentId", default, skip_serializing_if = "Option::is_none")]
    pub agent_id: Option<i32>,
    #[serde(
        rename = "agentState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_state: Option<elastic_node::AgentState>,
    #[serde(rename = "computeId", default, skip_serializing_if = "Option::is_none")]
    pub compute_id: Option<String>,
    #[serde(
        rename = "computeState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub compute_state: Option<elastic_node::ComputeState>,
    #[serde(
        rename = "desiredState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub desired_state: Option<elastic_node::DesiredState>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "poolId", default, skip_serializing_if = "Option::is_none")]
    pub pool_id: Option<i32>,
    #[serde(rename = "requestId", default, skip_serializing_if = "Option::is_none")]
    pub request_id: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<elastic_node::State>,
    #[serde(
        rename = "stateChangedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub state_changed_on: Option<String>,
}
pub mod elastic_node {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AgentState {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "enabled")]
        Enabled,
        #[serde(rename = "online")]
        Online,
        #[serde(rename = "assigned")]
        Assigned,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ComputeState {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "healthy")]
        Healthy,
        #[serde(rename = "creating")]
        Creating,
        #[serde(rename = "deleting")]
        Deleting,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "stopped")]
        Stopped,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DesiredState {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "new")]
        New,
        #[serde(rename = "creatingCompute")]
        CreatingCompute,
        #[serde(rename = "startingAgent")]
        StartingAgent,
        #[serde(rename = "idle")]
        Idle,
        #[serde(rename = "assigned")]
        Assigned,
        #[serde(rename = "offline")]
        Offline,
        #[serde(rename = "pendingReimage")]
        PendingReimage,
        #[serde(rename = "pendingDelete")]
        PendingDelete,
        #[serde(rename = "saved")]
        Saved,
        #[serde(rename = "deletingCompute")]
        DeletingCompute,
        #[serde(rename = "deleted")]
        Deleted,
        #[serde(rename = "lost")]
        Lost,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "new")]
        New,
        #[serde(rename = "creatingCompute")]
        CreatingCompute,
        #[serde(rename = "startingAgent")]
        StartingAgent,
        #[serde(rename = "idle")]
        Idle,
        #[serde(rename = "assigned")]
        Assigned,
        #[serde(rename = "offline")]
        Offline,
        #[serde(rename = "pendingReimage")]
        PendingReimage,
        #[serde(rename = "pendingDelete")]
        PendingDelete,
        #[serde(rename = "saved")]
        Saved,
        #[serde(rename = "deletingCompute")]
        DeletingCompute,
        #[serde(rename = "deleted")]
        Deleted,
        #[serde(rename = "lost")]
        Lost,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ElasticNodeSettings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<elastic_node_settings::State>,
}
pub mod elastic_node_settings {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "new")]
        New,
        #[serde(rename = "creatingCompute")]
        CreatingCompute,
        #[serde(rename = "startingAgent")]
        StartingAgent,
        #[serde(rename = "idle")]
        Idle,
        #[serde(rename = "assigned")]
        Assigned,
        #[serde(rename = "offline")]
        Offline,
        #[serde(rename = "pendingReimage")]
        PendingReimage,
        #[serde(rename = "pendingDelete")]
        PendingDelete,
        #[serde(rename = "saved")]
        Saved,
        #[serde(rename = "deletingCompute")]
        DeletingCompute,
        #[serde(rename = "deleted")]
        Deleted,
        #[serde(rename = "lost")]
        Lost,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ElasticPool {
    #[serde(
        rename = "agentInteractiveUI",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_interactive_ui: Option<bool>,
    #[serde(rename = "azureId", default, skip_serializing_if = "Option::is_none")]
    pub azure_id: Option<String>,
    #[serde(
        rename = "desiredIdle",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub desired_idle: Option<i32>,
    #[serde(
        rename = "desiredSize",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub desired_size: Option<i32>,
    #[serde(
        rename = "maxCapacity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_capacity: Option<i32>,
    #[serde(
        rename = "maxSavedNodeCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_saved_node_count: Option<i32>,
    #[serde(
        rename = "offlineSince",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub offline_since: Option<String>,
    #[serde(rename = "osType", default, skip_serializing_if = "Option::is_none")]
    pub os_type: Option<elastic_pool::OsType>,
    #[serde(rename = "poolId", default, skip_serializing_if = "Option::is_none")]
    pub pool_id: Option<i32>,
    #[serde(
        rename = "recycleAfterEachUse",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub recycle_after_each_use: Option<bool>,
    #[serde(
        rename = "serviceEndpointId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub service_endpoint_id: Option<String>,
    #[serde(
        rename = "serviceEndpointScope",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub service_endpoint_scope: Option<String>,
    #[serde(
        rename = "sizingAttempts",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sizing_attempts: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<elastic_pool::State>,
    #[serde(
        rename = "timeToLiveMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub time_to_live_minutes: Option<i32>,
}
pub mod elastic_pool {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OsType {
        #[serde(rename = "windows")]
        Windows,
        #[serde(rename = "linux")]
        Linux,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "online")]
        Online,
        #[serde(rename = "offline")]
        Offline,
        #[serde(rename = "unhealthy")]
        Unhealthy,
        #[serde(rename = "new")]
        New,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ElasticPoolCreationResult {
    #[serde(rename = "agentPool", default, skip_serializing_if = "Option::is_none")]
    pub agent_pool: Option<TaskAgentPool>,
    #[serde(
        rename = "agentQueue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_queue: Option<TaskAgentQueue>,
    #[serde(
        rename = "elasticPool",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub elastic_pool: Option<ElasticPool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ElasticPoolLog {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<elastic_pool_log::Level>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operation: Option<elastic_pool_log::Operation>,
    #[serde(rename = "poolId", default, skip_serializing_if = "Option::is_none")]
    pub pool_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
}
pub mod elastic_pool_log {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Level {
        #[serde(rename = "error")]
        Error,
        #[serde(rename = "warning")]
        Warning,
        #[serde(rename = "info")]
        Info,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Operation {
        #[serde(rename = "configurationJob")]
        ConfigurationJob,
        #[serde(rename = "sizingJob")]
        SizingJob,
        #[serde(rename = "increaseCapacity")]
        IncreaseCapacity,
        #[serde(rename = "reimage")]
        Reimage,
        #[serde(rename = "deleteVMs")]
        DeleteVMs,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ElasticPoolSettings {
    #[serde(
        rename = "agentInteractiveUI",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_interactive_ui: Option<bool>,
    #[serde(rename = "azureId", default, skip_serializing_if = "Option::is_none")]
    pub azure_id: Option<String>,
    #[serde(
        rename = "desiredIdle",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub desired_idle: Option<i32>,
    #[serde(
        rename = "maxCapacity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_capacity: Option<i32>,
    #[serde(
        rename = "maxSavedNodeCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_saved_node_count: Option<i32>,
    #[serde(rename = "osType", default, skip_serializing_if = "Option::is_none")]
    pub os_type: Option<elastic_pool_settings::OsType>,
    #[serde(
        rename = "recycleAfterEachUse",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub recycle_after_each_use: Option<bool>,
    #[serde(
        rename = "serviceEndpointId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub service_endpoint_id: Option<String>,
    #[serde(
        rename = "serviceEndpointScope",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub service_endpoint_scope: Option<String>,
    #[serde(
        rename = "timeToLiveMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub time_to_live_minutes: Option<i32>,
}
pub mod elastic_pool_settings {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OsType {
        #[serde(rename = "windows")]
        Windows,
        #[serde(rename = "linux")]
        Linux,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EndpointAuthorization {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EndpointUrl {
    #[serde(rename = "dependsOn", default, skip_serializing_if = "Option::is_none")]
    pub depends_on: Option<DependsOn>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(rename = "helpText", default, skip_serializing_if = "Option::is_none")]
    pub help_text: Option<String>,
    #[serde(rename = "isVisible", default, skip_serializing_if = "Option::is_none")]
    pub is_visible: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentCreateParameter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentDeploymentExecutionRecord {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<TaskOrchestrationOwner>,
    #[serde(
        rename = "environmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_id: Option<i32>,
    #[serde(
        rename = "finishTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub finish_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(
        rename = "jobAttempt",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_attempt: Option<i32>,
    #[serde(rename = "jobName", default, skip_serializing_if = "Option::is_none")]
    pub job_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<TaskOrchestrationOwner>,
    #[serde(rename = "planId", default, skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<String>,
    #[serde(rename = "planType", default, skip_serializing_if = "Option::is_none")]
    pub plan_type: Option<String>,
    #[serde(rename = "queueTime", default, skip_serializing_if = "Option::is_none")]
    pub queue_time: Option<String>,
    #[serde(
        rename = "requestIdentifier",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_identifier: Option<String>,
    #[serde(
        rename = "resourceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<environment_deployment_execution_record::Result>,
    #[serde(rename = "scopeId", default, skip_serializing_if = "Option::is_none")]
    pub scope_id: Option<String>,
    #[serde(
        rename = "serviceOwner",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub service_owner: Option<String>,
    #[serde(
        rename = "stageAttempt",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub stage_attempt: Option<i32>,
    #[serde(rename = "stageName", default, skip_serializing_if = "Option::is_none")]
    pub stage_name: Option<String>,
    #[serde(rename = "startTime", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
}
pub mod environment_deployment_execution_record {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "succeededWithIssues")]
        SucceededWithIssues,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "skipped")]
        Skipped,
        #[serde(rename = "abandoned")]
        Abandoned,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentInstance {
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "lastModifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_by: Option<IdentityRef>,
    #[serde(
        rename = "lastModifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ProjectReference>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub resources: Vec<EnvironmentResourceReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentLinkedResourceReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "typeName", default, skip_serializing_if = "Option::is_none")]
    pub type_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentResource {
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(
        rename = "environmentReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_reference: Option<EnvironmentReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "lastModifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_by: Option<IdentityRef>,
    #[serde(
        rename = "lastModifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<environment_resource::Type>,
}
pub mod environment_resource {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "generic")]
        Generic,
        #[serde(rename = "virtualMachine")]
        VirtualMachine,
        #[serde(rename = "kubernetes")]
        Kubernetes,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentResourceDeploymentExecutionRecord {
    #[serde(
        rename = "environmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_id: Option<i32>,
    #[serde(
        rename = "finishTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub finish_time: Option<String>,
    #[serde(rename = "requestId", default, skip_serializing_if = "Option::is_none")]
    pub request_id: Option<i64>,
    #[serde(
        rename = "resourceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<environment_resource_deployment_execution_record::Result>,
    #[serde(rename = "startTime", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
}
pub mod environment_resource_deployment_execution_record {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "succeededWithIssues")]
        SucceededWithIssues,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "skipped")]
        Skipped,
        #[serde(rename = "abandoned")]
        Abandoned,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentResourceReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<environment_resource_reference::Type>,
}
pub mod environment_resource_reference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "generic")]
        Generic,
        #[serde(rename = "virtualMachine")]
        VirtualMachine,
        #[serde(rename = "kubernetes")]
        Kubernetes,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentUpdateParameter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventsConfig {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExpressionValidationItem {
    #[serde(flatten)]
    pub validation_item: ValidationItem,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectBase {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HelpLink {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityRef {
    #[serde(flatten)]
    pub graph_subject_base: GraphSubjectBase,
    #[serde(
        rename = "directoryAlias",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub directory_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inactive: Option<bool>,
    #[serde(
        rename = "isAadIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_aad_identity: Option<bool>,
    #[serde(
        rename = "isContainer",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_container: Option<bool>,
    #[serde(
        rename = "isDeletedInOrigin",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_deleted_in_origin: Option<bool>,
    #[serde(
        rename = "profileUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub profile_url: Option<String>,
    #[serde(
        rename = "uniqueName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputBindingContext {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputDescriptor {
    #[serde(
        rename = "dependencyInputIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub dependency_input_ids: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "groupName", default, skip_serializing_if = "Option::is_none")]
    pub group_name: Option<String>,
    #[serde(
        rename = "hasDynamicValueInformation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub has_dynamic_value_information: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "inputMode", default, skip_serializing_if = "Option::is_none")]
    pub input_mode: Option<input_descriptor::InputMode>,
    #[serde(
        rename = "isConfidential",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_confidential: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(
        rename = "useInDefaultDescription",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub use_in_default_description: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation: Option<InputValidation>,
    #[serde(rename = "valueHint", default, skip_serializing_if = "Option::is_none")]
    pub value_hint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<InputValues>,
}
pub mod input_descriptor {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum InputMode {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "textBox")]
        TextBox,
        #[serde(rename = "passwordBox")]
        PasswordBox,
        #[serde(rename = "combo")]
        Combo,
        #[serde(rename = "radioButtons")]
        RadioButtons,
        #[serde(rename = "checkBox")]
        CheckBox,
        #[serde(rename = "textArea")]
        TextArea,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValidation {
    #[serde(rename = "dataType", default, skip_serializing_if = "Option::is_none")]
    pub data_type: Option<input_validation::DataType>,
    #[serde(
        rename = "isRequired",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_required: Option<bool>,
    #[serde(rename = "maxLength", default, skip_serializing_if = "Option::is_none")]
    pub max_length: Option<i32>,
    #[serde(rename = "maxValue", default, skip_serializing_if = "Option::is_none")]
    pub max_value: Option<String>,
    #[serde(rename = "minLength", default, skip_serializing_if = "Option::is_none")]
    pub min_length: Option<i32>,
    #[serde(rename = "minValue", default, skip_serializing_if = "Option::is_none")]
    pub min_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
    #[serde(
        rename = "patternMismatchErrorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pattern_mismatch_error_message: Option<String>,
}
pub mod input_validation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "string")]
        String,
        #[serde(rename = "number")]
        Number,
        #[serde(rename = "boolean")]
        Boolean,
        #[serde(rename = "guid")]
        Guid,
        #[serde(rename = "uri")]
        Uri,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValidationItem {
    #[serde(flatten)]
    pub validation_item: ValidationItem,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<InputBindingContext>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValidationRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inputs: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(
        rename = "displayValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValues {
    #[serde(
        rename = "defaultValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<InputValuesError>,
    #[serde(rename = "inputId", default, skip_serializing_if = "Option::is_none")]
    pub input_id: Option<String>,
    #[serde(
        rename = "isDisabled",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_disabled: Option<bool>,
    #[serde(
        rename = "isLimitedToPossibleValues",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_limited_to_possible_values: Option<bool>,
    #[serde(
        rename = "isReadOnly",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_read_only: Option<bool>,
    #[serde(
        rename = "possibleValues",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub possible_values: Vec<InputValue>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValuesError {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Issue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<issue::Type>,
}
pub mod issue {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "error")]
        Error,
        #[serde(rename = "warning")]
        Warning,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobAssignedEvent {
    #[serde(flatten)]
    pub job_event: JobEvent,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<TaskAgentJobRequest>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobCanceledEvent {
    #[serde(flatten)]
    pub job_event: JobEvent,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobCancelMessage {
    #[serde(rename = "jobId", default, skip_serializing_if = "Option::is_none")]
    pub job_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobCompletedEvent {
    #[serde(flatten)]
    pub job_event: JobEvent,
    #[serde(
        rename = "agentShuttingDown",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_shutting_down: Option<bool>,
    #[serde(rename = "requestId", default, skip_serializing_if = "Option::is_none")]
    pub request_id: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<job_completed_event::Result>,
}
pub mod job_completed_event {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "succeededWithIssues")]
        SucceededWithIssues,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "skipped")]
        Skipped,
        #[serde(rename = "abandoned")]
        Abandoned,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobEnvironment {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub endpoints: Vec<ServiceEndpoint>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub mask: Vec<MaskHint>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<serde_json::Value>,
    #[serde(rename = "secureFiles", default, skip_serializing_if = "Vec::is_empty")]
    pub secure_files: Vec<SecureFile>,
    #[serde(
        rename = "systemConnection",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub system_connection: Option<ServiceEndpoint>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobEvent {
    #[serde(rename = "jobId", default, skip_serializing_if = "Option::is_none")]
    pub job_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobEventConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobEventsConfig {
    #[serde(flatten)]
    pub events_config: EventsConfig,
    #[serde(
        rename = "jobAssigned",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_assigned: Option<JobEventConfig>,
    #[serde(
        rename = "jobCompleted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_completed: Option<JobEventConfig>,
    #[serde(
        rename = "jobStarted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_started: Option<JobEventConfig>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JObject {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub item: Option<JToken>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobMetadataEvent {
    #[serde(flatten)]
    pub job_event: JobEvent,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<JobMetadataMessage>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobMetadataMessage {
    #[serde(rename = "jobId", default, skip_serializing_if = "Option::is_none")]
    pub job_id: Option<String>,
    #[serde(
        rename = "postLinesFrequencyMillis",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub post_lines_frequency_millis: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobOption {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobRequestMessage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<JobEnvironment>,
    #[serde(rename = "jobId", default, skip_serializing_if = "Option::is_none")]
    pub job_id: Option<String>,
    #[serde(rename = "jobName", default, skip_serializing_if = "Option::is_none")]
    pub job_name: Option<String>,
    #[serde(
        rename = "jobRefName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_ref_name: Option<String>,
    #[serde(
        rename = "messageType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub message_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan: Option<TaskOrchestrationPlanReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeline: Option<TimelineReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobStartedEvent {
    #[serde(flatten)]
    pub job_event: JobEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub first: Box<Option<JToken>>,
    #[serde(rename = "hasValues", default, skip_serializing_if = "Option::is_none")]
    pub has_values: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub item: Box<Option<JToken>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub last: Box<Option<JToken>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub next: Box<Option<JToken>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub previous: Box<Option<JToken>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub root: Box<Option<JToken>>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KubernetesResource {
    #[serde(flatten)]
    pub environment_resource: EnvironmentResource,
    #[serde(
        rename = "clusterName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(
        rename = "serviceEndpointId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub service_endpoint_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KubernetesResourceCreateParameters {
    #[serde(
        rename = "clusterName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub cluster_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KubernetesResourceCreateParametersExistingEndpoint {
    #[serde(flatten)]
    pub kubernetes_resource_create_parameters: KubernetesResourceCreateParameters,
    #[serde(
        rename = "serviceEndpointId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub service_endpoint_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KubernetesResourceCreateParametersNewEndpoint {
    #[serde(flatten)]
    pub kubernetes_resource_create_parameters: KubernetesResourceCreateParameters,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<ServiceEndpoint>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KubernetesResourcePatchParameters {
    #[serde(
        rename = "authorizationParameters",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub authorization_parameters: Option<serde_json::Value>,
    #[serde(
        rename = "providerType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub provider_type: Option<String>,
    #[serde(
        rename = "resourceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MarketplacePurchasedLicense {
    #[serde(
        rename = "marketplaceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub marketplace_name: Option<String>,
    #[serde(
        rename = "purchaserName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub purchaser_name: Option<String>,
    #[serde(
        rename = "purchaseUnitCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub purchase_unit_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MaskHint {
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<mask_hint::Type>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
pub mod mask_hint {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "variable")]
        Variable,
        #[serde(rename = "regex")]
        Regex,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetricsColumnMetaData {
    #[serde(
        rename = "columnName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub column_name: Option<String>,
    #[serde(
        rename = "columnValueType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub column_value_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetricsColumnsHeader {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub dimensions: Vec<MetricsColumnMetaData>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub metrics: Vec<MetricsColumnMetaData>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetricsRow {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub dimensions: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub metrics: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageMetadata {
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(
        rename = "downloadUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub download_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filename: Option<String>,
    #[serde(rename = "hashValue", default, skip_serializing_if = "Option::is_none")]
    pub hash_value: Option<String>,
    #[serde(rename = "infoUrl", default, skip_serializing_if = "Option::is_none")]
    pub info_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<PackageVersion>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageVersion {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub major: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minor: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlanEnvironment {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub mask: Vec<MaskHint>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PropertiesCollection {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub item: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub keys: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub values: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PublishTaskGroupMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "parentDefinitionRevision",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub parent_definition_revision: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preview: Option<bool>,
    #[serde(
        rename = "taskGroupId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub task_group_id: Option<String>,
    #[serde(
        rename = "taskGroupRevision",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub task_group_revision: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceFilterOptions {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub identities: Vec<IdentityRef>,
    #[serde(
        rename = "resourceTypes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub resource_types: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceFilters {
    #[serde(rename = "createdBy", default, skip_serializing_if = "Vec::is_empty")]
    pub created_by: Vec<String>,
    #[serde(
        rename = "resourceType",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub resource_type: Vec<String>,
    #[serde(
        rename = "searchText",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub search_text: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceItem {
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "iconUrl", default, skip_serializing_if = "Option::is_none")]
    pub icon_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "isShared", default, skip_serializing_if = "Option::is_none")]
    pub is_shared: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(
        rename = "resourceType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceLimit {
    #[serde(
        rename = "failedToReachAllProviders",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub failed_to_reach_all_providers: Option<bool>,
    #[serde(rename = "hostId", default, skip_serializing_if = "Option::is_none")]
    pub host_id: Option<String>,
    #[serde(rename = "isHosted", default, skip_serializing_if = "Option::is_none")]
    pub is_hosted: Option<bool>,
    #[serde(rename = "isPremium", default, skip_serializing_if = "Option::is_none")]
    pub is_premium: Option<bool>,
    #[serde(
        rename = "parallelismTag",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub parallelism_tag: Option<String>,
    #[serde(
        rename = "resourceLimitsData",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_limits_data: Option<serde_json::Value>,
    #[serde(
        rename = "totalCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_count: Option<i32>,
    #[serde(
        rename = "totalMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_minutes: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceLockRequest {
    #[serde(
        rename = "assignTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assign_time: Option<String>,
    #[serde(
        rename = "checkRunId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub check_run_id: Option<String>,
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<i32>,
    #[serde(
        rename = "finishTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub finish_time: Option<String>,
    #[serde(rename = "lockType", default, skip_serializing_if = "Option::is_none")]
    pub lock_type: Option<resource_lock_request::LockType>,
    #[serde(
        rename = "nodeAttempt",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub node_attempt: Option<i32>,
    #[serde(rename = "nodeName", default, skip_serializing_if = "Option::is_none")]
    pub node_name: Option<String>,
    #[serde(rename = "planId", default, skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(rename = "queueTime", default, skip_serializing_if = "Option::is_none")]
    pub queue_time: Option<String>,
    #[serde(rename = "requestId", default, skip_serializing_if = "Option::is_none")]
    pub request_id: Option<i64>,
    #[serde(
        rename = "resourceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_id: Option<String>,
    #[serde(
        rename = "resourceType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<resource_lock_request::Status>,
}
pub mod resource_lock_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LockType {
        #[serde(rename = "runLatest")]
        RunLatest,
        #[serde(rename = "sequential")]
        Sequential,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "inUse")]
        InUse,
        #[serde(rename = "finished")]
        Finished,
        #[serde(rename = "timedOut")]
        TimedOut,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "abandoned")]
        Abandoned,
        #[serde(rename = "waitingOnChecks")]
        WaitingOnChecks,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourcesHubData {
    #[serde(
        rename = "continuationToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continuation_token: Option<String>,
    #[serde(
        rename = "hasProjectLevelManagePermission",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub has_project_level_manage_permission: Option<bool>,
    #[serde(
        rename = "resourceFilterOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_filter_options: Option<ResourceFilterOptions>,
    #[serde(
        rename = "resourceFilters",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_filters: Option<ResourceFilters>,
    #[serde(
        rename = "resourceItems",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub resource_items: Vec<ResourceItem>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceUsage {
    #[serde(
        rename = "resourceLimit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resource_limit: Option<ResourceLimit>,
    #[serde(
        rename = "runningRequests",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub running_requests: Vec<TaskAgentJobRequest>,
    #[serde(rename = "usedCount", default, skip_serializing_if = "Option::is_none")]
    pub used_count: Option<i32>,
    #[serde(
        rename = "usedMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub used_minutes: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResultTransformationDetails {
    #[serde(
        rename = "resultTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_template: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecureFile {
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "modifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_by: Option<IdentityRef>,
    #[serde(
        rename = "modifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ticket: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecureFileEvent {
    #[serde(rename = "eventType", default, skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(rename = "secureFiles", default, skip_serializing_if = "Vec::is_empty")]
    pub secure_files: Vec<SecureFile>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SendJobResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events: Option<JobEventsConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServerExecutionDefinition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events: Option<EventsConfig>,
    #[serde(
        rename = "handlerName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub handler_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServerTaskRequestMessage {
    #[serde(flatten)]
    pub job_request_message: JobRequestMessage,
    #[serde(
        rename = "taskDefinition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub task_definition: Option<TaskDefinition>,
    #[serde(
        rename = "taskInstance",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub task_instance: Option<TaskInstance>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceEndpoint {
    #[serde(
        rename = "administratorsGroup",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub administrators_group: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<EndpointAuthorization>,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "groupScopeId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub group_scope_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "isReady", default, skip_serializing_if = "Option::is_none")]
    pub is_ready: Option<bool>,
    #[serde(rename = "isShared", default, skip_serializing_if = "Option::is_none")]
    pub is_shared: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "operationStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub operation_status: Option<JObject>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(
        rename = "readersGroup",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub readers_group: Option<IdentityRef>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceEndpointAuthenticationScheme {
    #[serde(
        rename = "authorizationHeaders",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub authorization_headers: Vec<AuthorizationHeader>,
    #[serde(
        rename = "clientCertificates",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub client_certificates: Vec<ClientCertificate>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(
        rename = "inputDescriptors",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub input_descriptors: Vec<InputDescriptor>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceEndpointDetails {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<EndpointAuthorization>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceEndpointExecutionData {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<TaskOrchestrationOwner>,
    #[serde(
        rename = "finishTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub finish_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<TaskOrchestrationOwner>,
    #[serde(rename = "planType", default, skip_serializing_if = "Option::is_none")]
    pub plan_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<service_endpoint_execution_data::Result>,
    #[serde(rename = "startTime", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
}
pub mod service_endpoint_execution_data {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "succeededWithIssues")]
        SucceededWithIssues,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "skipped")]
        Skipped,
        #[serde(rename = "abandoned")]
        Abandoned,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceEndpointExecutionRecord {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<ServiceEndpointExecutionData>,
    #[serde(
        rename = "endpointId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub endpoint_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceEndpointExecutionRecordsInput {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<ServiceEndpointExecutionData>,
    #[serde(rename = "endpointIds", default, skip_serializing_if = "Vec::is_empty")]
    pub endpoint_ids: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceEndpointRequest {
    #[serde(
        rename = "dataSourceDetails",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub data_source_details: Option<DataSourceDetails>,
    #[serde(
        rename = "resultTransformationDetails",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_transformation_details: Option<ResultTransformationDetails>,
    #[serde(
        rename = "serviceEndpointDetails",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub service_endpoint_details: Option<ServiceEndpointDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceEndpointRequestResult {
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<JToken>,
    #[serde(
        rename = "statusCode",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub status_code: Option<service_endpoint_request_result::StatusCode>,
}
pub mod service_endpoint_request_result {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StatusCode {
        #[serde(rename = "continue")]
        Continue,
        #[serde(rename = "switchingProtocols")]
        SwitchingProtocols,
        #[serde(rename = "ok")]
        Ok,
        #[serde(rename = "created")]
        Created,
        #[serde(rename = "accepted")]
        Accepted,
        #[serde(rename = "nonAuthoritativeInformation")]
        NonAuthoritativeInformation,
        #[serde(rename = "noContent")]
        NoContent,
        #[serde(rename = "resetContent")]
        ResetContent,
        #[serde(rename = "partialContent")]
        PartialContent,
        #[serde(rename = "multipleChoices")]
        MultipleChoices,
        #[serde(rename = "ambiguous")]
        Ambiguous,
        #[serde(rename = "movedPermanently")]
        MovedPermanently,
        #[serde(rename = "moved")]
        Moved,
        #[serde(rename = "found")]
        Found,
        #[serde(rename = "redirect")]
        Redirect,
        #[serde(rename = "seeOther")]
        SeeOther,
        #[serde(rename = "redirectMethod")]
        RedirectMethod,
        #[serde(rename = "notModified")]
        NotModified,
        #[serde(rename = "useProxy")]
        UseProxy,
        #[serde(rename = "unused")]
        Unused,
        #[serde(rename = "temporaryRedirect")]
        TemporaryRedirect,
        #[serde(rename = "redirectKeepVerb")]
        RedirectKeepVerb,
        #[serde(rename = "badRequest")]
        BadRequest,
        #[serde(rename = "unauthorized")]
        Unauthorized,
        #[serde(rename = "paymentRequired")]
        PaymentRequired,
        #[serde(rename = "forbidden")]
        Forbidden,
        #[serde(rename = "notFound")]
        NotFound,
        #[serde(rename = "methodNotAllowed")]
        MethodNotAllowed,
        #[serde(rename = "notAcceptable")]
        NotAcceptable,
        #[serde(rename = "proxyAuthenticationRequired")]
        ProxyAuthenticationRequired,
        #[serde(rename = "requestTimeout")]
        RequestTimeout,
        #[serde(rename = "conflict")]
        Conflict,
        #[serde(rename = "gone")]
        Gone,
        #[serde(rename = "lengthRequired")]
        LengthRequired,
        #[serde(rename = "preconditionFailed")]
        PreconditionFailed,
        #[serde(rename = "requestEntityTooLarge")]
        RequestEntityTooLarge,
        #[serde(rename = "requestUriTooLong")]
        RequestUriTooLong,
        #[serde(rename = "unsupportedMediaType")]
        UnsupportedMediaType,
        #[serde(rename = "requestedRangeNotSatisfiable")]
        RequestedRangeNotSatisfiable,
        #[serde(rename = "expectationFailed")]
        ExpectationFailed,
        #[serde(rename = "upgradeRequired")]
        UpgradeRequired,
        #[serde(rename = "internalServerError")]
        InternalServerError,
        #[serde(rename = "notImplemented")]
        NotImplemented,
        #[serde(rename = "badGateway")]
        BadGateway,
        #[serde(rename = "serviceUnavailable")]
        ServiceUnavailable,
        #[serde(rename = "gatewayTimeout")]
        GatewayTimeout,
        #[serde(rename = "httpVersionNotSupported")]
        HttpVersionNotSupported,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceEndpointType {
    #[serde(
        rename = "authenticationSchemes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub authentication_schemes: Vec<ServiceEndpointAuthenticationScheme>,
    #[serde(rename = "dataSources", default, skip_serializing_if = "Vec::is_empty")]
    pub data_sources: Vec<DataSource>,
    #[serde(
        rename = "dependencyData",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub dependency_data: Vec<DependencyData>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(
        rename = "endpointUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub endpoint_url: Option<EndpointUrl>,
    #[serde(rename = "helpLink", default, skip_serializing_if = "Option::is_none")]
    pub help_link: Option<HelpLink>,
    #[serde(
        rename = "helpMarkDown",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub help_mark_down: Option<String>,
    #[serde(rename = "iconUrl", default, skip_serializing_if = "Option::is_none")]
    pub icon_url: Option<String>,
    #[serde(
        rename = "inputDescriptors",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub input_descriptors: Vec<InputDescriptor>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "trustedHosts",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub trusted_hosts: Vec<String>,
    #[serde(
        rename = "uiContributionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub ui_contribution_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgent {
    #[serde(flatten)]
    pub task_agent_reference: TaskAgentReference,
    #[serde(
        rename = "assignedAgentCloudRequest",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_agent_cloud_request: Option<TaskAgentCloudRequest>,
    #[serde(
        rename = "assignedRequest",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_request: Option<TaskAgentJobRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorization: Option<TaskAgentAuthorization>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(
        rename = "lastCompletedRequest",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_completed_request: Option<TaskAgentJobRequest>,
    #[serde(
        rename = "maxParallelism",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_parallelism: Option<i32>,
    #[serde(
        rename = "pendingUpdate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pending_update: Option<TaskAgentUpdate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<PropertiesCollection>,
    #[serde(
        rename = "statusChangedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub status_changed_on: Option<String>,
    #[serde(
        rename = "systemCapabilities",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub system_capabilities: Option<serde_json::Value>,
    #[serde(
        rename = "userCapabilities",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub user_capabilities: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentAuthorization {
    #[serde(
        rename = "authorizationUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub authorization_url: Option<String>,
    #[serde(rename = "clientId", default, skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    #[serde(rename = "publicKey", default, skip_serializing_if = "Option::is_none")]
    pub public_key: Option<TaskAgentPublicKey>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentCloud {
    #[serde(
        rename = "acquireAgentEndpoint",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub acquire_agent_endpoint: Option<String>,
    #[serde(
        rename = "acquisitionTimeout",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub acquisition_timeout: Option<i32>,
    #[serde(
        rename = "agentCloudId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_cloud_id: Option<i32>,
    #[serde(
        rename = "getAccountParallelismEndpoint",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub get_account_parallelism_endpoint: Option<String>,
    #[serde(
        rename = "getAgentDefinitionEndpoint",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub get_agent_definition_endpoint: Option<String>,
    #[serde(
        rename = "getAgentRequestStatusEndpoint",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub get_agent_request_status_endpoint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub internal: Option<bool>,
    #[serde(
        rename = "maxParallelism",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_parallelism: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "releaseAgentEndpoint",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_agent_endpoint: Option<String>,
    #[serde(
        rename = "sharedSecret",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub shared_secret: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentCloudRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<TaskAgentReference>,
    #[serde(
        rename = "agentCloudId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_cloud_id: Option<i32>,
    #[serde(
        rename = "agentConnectedTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_connected_time: Option<String>,
    #[serde(rename = "agentData", default, skip_serializing_if = "Option::is_none")]
    pub agent_data: Option<JObject>,
    #[serde(
        rename = "agentSpecification",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_specification: Option<JObject>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<TaskAgentPoolReference>,
    #[serde(
        rename = "provisionedTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub provisioned_time: Option<String>,
    #[serde(
        rename = "provisionRequestTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub provision_request_time: Option<String>,
    #[serde(
        rename = "releaseRequestTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_request_time: Option<String>,
    #[serde(rename = "requestId", default, skip_serializing_if = "Option::is_none")]
    pub request_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentCloudType {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(
        rename = "inputDescriptors",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub input_descriptors: Vec<InputDescriptor>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentDowngrade {
    #[serde(flatten)]
    pub task_agent_update_reason: TaskAgentUpdateReason,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentJob {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "sidecarContainers",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sidecar_containers: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub steps: Vec<TaskAgentJobStep>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub variables: Vec<TaskAgentJobVariable>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentJobRequest {
    #[serde(
        rename = "agentSpecification",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_specification: Option<JObject>,
    #[serde(
        rename = "assignTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assign_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<TaskOrchestrationOwner>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub demands: Vec<Demand>,
    #[serde(
        rename = "finishTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub finish_time: Option<String>,
    #[serde(rename = "hostId", default, skip_serializing_if = "Option::is_none")]
    pub host_id: Option<String>,
    #[serde(rename = "jobId", default, skip_serializing_if = "Option::is_none")]
    pub job_id: Option<String>,
    #[serde(rename = "jobName", default, skip_serializing_if = "Option::is_none")]
    pub job_name: Option<String>,
    #[serde(
        rename = "lockedUntil",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub locked_until: Option<String>,
    #[serde(
        rename = "matchedAgents",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub matched_agents: Vec<TaskAgentReference>,
    #[serde(
        rename = "matchesAllAgentsInPool",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub matches_all_agents_in_pool: Option<bool>,
    #[serde(
        rename = "orchestrationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub orchestration_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<TaskOrchestrationOwner>,
    #[serde(rename = "planGroup", default, skip_serializing_if = "Option::is_none")]
    pub plan_group: Option<String>,
    #[serde(rename = "planId", default, skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<String>,
    #[serde(rename = "planType", default, skip_serializing_if = "Option::is_none")]
    pub plan_type: Option<String>,
    #[serde(rename = "poolId", default, skip_serializing_if = "Option::is_none")]
    pub pool_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    #[serde(rename = "queueId", default, skip_serializing_if = "Option::is_none")]
    pub queue_id: Option<i32>,
    #[serde(rename = "queueTime", default, skip_serializing_if = "Option::is_none")]
    pub queue_time: Option<String>,
    #[serde(
        rename = "receiveTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub receive_time: Option<String>,
    #[serde(rename = "requestId", default, skip_serializing_if = "Option::is_none")]
    pub request_id: Option<i64>,
    #[serde(
        rename = "reservedAgent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reserved_agent: Option<TaskAgentReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<task_agent_job_request::Result>,
    #[serde(rename = "scopeId", default, skip_serializing_if = "Option::is_none")]
    pub scope_id: Option<String>,
    #[serde(
        rename = "serviceOwner",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub service_owner: Option<String>,
    #[serde(
        rename = "statusMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub status_message: Option<String>,
    #[serde(
        rename = "userDelayed",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub user_delayed: Option<bool>,
}
pub mod task_agent_job_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "succeededWithIssues")]
        SucceededWithIssues,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "skipped")]
        Skipped,
        #[serde(rename = "abandoned")]
        Abandoned,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentJobStep {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    #[serde(
        rename = "continueOnError",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continue_on_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inputs: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "retryCountOnTaskFailure",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub retry_count_on_task_failure: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub task: Option<TaskAgentJobTask>,
    #[serde(
        rename = "timeoutInMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub timeout_in_minutes: Option<i32>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<task_agent_job_step::Type>,
}
pub mod task_agent_job_step {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "task")]
        Task,
        #[serde(rename = "action")]
        Action,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentJobTask {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentJobVariable {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentManualUpdate {
    #[serde(flatten)]
    pub task_agent_update_reason: TaskAgentUpdateReason,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentMessage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub iv: Vec<String>,
    #[serde(rename = "messageId", default, skip_serializing_if = "Option::is_none")]
    pub message_id: Option<i64>,
    #[serde(
        rename = "messageType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub message_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentMinAgentVersionRequiredUpdate {
    #[serde(flatten)]
    pub task_agent_update_reason: TaskAgentUpdateReason,
    #[serde(
        rename = "jobDefinition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_definition: Option<TaskOrchestrationOwner>,
    #[serde(rename = "jobOwner", default, skip_serializing_if = "Option::is_none")]
    pub job_owner: Option<TaskOrchestrationOwner>,
    #[serde(
        rename = "minAgentVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub min_agent_version: Option<Demand>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentPool {
    #[serde(flatten)]
    pub task_agent_pool_reference: TaskAgentPoolReference,
    #[serde(
        rename = "agentCloudId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_cloud_id: Option<i32>,
    #[serde(
        rename = "autoProvision",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub auto_provision: Option<bool>,
    #[serde(rename = "autoSize", default, skip_serializing_if = "Option::is_none")]
    pub auto_size: Option<bool>,
    #[serde(
        rename = "autoUpdate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub auto_update: Option<bool>,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<PropertiesCollection>,
    #[serde(
        rename = "targetSize",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_size: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentPoolMaintenanceDefinition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "jobTimeoutInMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_timeout_in_minutes: Option<i32>,
    #[serde(
        rename = "maxConcurrentAgentsPercentage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_concurrent_agents_percentage: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<TaskAgentPoolMaintenanceOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<TaskAgentPoolReference>,
    #[serde(
        rename = "retentionPolicy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub retention_policy: Option<TaskAgentPoolMaintenanceRetentionPolicy>,
    #[serde(
        rename = "scheduleSetting",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub schedule_setting: Option<TaskAgentPoolMaintenanceSchedule>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentPoolMaintenanceJob {
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<i32>,
    #[serde(
        rename = "errorCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_count: Option<i32>,
    #[serde(
        rename = "finishTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub finish_time: Option<String>,
    #[serde(rename = "jobId", default, skip_serializing_if = "Option::is_none")]
    pub job_id: Option<i32>,
    #[serde(
        rename = "logsDownloadUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub logs_download_url: Option<String>,
    #[serde(
        rename = "orchestrationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub orchestration_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<TaskAgentPoolReference>,
    #[serde(rename = "queueTime", default, skip_serializing_if = "Option::is_none")]
    pub queue_time: Option<String>,
    #[serde(
        rename = "requestedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_by: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<task_agent_pool_maintenance_job::Result>,
    #[serde(rename = "startTime", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<task_agent_pool_maintenance_job::Status>,
    #[serde(
        rename = "targetAgents",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub target_agents: Vec<TaskAgentPoolMaintenanceJobTargetAgent>,
    #[serde(
        rename = "warningCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub warning_count: Option<i32>,
}
pub mod task_agent_pool_maintenance_job {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "canceled")]
        Canceled,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "cancelling")]
        Cancelling,
        #[serde(rename = "queued")]
        Queued,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentPoolMaintenanceJobTargetAgent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<TaskAgentReference>,
    #[serde(rename = "jobId", default, skip_serializing_if = "Option::is_none")]
    pub job_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<task_agent_pool_maintenance_job_target_agent::Result>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<task_agent_pool_maintenance_job_target_agent::Status>,
}
pub mod task_agent_pool_maintenance_job_target_agent {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "canceled")]
        Canceled,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "cancelling")]
        Cancelling,
        #[serde(rename = "queued")]
        Queued,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentPoolMaintenanceOptions {
    #[serde(
        rename = "workingDirectoryExpirationInDays",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub working_directory_expiration_in_days: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentPoolMaintenanceRetentionPolicy {
    #[serde(
        rename = "numberOfHistoryRecordsToKeep",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub number_of_history_records_to_keep: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentPoolMaintenanceSchedule {
    #[serde(
        rename = "daysToBuild",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub days_to_build: Option<task_agent_pool_maintenance_schedule::DaysToBuild>,
    #[serde(
        rename = "scheduleJobId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub schedule_job_id: Option<String>,
    #[serde(
        rename = "startHours",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub start_hours: Option<i32>,
    #[serde(
        rename = "startMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub start_minutes: Option<i32>,
    #[serde(
        rename = "timeZoneId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub time_zone_id: Option<String>,
}
pub mod task_agent_pool_maintenance_schedule {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DaysToBuild {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "monday")]
        Monday,
        #[serde(rename = "tuesday")]
        Tuesday,
        #[serde(rename = "wednesday")]
        Wednesday,
        #[serde(rename = "thursday")]
        Thursday,
        #[serde(rename = "friday")]
        Friday,
        #[serde(rename = "saturday")]
        Saturday,
        #[serde(rename = "sunday")]
        Sunday,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentPoolReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "isHosted", default, skip_serializing_if = "Option::is_none")]
    pub is_hosted: Option<bool>,
    #[serde(rename = "isLegacy", default, skip_serializing_if = "Option::is_none")]
    pub is_legacy: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<task_agent_pool_reference::Options>,
    #[serde(rename = "poolType", default, skip_serializing_if = "Option::is_none")]
    pub pool_type: Option<task_agent_pool_reference::PoolType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i32>,
}
pub mod task_agent_pool_reference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Options {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "elasticPool")]
        ElasticPool,
        #[serde(rename = "singleUseAgents")]
        SingleUseAgents,
        #[serde(rename = "preserveAgentOnJobFailure")]
        PreserveAgentOnJobFailure,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PoolType {
        #[serde(rename = "automation")]
        Automation,
        #[serde(rename = "deployment")]
        Deployment,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentPoolStatus {
    #[serde(flatten)]
    pub task_agent_pool_reference: TaskAgentPoolReference,
    #[serde(
        rename = "assignedRequestCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_request_count: Option<i32>,
    #[serde(
        rename = "queuedRequestCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub queued_request_count: Option<i32>,
    #[serde(
        rename = "runningRequestCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub running_request_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentPoolSummary {
    #[serde(
        rename = "columnsHeader",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub columns_header: Option<MetricsColumnsHeader>,
    #[serde(
        rename = "deploymentGroups",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub deployment_groups: Vec<DeploymentGroupReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<TaskAgentPoolReference>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub queues: Vec<TaskAgentQueue>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub rows: Vec<MetricsRow>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentPublicKey {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub exponent: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub modulus: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentQueue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<TaskAgentPoolReference>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentReference {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(
        rename = "accessPoint",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub access_point: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "osDescription",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub os_description: Option<String>,
    #[serde(
        rename = "provisioningState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub provisioning_state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<task_agent_reference::Status>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
pub mod task_agent_reference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "offline")]
        Offline,
        #[serde(rename = "online")]
        Online,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentSession {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<TaskAgentReference>,
    #[serde(
        rename = "encryptionKey",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub encryption_key: Option<TaskAgentSessionKey>,
    #[serde(rename = "ownerName", default, skip_serializing_if = "Option::is_none")]
    pub owner_name: Option<String>,
    #[serde(rename = "sessionId", default, skip_serializing_if = "Option::is_none")]
    pub session_id: Option<String>,
    #[serde(
        rename = "systemCapabilities",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub system_capabilities: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentSessionKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encrypted: Option<bool>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentUpdate {
    #[serde(
        rename = "currentState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub current_state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<TaskAgentUpdateReason>,
    #[serde(
        rename = "requestedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_by: Option<IdentityRef>,
    #[serde(
        rename = "requestTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_time: Option<String>,
    #[serde(
        rename = "sourceVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_version: Option<PackageVersion>,
    #[serde(
        rename = "targetVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_version: Option<PackageVersion>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentUpdateReason {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<task_agent_update_reason::Code>,
}
pub mod task_agent_update_reason {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Code {
        #[serde(rename = "manual")]
        Manual,
        #[serde(rename = "minAgentVersionRequired")]
        MinAgentVersionRequired,
        #[serde(rename = "downgrade")]
        Downgrade,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAssignedEvent {
    #[serde(flatten)]
    pub task_event: TaskEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAttachment {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(
        rename = "lastChangedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_changed_by: Option<String>,
    #[serde(
        rename = "lastChangedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_changed_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "recordId", default, skip_serializing_if = "Option::is_none")]
    pub record_id: Option<String>,
    #[serde(
        rename = "timelineId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub timeline_id: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskCommandRestrictions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<task_command_restrictions::Mode>,
}
pub mod task_command_restrictions {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Mode {
        #[serde(rename = "any")]
        Any,
        #[serde(rename = "restricted")]
        Restricted,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskCompletedEvent {
    #[serde(flatten)]
    pub task_event: TaskEvent,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<task_completed_event::Result>,
}
pub mod task_completed_event {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "succeededWithIssues")]
        SucceededWithIssues,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "skipped")]
        Skipped,
        #[serde(rename = "abandoned")]
        Abandoned,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskDefinition {
    #[serde(
        rename = "agentExecution",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_execution: Option<TaskExecution>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[serde(
        rename = "contentsUploaded",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub contents_uploaded: Option<bool>,
    #[serde(
        rename = "contributionIdentifier",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub contribution_identifier: Option<String>,
    #[serde(
        rename = "contributionVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub contribution_version: Option<String>,
    #[serde(
        rename = "dataSourceBindings",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub data_source_bindings: Vec<DataSourceBinding>,
    #[serde(
        rename = "definitionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_type: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub demands: Vec<Demand>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deprecated: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub execution: Option<serde_json::Value>,
    #[serde(
        rename = "friendlyName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub friendly_name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub groups: Vec<TaskGroupDefinition>,
    #[serde(
        rename = "helpMarkDown",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub help_mark_down: Option<String>,
    #[serde(rename = "helpUrl", default, skip_serializing_if = "Option::is_none")]
    pub help_url: Option<String>,
    #[serde(rename = "hostType", default, skip_serializing_if = "Option::is_none")]
    pub host_type: Option<String>,
    #[serde(rename = "iconUrl", default, skip_serializing_if = "Option::is_none")]
    pub icon_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub inputs: Vec<TaskInputDefinition>,
    #[serde(
        rename = "instanceNameFormat",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub instance_name_format: Option<String>,
    #[serde(
        rename = "minimumAgentVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub minimum_agent_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "outputVariables",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub output_variables: Vec<TaskOutputVariable>,
    #[serde(
        rename = "packageLocation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub package_location: Option<String>,
    #[serde(
        rename = "packageType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub package_type: Option<String>,
    #[serde(
        rename = "postJobExecution",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub post_job_execution: Option<serde_json::Value>,
    #[serde(
        rename = "preJobExecution",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pre_job_execution: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preview: Option<bool>,
    #[serde(
        rename = "releaseNotes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_notes: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub restrictions: Option<TaskRestrictions>,
    #[serde(rename = "runsOn", default, skip_serializing_if = "Vec::is_empty")]
    pub runs_on: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub satisfies: Vec<String>,
    #[serde(
        rename = "serverOwned",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub server_owned: Option<bool>,
    #[serde(
        rename = "showEnvironmentVariables",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub show_environment_variables: Option<bool>,
    #[serde(
        rename = "sourceDefinitions",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub source_definitions: Vec<TaskSourceDefinition>,
    #[serde(
        rename = "sourceLocation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_location: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<TaskVersion>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub visibility: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskDefinitionEndpoint {
    #[serde(
        rename = "connectionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub connection_id: Option<String>,
    #[serde(
        rename = "keySelector",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub key_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(rename = "taskId", default, skip_serializing_if = "Option::is_none")]
    pub task_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskDefinitionReference {
    #[serde(
        rename = "definitionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "versionSpec",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub version_spec: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskEvent {
    #[serde(flatten)]
    pub job_event: JobEvent,
    #[serde(rename = "taskId", default, skip_serializing_if = "Option::is_none")]
    pub task_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskExecution {
    #[serde(rename = "execTask", default, skip_serializing_if = "Option::is_none")]
    pub exec_task: Option<TaskReference>,
    #[serde(
        rename = "platformInstructions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub platform_instructions: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskGroup {
    #[serde(flatten)]
    pub task_definition: TaskDefinition,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    #[serde(
        rename = "modifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_by: Option<IdentityRef>,
    #[serde(
        rename = "modifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(
        rename = "parentDefinitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub parent_definition_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tasks: Vec<TaskGroupStep>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskGroupCreateParameter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "friendlyName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub friendly_name: Option<String>,
    #[serde(rename = "iconUrl", default, skip_serializing_if = "Option::is_none")]
    pub icon_url: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub inputs: Vec<TaskInputDefinition>,
    #[serde(
        rename = "instanceNameFormat",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub instance_name_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "parentDefinitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub parent_definition_id: Option<String>,
    #[serde(rename = "runsOn", default, skip_serializing_if = "Vec::is_empty")]
    pub runs_on: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tasks: Vec<TaskGroupStep>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<TaskVersion>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskGroupDefinition {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(
        rename = "isExpanded",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_expanded: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
    #[serde(
        rename = "visibleRule",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub visible_rule: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskGroupPublishPreviewParameter {
    #[serde(flatten)]
    pub task_group_update_properties_base: TaskGroupUpdatePropertiesBase,
    #[serde(
        rename = "disablePriorVersions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub disable_prior_versions: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub preview: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<TaskVersion>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskGroupRestoreParameter {
    #[serde(flatten)]
    pub task_group_update_properties_base: TaskGroupUpdatePropertiesBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub restore: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskGroupRevision {
    #[serde(rename = "changedBy", default, skip_serializing_if = "Option::is_none")]
    pub changed_by: Option<IdentityRef>,
    #[serde(
        rename = "changedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub changed_date: Option<String>,
    #[serde(
        rename = "changeType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_type: Option<task_group_revision::ChangeType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "fileId", default, skip_serializing_if = "Option::is_none")]
    pub file_id: Option<i32>,
    #[serde(
        rename = "majorVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub major_version: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(
        rename = "taskGroupId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub task_group_id: Option<String>,
}
pub mod task_group_revision {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ChangeType {
        #[serde(rename = "add")]
        Add,
        #[serde(rename = "update")]
        Update,
        #[serde(rename = "delete")]
        Delete,
        #[serde(rename = "undelete")]
        Undelete,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskGroupStep {
    #[serde(rename = "alwaysRun", default, skip_serializing_if = "Option::is_none")]
    pub always_run: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    #[serde(
        rename = "continueOnError",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continue_on_error: Option<bool>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inputs: Option<serde_json::Value>,
    #[serde(
        rename = "retryCountOnTaskFailure",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub retry_count_on_task_failure: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub task: Option<TaskDefinitionReference>,
    #[serde(
        rename = "timeoutInMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub timeout_in_minutes: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskGroupUpdateParameter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "friendlyName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub friendly_name: Option<String>,
    #[serde(rename = "iconUrl", default, skip_serializing_if = "Option::is_none")]
    pub icon_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub inputs: Vec<TaskInputDefinition>,
    #[serde(
        rename = "instanceNameFormat",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub instance_name_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "parentDefinitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub parent_definition_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(rename = "runsOn", default, skip_serializing_if = "Vec::is_empty")]
    pub runs_on: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tasks: Vec<TaskGroupStep>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<TaskVersion>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskGroupUpdatePropertiesBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskHubLicenseDetails {
    #[serde(
        rename = "enterpriseUsersCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub enterprise_users_count: Option<i32>,
    #[serde(
        rename = "failedToReachAllProviders",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub failed_to_reach_all_providers: Option<bool>,
    #[serde(
        rename = "freeHostedLicenseCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub free_hosted_license_count: Option<i32>,
    #[serde(
        rename = "freeLicenseCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub free_license_count: Option<i32>,
    #[serde(
        rename = "hasLicenseCountEverUpdated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub has_license_count_ever_updated: Option<bool>,
    #[serde(
        rename = "hostedAgentMinutesFreeCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub hosted_agent_minutes_free_count: Option<i32>,
    #[serde(
        rename = "hostedAgentMinutesUsedCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub hosted_agent_minutes_used_count: Option<i32>,
    #[serde(
        rename = "hostedLicensesArePremium",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub hosted_licenses_are_premium: Option<bool>,
    #[serde(
        rename = "msdnUsersCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub msdn_users_count: Option<i32>,
    #[serde(
        rename = "purchasedHostedLicenseCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub purchased_hosted_license_count: Option<i32>,
    #[serde(
        rename = "purchasedLicenseCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub purchased_license_count: Option<i32>,
    #[serde(
        rename = "totalHostedLicenseCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_hosted_license_count: Option<i32>,
    #[serde(
        rename = "totalLicenseCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_license_count: Option<i32>,
    #[serde(
        rename = "totalPrivateLicenseCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_private_license_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskInputDefinition {
    #[serde(flatten)]
    pub task_input_definition_base: TaskInputDefinitionBase,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskInputDefinitionBase {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub aliases: Vec<String>,
    #[serde(
        rename = "defaultValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_value: Option<String>,
    #[serde(rename = "groupName", default, skip_serializing_if = "Option::is_none")]
    pub group_name: Option<String>,
    #[serde(
        rename = "helpMarkDown",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub help_mark_down: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation: Option<TaskInputValidation>,
    #[serde(
        rename = "visibleRule",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub visible_rule: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskInputValidation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskInstance {
    #[serde(flatten)]
    pub task_reference: TaskReference,
    #[serde(rename = "alwaysRun", default, skip_serializing_if = "Option::is_none")]
    pub always_run: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    #[serde(
        rename = "continueOnError",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continue_on_error: Option<bool>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<serde_json::Value>,
    #[serde(
        rename = "instanceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub instance_id: Option<String>,
    #[serde(rename = "refName", default, skip_serializing_if = "Option::is_none")]
    pub ref_name: Option<String>,
    #[serde(
        rename = "retryCountOnTaskFailure",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub retry_count_on_task_failure: Option<i32>,
    #[serde(
        rename = "timeoutInMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub timeout_in_minutes: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskLog {
    #[serde(flatten)]
    pub task_log_reference: TaskLogReference,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(
        rename = "indexLocation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub index_location: Option<String>,
    #[serde(
        rename = "lastChangedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_changed_on: Option<String>,
    #[serde(rename = "lineCount", default, skip_serializing_if = "Option::is_none")]
    pub line_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskLogReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskOrchestrationContainer {
    #[serde(flatten)]
    pub task_orchestration_item: TaskOrchestrationItem,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub children: Vec<TaskOrchestrationItem>,
    #[serde(
        rename = "continueOnError",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continue_on_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(
        rename = "maxConcurrency",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_concurrency: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallel: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rollback: Box<Option<TaskOrchestrationContainer>>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskOrchestrationItem {
    #[serde(rename = "itemType", default, skip_serializing_if = "Option::is_none")]
    pub item_type: Option<task_orchestration_item::ItemType>,
}
pub mod task_orchestration_item {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ItemType {
        #[serde(rename = "container")]
        Container,
        #[serde(rename = "job")]
        Job,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskOrchestrationJob {
    #[serde(flatten)]
    pub task_orchestration_item: TaskOrchestrationItem,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub demands: Vec<Demand>,
    #[serde(rename = "executeAs", default, skip_serializing_if = "Option::is_none")]
    pub execute_as: Option<IdentityRef>,
    #[serde(
        rename = "executionMode",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub execution_mode: Option<String>,
    #[serde(
        rename = "executionTimeout",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub execution_timeout: Option<String>,
    #[serde(
        rename = "instanceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub instance_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "refName", default, skip_serializing_if = "Option::is_none")]
    pub ref_name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tasks: Vec<TaskInstance>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskOrchestrationOwner {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskOrchestrationPlan {
    #[serde(flatten)]
    pub task_orchestration_plan_reference: TaskOrchestrationPlanReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<PlanEnvironment>,
    #[serde(
        rename = "expandedYaml",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub expanded_yaml: Option<TaskLogReference>,
    #[serde(
        rename = "finishTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub finish_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub implementation: Option<TaskOrchestrationContainer>,
    #[serde(
        rename = "initializationLog",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub initialization_log: Option<TaskLogReference>,
    #[serde(
        rename = "requestedById",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_by_id: Option<String>,
    #[serde(
        rename = "requestedForId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_for_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<task_orchestration_plan::Result>,
    #[serde(
        rename = "resultCode",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_code: Option<String>,
    #[serde(rename = "startTime", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<task_orchestration_plan::State>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeline: Option<TimelineReference>,
}
pub mod task_orchestration_plan {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "succeededWithIssues")]
        SucceededWithIssues,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "skipped")]
        Skipped,
        #[serde(rename = "abandoned")]
        Abandoned,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "throttled")]
        Throttled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskOrchestrationPlanGroup {
    #[serde(rename = "planGroup", default, skip_serializing_if = "Option::is_none")]
    pub plan_group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ProjectReference>,
    #[serde(
        rename = "runningRequests",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub running_requests: Vec<TaskAgentJobRequest>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskOrchestrationPlanGroupsQueueMetrics {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<task_orchestration_plan_groups_queue_metrics::Status>,
}
pub mod task_orchestration_plan_groups_queue_metrics {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "running")]
        Running,
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskOrchestrationPlanReference {
    #[serde(
        rename = "artifactLocation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_location: Option<String>,
    #[serde(
        rename = "artifactUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<TaskOrchestrationOwner>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<TaskOrchestrationOwner>,
    #[serde(rename = "planGroup", default, skip_serializing_if = "Option::is_none")]
    pub plan_group: Option<String>,
    #[serde(rename = "planId", default, skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<String>,
    #[serde(rename = "planType", default, skip_serializing_if = "Option::is_none")]
    pub plan_type: Option<String>,
    #[serde(
        rename = "scopeIdentifier",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub scope_identifier: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskOrchestrationQueuedPlan {
    #[serde(
        rename = "assignTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assign_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<TaskOrchestrationOwner>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<TaskOrchestrationOwner>,
    #[serde(rename = "planGroup", default, skip_serializing_if = "Option::is_none")]
    pub plan_group: Option<String>,
    #[serde(rename = "planId", default, skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<String>,
    #[serde(rename = "poolId", default, skip_serializing_if = "Option::is_none")]
    pub pool_id: Option<i32>,
    #[serde(
        rename = "queuePosition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub queue_position: Option<i32>,
    #[serde(rename = "queueTime", default, skip_serializing_if = "Option::is_none")]
    pub queue_time: Option<String>,
    #[serde(
        rename = "scopeIdentifier",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub scope_identifier: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskOrchestrationQueuedPlanGroup {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<TaskOrchestrationOwner>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<TaskOrchestrationOwner>,
    #[serde(rename = "planGroup", default, skip_serializing_if = "Option::is_none")]
    pub plan_group: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub plans: Vec<TaskOrchestrationQueuedPlan>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ProjectReference>,
    #[serde(
        rename = "queuePosition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub queue_position: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskOutputVariable {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskPackageMetadata {
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inputs: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskRestrictions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commands: Option<TaskCommandRestrictions>,
    #[serde(
        rename = "settableVariables",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub settable_variables: Option<TaskVariableRestrictions>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskSourceDefinition {
    #[serde(flatten)]
    pub task_source_definition_base: TaskSourceDefinitionBase,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskSourceDefinitionBase {
    #[serde(rename = "authKey", default, skip_serializing_if = "Option::is_none")]
    pub auth_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(
        rename = "keySelector",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub key_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskStartedEvent {
    #[serde(flatten)]
    pub task_event: TaskEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskVariableRestrictions {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub allowed: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskVersion {
    #[serde(rename = "isTest", default, skip_serializing_if = "Option::is_none")]
    pub is_test: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub major: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minor: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Timeline {
    #[serde(flatten)]
    pub timeline_reference: TimelineReference,
    #[serde(
        rename = "lastChangedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_changed_by: Option<String>,
    #[serde(
        rename = "lastChangedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_changed_on: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub records: Vec<TimelineRecord>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimelineAttempt {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
    #[serde(rename = "recordId", default, skip_serializing_if = "Option::is_none")]
    pub record_id: Option<String>,
    #[serde(
        rename = "timelineId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub timeline_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimelineRecord {
    #[serde(
        rename = "agentSpecification",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_specification: Option<JObject>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(rename = "changeId", default, skip_serializing_if = "Option::is_none")]
    pub change_id: Option<i32>,
    #[serde(
        rename = "currentOperation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub current_operation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub details: Option<TimelineReference>,
    #[serde(
        rename = "errorCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_count: Option<i32>,
    #[serde(
        rename = "finishTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub finish_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub issues: Vec<Issue>,
    #[serde(
        rename = "lastModified",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log: Option<TaskLogReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<i32>,
    #[serde(rename = "parentId", default, skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    #[serde(
        rename = "percentComplete",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub percent_complete: Option<i32>,
    #[serde(
        rename = "previousAttempts",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub previous_attempts: Vec<TimelineAttempt>,
    #[serde(rename = "queueId", default, skip_serializing_if = "Option::is_none")]
    pub queue_id: Option<i32>,
    #[serde(rename = "refName", default, skip_serializing_if = "Option::is_none")]
    pub ref_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<timeline_record::Result>,
    #[serde(
        rename = "resultCode",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_code: Option<String>,
    #[serde(rename = "startTime", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<timeline_record::State>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub task: Option<TaskReference>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
    #[serde(
        rename = "warningCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub warning_count: Option<i32>,
    #[serde(
        rename = "workerName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub worker_name: Option<String>,
}
pub mod timeline_record {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "succeededWithIssues")]
        SucceededWithIssues,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "skipped")]
        Skipped,
        #[serde(rename = "abandoned")]
        Abandoned,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "completed")]
        Completed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimelineRecordFeedLinesWrapper {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(rename = "endLine", default, skip_serializing_if = "Option::is_none")]
    pub end_line: Option<i64>,
    #[serde(rename = "startLine", default, skip_serializing_if = "Option::is_none")]
    pub start_line: Option<i64>,
    #[serde(rename = "stepId", default, skip_serializing_if = "Option::is_none")]
    pub step_id: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimelineReference {
    #[serde(rename = "changeId", default, skip_serializing_if = "Option::is_none")]
    pub change_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidationItem {
    #[serde(rename = "isValid", default, skip_serializing_if = "Option::is_none")]
    pub is_valid: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VariableGroup {
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "isShared", default, skip_serializing_if = "Option::is_none")]
    pub is_shared: Option<bool>,
    #[serde(
        rename = "modifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_by: Option<IdentityRef>,
    #[serde(
        rename = "modifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "providerData",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub provider_data: Option<VariableGroupProviderData>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(
        rename = "variableGroupProjectReferences",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub variable_group_project_references: Vec<VariableGroupProjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VariableGroupParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "providerData",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub provider_data: Option<VariableGroupProviderData>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(
        rename = "variableGroupProjectReferences",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub variable_group_project_references: Vec<VariableGroupProjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VariableGroupProjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "projectReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_reference: Option<ProjectReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VariableGroupProviderData {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VariableValue {
    #[serde(
        rename = "isReadOnly",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_read_only: Option<bool>,
    #[serde(rename = "isSecret", default, skip_serializing_if = "Option::is_none")]
    pub is_secret: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VirtualMachine {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<TaskAgent>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VirtualMachineGroup {
    #[serde(flatten)]
    pub environment_resource: EnvironmentResource,
    #[serde(rename = "poolId", default, skip_serializing_if = "Option::is_none")]
    pub pool_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VirtualMachineGroupCreateParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VirtualMachineResource {
    #[serde(flatten)]
    pub environment_resource: EnvironmentResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub agent: Option<TaskAgent>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VirtualMachineResourceCreateParameters {
    #[serde(
        rename = "virtualMachineResource",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub virtual_machine_resource: Option<VirtualMachineResource>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentGroupList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<DeploymentGroup>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentMachineList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<DeploymentMachine>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentDeploymentExecutionRecordList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<EnvironmentDeploymentExecutionRecord>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentInstanceList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<EnvironmentInstance>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentCloudList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TaskAgentCloud>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentCloudRequestList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TaskAgentCloudRequest>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentCloudTypeList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TaskAgentCloudType>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TaskAgent>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentPoolList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TaskAgentPool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentQueueList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TaskAgentQueue>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskGroupList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TaskGroup>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VariableGroupList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<VariableGroup>,
}
