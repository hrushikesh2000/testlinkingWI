#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdminBehavior {
    #[serde(rename = "abstract", default, skip_serializing_if = "Option::is_none")]
    pub abstract_: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub fields: Vec<AdminBehaviorField>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inherits: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overriden: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rank: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdminBehaviorField {
    #[serde(
        rename = "behaviorFieldId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub behavior_field_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CheckTemplateExistenceResult {
    #[serde(
        rename = "doesTemplateExist",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub does_template_exist: Option<bool>,
    #[serde(
        rename = "existingTemplateName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub existing_template_name: Option<String>,
    #[serde(
        rename = "existingTemplateTypeId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub existing_template_type_id: Option<String>,
    #[serde(
        rename = "requestedTemplateName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_template_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProcessImportResult {
    #[serde(
        rename = "checkExistenceResult",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub check_existence_result: Option<CheckTemplateExistenceResult>,
    #[serde(rename = "helpUrl", default, skip_serializing_if = "Option::is_none")]
    pub help_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "isNew", default, skip_serializing_if = "Option::is_none")]
    pub is_new: Option<bool>,
    #[serde(
        rename = "promoteJobId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub promote_job_id: Option<String>,
    #[serde(
        rename = "validationResults",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub validation_results: Vec<ValidationIssue>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProcessPromoteStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub complete: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pending: Option<i32>,
    #[serde(
        rename = "remainingRetries",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub remaining_retries: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub successful: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidationIssue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    #[serde(rename = "helpLink", default, skip_serializing_if = "Option::is_none")]
    pub help_link: Option<String>,
    #[serde(rename = "issueType", default, skip_serializing_if = "Option::is_none")]
    pub issue_type: Option<validation_issue::IssueType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub line: Option<i32>,
}
pub mod validation_issue {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum IssueType {
        #[serde(rename = "warning")]
        Warning,
        #[serde(rename = "error")]
        Error,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdminBehaviorList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<AdminBehavior>,
}
