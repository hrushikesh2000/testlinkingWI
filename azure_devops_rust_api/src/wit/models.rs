// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountMyWorkResult {
    #[serde(
        rename = "querySizeLimitExceeded",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub query_size_limit_exceeded: Option<bool>,
    #[serde(
        rename = "workItemDetails",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub work_item_details: Vec<AccountWorkWorkItemModel>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountRecentActivityWorkItemModel {
    #[serde(flatten)]
    pub account_recent_activity_work_item_model_base: AccountRecentActivityWorkItemModelBase,
    #[serde(
        rename = "assignedTo",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_to: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountRecentActivityWorkItemModel2 {
    #[serde(flatten)]
    pub account_recent_activity_work_item_model_base: AccountRecentActivityWorkItemModelBase,
    #[serde(
        rename = "assignedTo",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_to: Option<IdentityRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountRecentActivityWorkItemModelBase {
    #[serde(
        rename = "activityDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub activity_date: Option<String>,
    #[serde(
        rename = "activityType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub activity_type: Option<account_recent_activity_work_item_model_base::ActivityType>,
    #[serde(
        rename = "changedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub changed_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "identityId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub identity_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(
        rename = "teamProject",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_project: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(
        rename = "workItemType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_type: Option<String>,
}
pub mod account_recent_activity_work_item_model_base {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ActivityType {
        #[serde(rename = "visited")]
        Visited,
        #[serde(rename = "edited")]
        Edited,
        #[serde(rename = "deleted")]
        Deleted,
        #[serde(rename = "restored")]
        Restored,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountRecentMentionWorkItemModel {
    #[serde(
        rename = "assignedTo",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_to: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "mentionedDateField",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub mentioned_date_field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(
        rename = "teamProject",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_project: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(
        rename = "workItemType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountWorkWorkItemModel {
    #[serde(
        rename = "assignedTo",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_to: Option<String>,
    #[serde(
        rename = "changedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub changed_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(
        rename = "teamProject",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_project: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(
        rename = "workItemType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactUriQuery {
    #[serde(
        rename = "artifactUris",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub artifact_uris: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactUriQueryResult {
    #[serde(
        rename = "artifactUrisQueryResult",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_uris_query_result: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AttachmentReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Comment {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(
        rename = "createdOnBehalfDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_on_behalf_date: Option<String>,
    #[serde(
        rename = "createdOnBehalfOf",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_on_behalf_of: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "isDeleted", default, skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub mentions: Vec<CommentMention>,
    #[serde(
        rename = "modifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_by: Option<IdentityRef>,
    #[serde(
        rename = "modifiedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_date: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub reactions: Vec<CommentReaction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    #[serde(
        rename = "workItemId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommentCreate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommentList {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub comments: Vec<Comment>,
    #[serde(
        rename = "continuationToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continuation_token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(rename = "nextPage", default, skip_serializing_if = "Option::is_none")]
    pub next_page: Option<String>,
    #[serde(
        rename = "totalCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommentMention {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(
        rename = "artifactId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_id: Option<String>,
    #[serde(
        rename = "artifactType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_type: Option<String>,
    #[serde(rename = "commentId", default, skip_serializing_if = "Option::is_none")]
    pub comment_id: Option<i32>,
    #[serde(rename = "targetId", default, skip_serializing_if = "Option::is_none")]
    pub target_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommentReaction {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(rename = "commentId", default, skip_serializing_if = "Option::is_none")]
    pub comment_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(
        rename = "isCurrentUserEngaged",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_current_user_engaged: Option<bool>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<comment_reaction::Type>,
}
pub mod comment_reaction {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "like")]
        Like,
        #[serde(rename = "dislike")]
        Dislike,
        #[serde(rename = "heart")]
        Heart,
        #[serde(rename = "hooray")]
        Hooray,
        #[serde(rename = "smile")]
        Smile,
        #[serde(rename = "confused")]
        Confused,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommentUpdate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommentVersion {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(
        rename = "createdOnBehalfDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_on_behalf_date: Option<String>,
    #[serde(
        rename = "createdOnBehalfOf",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_on_behalf_of: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "isDeleted", default, skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    #[serde(
        rename = "modifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_by: Option<IdentityRef>,
    #[serde(
        rename = "modifiedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_date: Option<String>,
    #[serde(
        rename = "renderedText",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub rendered_text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EmailRecipients {
    #[serde(
        rename = "emailAddresses",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub email_addresses: Vec<String>,
    #[serde(rename = "tfIds", default, skip_serializing_if = "Vec::is_empty")]
    pub tf_ids: Vec<String>,
    #[serde(
        rename = "unresolvedEntityIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub unresolved_entity_ids: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExternalDeployment {
    #[serde(
        rename = "artifactId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_id: Option<String>,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<ExternalEnvironment>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipeline: Option<ExternalPipeline>,
    #[serde(
        rename = "relatedWorkItemIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub related_work_item_ids: Vec<i32>,
    #[serde(rename = "runId", default, skip_serializing_if = "Option::is_none")]
    pub run_id: Option<i32>,
    #[serde(
        rename = "sequenceNumber",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sequence_number: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(
        rename = "statusDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub status_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExternalEnvironment {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExternalPipeline {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FieldDependentRule {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(
        rename = "dependentFields",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub dependent_fields: Vec<WorkItemFieldReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectBase {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityRef {
    #[serde(flatten)]
    pub graph_subject_base: GraphSubjectBase,
    #[serde(
        rename = "directoryAlias",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub directory_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inactive: Option<bool>,
    #[serde(
        rename = "isAadIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_aad_identity: Option<bool>,
    #[serde(
        rename = "isContainer",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_container: Option<bool>,
    #[serde(
        rename = "isDeletedInOrigin",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_deleted_in_origin: Option<bool>,
    #[serde(
        rename = "profileUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub profile_url: Option<String>,
    #[serde(
        rename = "uniqueName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityReference {
    #[serde(flatten)]
    pub identity_ref: IdentityRef,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonPatchDocument {
    #[serde(flatten)]
    pub vec_json_patch_operation: Vec<JsonPatchOperation>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonPatchOperation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub op: Option<json_patch_operation::Op>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
}
pub mod json_patch_operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Op {
        #[serde(rename = "add")]
        Add,
        #[serde(rename = "remove")]
        Remove,
        #[serde(rename = "replace")]
        Replace,
        #[serde(rename = "move")]
        Move,
        #[serde(rename = "copy")]
        Copy,
        #[serde(rename = "test")]
        Test,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Link {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rel: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MailMessage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cc: Option<EmailRecipients>,
    #[serde(rename = "inReplyTo", default, skip_serializing_if = "Option::is_none")]
    pub in_reply_to: Option<String>,
    #[serde(rename = "messageId", default, skip_serializing_if = "Option::is_none")]
    pub message_id: Option<String>,
    #[serde(rename = "replyTo", default, skip_serializing_if = "Option::is_none")]
    pub reply_to: Option<EmailRecipients>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<EmailRecipients>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProcessIdModel {
    #[serde(rename = "typeId", default, skip_serializing_if = "Option::is_none")]
    pub type_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProcessMigrationResultModel {
    #[serde(rename = "processId", default, skip_serializing_if = "Option::is_none")]
    pub process_id: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectWorkItemStateColors {
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
    #[serde(
        rename = "workItemTypeStateColors",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub work_item_type_state_colors: Vec<WorkItemTypeStateColors>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProvisioningResult {
    #[serde(
        rename = "provisioningImportEvents",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub provisioning_import_events: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryBatchGetRequest {
    #[serde(rename = "$expand", default, skip_serializing_if = "Option::is_none")]
    pub expand: Option<query_batch_get_request::Expand>,
    #[serde(
        rename = "errorPolicy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_policy: Option<query_batch_get_request::ErrorPolicy>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub ids: Vec<String>,
}
pub mod query_batch_get_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Expand {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "wiql")]
        Wiql,
        #[serde(rename = "clauses")]
        Clauses,
        #[serde(rename = "all")]
        All,
        #[serde(rename = "minimal")]
        Minimal,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ErrorPolicy {
        #[serde(rename = "fail")]
        Fail,
        #[serde(rename = "omit")]
        Omit,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryHierarchyItem {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub children: Vec<QueryHierarchyItem>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clauses: Option<WorkItemQueryClause>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub columns: Vec<WorkItemFieldReference>,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityReference>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(
        rename = "filterOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub filter_options: Option<query_hierarchy_item::FilterOptions>,
    #[serde(
        rename = "hasChildren",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub has_children: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "isDeleted", default, skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    #[serde(rename = "isFolder", default, skip_serializing_if = "Option::is_none")]
    pub is_folder: Option<bool>,
    #[serde(
        rename = "isInvalidSyntax",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_invalid_syntax: Option<bool>,
    #[serde(rename = "isPublic", default, skip_serializing_if = "Option::is_none")]
    pub is_public: Option<bool>,
    #[serde(
        rename = "lastExecutedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_executed_by: Option<IdentityReference>,
    #[serde(
        rename = "lastExecutedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_executed_date: Option<String>,
    #[serde(
        rename = "lastModifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_by: Option<IdentityReference>,
    #[serde(
        rename = "lastModifiedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_date: Option<String>,
    #[serde(
        rename = "linkClauses",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub link_clauses: Option<WorkItemQueryClause>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(
        rename = "queryRecursionOption",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub query_recursion_option: Option<query_hierarchy_item::QueryRecursionOption>,
    #[serde(rename = "queryType", default, skip_serializing_if = "Option::is_none")]
    pub query_type: Option<query_hierarchy_item::QueryType>,
    #[serde(rename = "sortColumns", default, skip_serializing_if = "Vec::is_empty")]
    pub sort_columns: Vec<WorkItemQuerySortColumn>,
    #[serde(
        rename = "sourceClauses",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_clauses: Option<WorkItemQueryClause>,
    #[serde(
        rename = "targetClauses",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_clauses: Option<WorkItemQueryClause>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wiql: Option<String>,
}
pub mod query_hierarchy_item {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FilterOptions {
        #[serde(rename = "workItems")]
        WorkItems,
        #[serde(rename = "linksOneHopMustContain")]
        LinksOneHopMustContain,
        #[serde(rename = "linksOneHopMayContain")]
        LinksOneHopMayContain,
        #[serde(rename = "linksOneHopDoesNotContain")]
        LinksOneHopDoesNotContain,
        #[serde(rename = "linksRecursiveMustContain")]
        LinksRecursiveMustContain,
        #[serde(rename = "linksRecursiveMayContain")]
        LinksRecursiveMayContain,
        #[serde(rename = "linksRecursiveDoesNotContain")]
        LinksRecursiveDoesNotContain,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum QueryRecursionOption {
        #[serde(rename = "parentFirst")]
        ParentFirst,
        #[serde(rename = "childFirst")]
        ChildFirst,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum QueryType {
        #[serde(rename = "flat")]
        Flat,
        #[serde(rename = "tree")]
        Tree,
        #[serde(rename = "oneHop")]
        OneHop,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryHierarchyItemsResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(rename = "hasMore", default, skip_serializing_if = "Option::is_none")]
    pub has_more: Option<bool>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<QueryHierarchyItem>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReportingWorkItemLinksBatch {
    #[serde(flatten)]
    pub streamed_batch: StreamedBatch,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReportingWorkItemRevisionsBatch {
    #[serde(flatten)]
    pub streamed_batch: StreamedBatch,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReportingWorkItemRevisionsFilter {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub fields: Vec<String>,
    #[serde(
        rename = "includeDeleted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_deleted: Option<bool>,
    #[serde(
        rename = "includeIdentityRef",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_identity_ref: Option<bool>,
    #[serde(
        rename = "includeLatestOnly",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_latest_only: Option<bool>,
    #[serde(
        rename = "includeTagRef",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_tag_ref: Option<bool>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub types: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SendMailBody {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub fields: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub ids: Vec<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<MailMessage>,
    #[serde(
        rename = "persistenceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub persistence_id: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(rename = "sortFields", default, skip_serializing_if = "Vec::is_empty")]
    pub sort_fields: Vec<String>,
    #[serde(
        rename = "tempQueryId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub temp_query_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wiql: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StreamedBatch {
    #[serde(
        rename = "continuationToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continuation_token: Option<String>,
    #[serde(
        rename = "isLastBatch",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_last_batch: Option<bool>,
    #[serde(rename = "nextLink", default, skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub values: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamContext {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub team: Option<String>,
    #[serde(rename = "teamId", default, skip_serializing_if = "Option::is_none")]
    pub team_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateWorkItemField {
    #[serde(rename = "isDeleted", default, skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Wiql {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub query: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkArtifactLink {
    #[serde(
        rename = "artifactType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_type: Option<String>,
    #[serde(rename = "linkType", default, skip_serializing_if = "Option::is_none")]
    pub link_type: Option<String>,
    #[serde(rename = "toolType", default, skip_serializing_if = "Option::is_none")]
    pub tool_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItem {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(
        rename = "commentVersionRef",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub comment_version_ref: Option<WorkItemCommentVersionRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub relations: Vec<WorkItemRelation>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rev: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemBatchGetRequest {
    #[serde(rename = "$expand", default, skip_serializing_if = "Option::is_none")]
    pub expand: Option<work_item_batch_get_request::Expand>,
    #[serde(rename = "asOf", default, skip_serializing_if = "Option::is_none")]
    pub as_of: Option<String>,
    #[serde(
        rename = "errorPolicy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_policy: Option<work_item_batch_get_request::ErrorPolicy>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub fields: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub ids: Vec<i32>,
}
pub mod work_item_batch_get_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Expand {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "relations")]
        Relations,
        #[serde(rename = "fields")]
        Fields,
        #[serde(rename = "links")]
        Links,
        #[serde(rename = "all")]
        All,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ErrorPolicy {
        #[serde(rename = "fail")]
        Fail,
        #[serde(rename = "omit")]
        Omit,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemClassificationNode {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub children: Vec<WorkItemClassificationNode>,
    #[serde(
        rename = "hasChildren",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub has_children: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(
        rename = "structureType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub structure_type: Option<work_item_classification_node::StructureType>,
}
pub mod work_item_classification_node {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum StructureType {
        #[serde(rename = "area")]
        Area,
        #[serde(rename = "iteration")]
        Iteration,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemComment {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(rename = "revisedBy", default, skip_serializing_if = "Option::is_none")]
    pub revised_by: Option<IdentityReference>,
    #[serde(
        rename = "revisedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub revised_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemComments {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub comments: Vec<WorkItemComment>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(
        rename = "fromRevisionCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub from_revision_count: Option<i32>,
    #[serde(
        rename = "totalCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemCommentVersionRef {
    #[serde(flatten)]
    pub work_item_tracking_resource_reference: WorkItemTrackingResourceReference,
    #[serde(rename = "commentId", default, skip_serializing_if = "Option::is_none")]
    pub comment_id: Option<i32>,
    #[serde(
        rename = "createdInRevision",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_in_revision: Option<i32>,
    #[serde(rename = "isDeleted", default, skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemDelete {
    #[serde(flatten)]
    pub work_item_delete_reference: WorkItemDeleteReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<WorkItem>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemDeleteReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<i32>,
    #[serde(rename = "deletedBy", default, skip_serializing_if = "Option::is_none")]
    pub deleted_by: Option<String>,
    #[serde(
        rename = "deletedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deleted_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemDeleteShallowReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemDeleteUpdate {
    #[serde(rename = "isDeleted", default, skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemField {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(rename = "canSortBy", default, skip_serializing_if = "Option::is_none")]
    pub can_sort_by: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "isDeleted", default, skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    #[serde(
        rename = "isIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_identity: Option<bool>,
    #[serde(
        rename = "isPicklist",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_picklist: Option<bool>,
    #[serde(
        rename = "isPicklistSuggested",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_picklist_suggested: Option<bool>,
    #[serde(
        rename = "isQueryable",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_queryable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "picklistId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub picklist_id: Option<String>,
    #[serde(rename = "readOnly", default, skip_serializing_if = "Option::is_none")]
    pub read_only: Option<bool>,
    #[serde(
        rename = "referenceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reference_name: Option<String>,
    #[serde(
        rename = "supportedOperations",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub supported_operations: Vec<WorkItemFieldOperation>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<work_item_field::Type>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub usage: Option<work_item_field::Usage>,
}
pub mod work_item_field {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "string")]
        String,
        #[serde(rename = "integer")]
        Integer,
        #[serde(rename = "dateTime")]
        DateTime,
        #[serde(rename = "plainText")]
        PlainText,
        #[serde(rename = "html")]
        Html,
        #[serde(rename = "treePath")]
        TreePath,
        #[serde(rename = "history")]
        History,
        #[serde(rename = "double")]
        Double,
        #[serde(rename = "guid")]
        Guid,
        #[serde(rename = "boolean")]
        Boolean,
        #[serde(rename = "identity")]
        Identity,
        #[serde(rename = "picklistString")]
        PicklistString,
        #[serde(rename = "picklistInteger")]
        PicklistInteger,
        #[serde(rename = "picklistDouble")]
        PicklistDouble,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Usage {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "workItem")]
        WorkItem,
        #[serde(rename = "workItemLink")]
        WorkItemLink,
        #[serde(rename = "tree")]
        Tree,
        #[serde(rename = "workItemTypeExtension")]
        WorkItemTypeExtension,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemFieldOperation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "referenceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reference_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemFieldReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "referenceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reference_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemFieldUpdate {
    #[serde(rename = "newValue", default, skip_serializing_if = "Option::is_none")]
    pub new_value: Option<serde_json::Value>,
    #[serde(rename = "oldValue", default, skip_serializing_if = "Option::is_none")]
    pub old_value: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemHistory {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rev: Option<i32>,
    #[serde(rename = "revisedBy", default, skip_serializing_if = "Option::is_none")]
    pub revised_by: Option<IdentityReference>,
    #[serde(
        rename = "revisedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub revised_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemIcon {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemLink {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rel: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<WorkItemReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<WorkItemReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemNextStateOnTransition {
    #[serde(rename = "errorCode", default, skip_serializing_if = "Option::is_none")]
    pub error_code: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(
        rename = "stateOnTransition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub state_on_transition: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemQueryClause {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub clauses: Vec<WorkItemQueryClause>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub field: Option<WorkItemFieldReference>,
    #[serde(
        rename = "fieldValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub field_value: Option<WorkItemFieldReference>,
    #[serde(
        rename = "isFieldValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_field_value: Option<bool>,
    #[serde(
        rename = "logicalOperator",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub logical_operator: Option<work_item_query_clause::LogicalOperator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<WorkItemFieldOperation>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
pub mod work_item_query_clause {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LogicalOperator {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "and")]
        And,
        #[serde(rename = "or")]
        Or,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemQueryResult {
    #[serde(rename = "asOf", default, skip_serializing_if = "Option::is_none")]
    pub as_of: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub columns: Vec<WorkItemFieldReference>,
    #[serde(
        rename = "queryResultType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub query_result_type: Option<work_item_query_result::QueryResultType>,
    #[serde(rename = "queryType", default, skip_serializing_if = "Option::is_none")]
    pub query_type: Option<work_item_query_result::QueryType>,
    #[serde(rename = "sortColumns", default, skip_serializing_if = "Vec::is_empty")]
    pub sort_columns: Vec<WorkItemQuerySortColumn>,
    #[serde(
        rename = "workItemRelations",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub work_item_relations: Vec<WorkItemLink>,
    #[serde(rename = "workItems", default, skip_serializing_if = "Vec::is_empty")]
    pub work_items: Vec<WorkItemReference>,
}
pub mod work_item_query_result {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum QueryResultType {
        #[serde(rename = "workItem")]
        WorkItem,
        #[serde(rename = "workItemLink")]
        WorkItemLink,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum QueryType {
        #[serde(rename = "flat")]
        Flat,
        #[serde(rename = "tree")]
        Tree,
        #[serde(rename = "oneHop")]
        OneHop,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemQuerySortColumn {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descending: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub field: Option<WorkItemFieldReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemRelation {
    #[serde(flatten)]
    pub link: Link,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemRelationType {
    #[serde(flatten)]
    pub work_item_tracking_reference: WorkItemTrackingReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemRelationUpdates {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub added: Vec<WorkItemRelation>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub removed: Vec<WorkItemRelation>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub updated: Vec<WorkItemRelation>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemStateColor {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemStateTransition {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub actions: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTagDefinition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTemplate {
    #[serde(flatten)]
    pub work_item_template_reference: WorkItemTemplateReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTemplateReference {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "workItemTypeName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_type_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTrackingReference {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "referenceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reference_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTrackingResource {
    #[serde(flatten)]
    pub work_item_tracking_resource_reference: WorkItemTrackingResourceReference,
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTrackingResourceReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemType {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "fieldInstances",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub field_instances: Vec<WorkItemTypeFieldInstance>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub fields: Vec<WorkItemTypeFieldInstance>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<WorkItemIcon>,
    #[serde(
        rename = "isDisabled",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_disabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "referenceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reference_name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub states: Vec<WorkItemStateColor>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transitions: Option<serde_json::Value>,
    #[serde(rename = "xmlForm", default, skip_serializing_if = "Option::is_none")]
    pub xml_form: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTypeCategory {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(
        rename = "defaultWorkItemType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_work_item_type: Option<WorkItemTypeReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "referenceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reference_name: Option<String>,
    #[serde(
        rename = "workItemTypes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub work_item_types: Vec<WorkItemTypeReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTypeColor {
    #[serde(
        rename = "primaryColor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub primary_color: Option<String>,
    #[serde(
        rename = "secondaryColor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub secondary_color: Option<String>,
    #[serde(
        rename = "workItemTypeName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_type_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTypeColorAndIcon {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    #[serde(
        rename = "workItemTypeName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_type_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTypeFieldInstance {
    #[serde(flatten)]
    pub work_item_type_field_instance_base: WorkItemTypeFieldInstanceBase,
    #[serde(
        rename = "allowedValues",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub allowed_values: Vec<String>,
    #[serde(
        rename = "defaultValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTypeFieldInstanceBase {
    #[serde(flatten)]
    pub work_item_field_reference: WorkItemFieldReference,
    #[serde(
        rename = "alwaysRequired",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub always_required: Option<bool>,
    #[serde(
        rename = "dependentFields",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub dependent_fields: Vec<WorkItemFieldReference>,
    #[serde(rename = "helpText", default, skip_serializing_if = "Option::is_none")]
    pub help_text: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTypeFieldWithReferences {
    #[serde(flatten)]
    pub work_item_type_field_instance_base: WorkItemTypeFieldInstanceBase,
    #[serde(
        rename = "allowedValues",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub allowed_values: Vec<serde_json::Value>,
    #[serde(
        rename = "defaultValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_value: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTypeReference {
    #[serde(flatten)]
    pub work_item_tracking_resource_reference: WorkItemTrackingResourceReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTypeStateColors {
    #[serde(rename = "stateColors", default, skip_serializing_if = "Vec::is_empty")]
    pub state_colors: Vec<WorkItemStateColor>,
    #[serde(
        rename = "workItemTypeName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_type_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTypeTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTypeTemplateUpdateModel {
    #[serde(
        rename = "actionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub action_type: Option<work_item_type_template_update_model::ActionType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub methodology: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<String>,
    #[serde(
        rename = "templateType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub template_type: Option<work_item_type_template_update_model::TemplateType>,
}
pub mod work_item_type_template_update_model {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ActionType {
        #[serde(rename = "import")]
        Import,
        #[serde(rename = "validate")]
        Validate,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TemplateType {
        #[serde(rename = "workItemType")]
        WorkItemType,
        #[serde(rename = "globalWorkflow")]
        GlobalWorkflow,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemUpdate {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub relations: Option<WorkItemRelationUpdates>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rev: Option<i32>,
    #[serde(rename = "revisedBy", default, skip_serializing_if = "Option::is_none")]
    pub revised_by: Option<IdentityReference>,
    #[serde(
        rename = "revisedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub revised_date: Option<String>,
    #[serde(
        rename = "workItemId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountRecentActivityWorkItemModel2List {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<AccountRecentActivityWorkItemModel2>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommentReactionList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<CommentReaction>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommentVersionList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<CommentVersion>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityRefList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<IdentityRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryHierarchyItemList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<QueryHierarchyItem>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkArtifactLinkList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkArtifactLink>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemClassificationNodeList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkItemClassificationNode>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemDeleteReferenceList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkItemDeleteReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemDeleteShallowReferenceList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkItemDeleteShallowReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemFieldList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkItemField>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemIconList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkItemIcon>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkItem>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemNextStateOnTransitionList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkItemNextStateOnTransition>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemRelationTypeList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkItemRelationType>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemStateColorList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkItemStateColor>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTagDefinitionList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkItemTagDefinition>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTemplateReferenceList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkItemTemplateReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTypeCategoryList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkItemTypeCategory>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTypeFieldWithReferencesList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkItemTypeFieldWithReferences>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTypeList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkItemType>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemUpdateList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WorkItemUpdate>,
}
