#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccessLevel {
    #[serde(
        rename = "accountLicenseType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub account_license_type: Option<access_level::AccountLicenseType>,
    #[serde(
        rename = "assignmentSource",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assignment_source: Option<access_level::AssignmentSource>,
    #[serde(
        rename = "licenseDisplayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub license_display_name: Option<String>,
    #[serde(
        rename = "licensingSource",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub licensing_source: Option<access_level::LicensingSource>,
    #[serde(
        rename = "msdnLicenseType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub msdn_license_type: Option<access_level::MsdnLicenseType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<access_level::Status>,
    #[serde(
        rename = "statusMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub status_message: Option<String>,
}
pub mod access_level {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AccountLicenseType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "earlyAdopter")]
        EarlyAdopter,
        #[serde(rename = "express")]
        Express,
        #[serde(rename = "professional")]
        Professional,
        #[serde(rename = "advanced")]
        Advanced,
        #[serde(rename = "stakeholder")]
        Stakeholder,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AssignmentSource {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "groupRule")]
        GroupRule,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LicensingSource {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "account")]
        Account,
        #[serde(rename = "msdn")]
        Msdn,
        #[serde(rename = "profile")]
        Profile,
        #[serde(rename = "auto")]
        Auto,
        #[serde(rename = "trial")]
        Trial,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MsdnLicenseType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "eligible")]
        Eligible,
        #[serde(rename = "professional")]
        Professional,
        #[serde(rename = "platforms")]
        Platforms,
        #[serde(rename = "testProfessional")]
        TestProfessional,
        #[serde(rename = "premium")]
        Premium,
        #[serde(rename = "ultimate")]
        Ultimate,
        #[serde(rename = "enterprise")]
        Enterprise,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "active")]
        Active,
        #[serde(rename = "disabled")]
        Disabled,
        #[serde(rename = "deleted")]
        Deleted,
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "expired")]
        Expired,
        #[serde(rename = "pendingDisabled")]
        PendingDisabled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BaseOperationResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub errors: Vec<serde_json::Value>,
    #[serde(rename = "isSuccess", default, skip_serializing_if = "Option::is_none")]
    pub is_success: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Extension {
    #[serde(
        rename = "assignmentSource",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assignment_source: Option<extension::AssignmentSource>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<extension::Source>,
}
pub mod extension {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AssignmentSource {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "groupRule")]
        GroupRule,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Source {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "account")]
        Account,
        #[serde(rename = "msdn")]
        Msdn,
        #[serde(rename = "profile")]
        Profile,
        #[serde(rename = "auto")]
        Auto,
        #[serde(rename = "trial")]
        Trial,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionSummaryData {
    #[serde(flatten)]
    pub summary_data: SummaryData,
    #[serde(
        rename = "assignedThroughSubscription",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_through_subscription: Option<i32>,
    #[serde(
        rename = "extensionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub extension_id: Option<String>,
    #[serde(
        rename = "extensionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub extension_name: Option<String>,
    #[serde(
        rename = "isTrialVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_trial_version: Option<bool>,
    #[serde(
        rename = "minimumLicenseRequired",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub minimum_license_required: Option<extension_summary_data::MinimumLicenseRequired>,
    #[serde(
        rename = "remainingTrialDays",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub remaining_trial_days: Option<i32>,
    #[serde(
        rename = "trialExpiryDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub trial_expiry_date: Option<String>,
}
pub mod extension_summary_data {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MinimumLicenseRequired {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "express")]
        Express,
        #[serde(rename = "advanced")]
        Advanced,
        #[serde(rename = "advancedPlus")]
        AdvancedPlus,
        #[serde(rename = "stakeholder")]
        Stakeholder,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphGroup {
    #[serde(flatten)]
    pub graph_member: GraphMember,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphMember {
    #[serde(flatten)]
    pub graph_subject: GraphSubject,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    #[serde(
        rename = "mailAddress",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub mail_address: Option<String>,
    #[serde(
        rename = "principalName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub principal_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubject {
    #[serde(flatten)]
    pub graph_subject_base: GraphSubjectBase,
    #[serde(
        rename = "legacyDescriptor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub legacy_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(rename = "originId", default, skip_serializing_if = "Option::is_none")]
    pub origin_id: Option<String>,
    #[serde(
        rename = "subjectKind",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub subject_kind: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectBase {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphUser {
    #[serde(flatten)]
    pub graph_member: GraphMember,
    #[serde(
        rename = "directoryAlias",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub directory_alias: Option<String>,
    #[serde(
        rename = "isDeletedInOrigin",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_deleted_in_origin: Option<bool>,
    #[serde(rename = "metaType", default, skip_serializing_if = "Option::is_none")]
    pub meta_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Group {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(rename = "groupType", default, skip_serializing_if = "Option::is_none")]
    pub group_type: Option<group::GroupType>,
}
pub mod group {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum GroupType {
        #[serde(rename = "projectStakeholder")]
        ProjectStakeholder,
        #[serde(rename = "projectReader")]
        ProjectReader,
        #[serde(rename = "projectContributor")]
        ProjectContributor,
        #[serde(rename = "projectAdministrator")]
        ProjectAdministrator,
        #[serde(rename = "custom")]
        Custom,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GroupEntitlement {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<GraphGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "lastExecuted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_executed: Option<String>,
    #[serde(
        rename = "licenseRule",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub license_rule: Option<AccessLevel>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub members: Vec<UserEntitlement>,
    #[serde(
        rename = "projectEntitlements",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub project_entitlements: Vec<ProjectEntitlement>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<group_entitlement::Status>,
}
pub mod group_entitlement {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "applyPending")]
        ApplyPending,
        #[serde(rename = "applied")]
        Applied,
        #[serde(rename = "incompatible")]
        Incompatible,
        #[serde(rename = "unableToApply")]
        UnableToApply,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GroupEntitlementOperationReference {
    #[serde(flatten)]
    pub operation_reference: OperationReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub completed: Option<bool>,
    #[serde(
        rename = "haveResultsSucceeded",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub have_results_succeeded: Option<bool>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<GroupOperationResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GroupOperationResult {
    #[serde(flatten)]
    pub base_operation_result: BaseOperationResult,
    #[serde(rename = "groupId", default, skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<GroupEntitlement>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GroupOption {
    #[serde(
        rename = "accessLevel",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub access_level: Option<AccessLevel>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<Group>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonPatchDocument {
    #[serde(flatten)]
    pub vec_json_patch_operation: Vec<JsonPatchOperation>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonPatchOperation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub op: Option<json_patch_operation::Op>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
}
pub mod json_patch_operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Op {
        #[serde(rename = "add")]
        Add,
        #[serde(rename = "remove")]
        Remove,
        #[serde(rename = "replace")]
        Replace,
        #[serde(rename = "move")]
        Move,
        #[serde(rename = "copy")]
        Copy,
        #[serde(rename = "test")]
        Test,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LicenseSummaryData {
    #[serde(flatten)]
    pub summary_data: SummaryData,
    #[serde(
        rename = "accountLicenseType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub account_license_type: Option<license_summary_data::AccountLicenseType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<i32>,
    #[serde(
        rename = "isPurchasable",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_purchasable: Option<bool>,
    #[serde(
        rename = "licenseName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub license_name: Option<String>,
    #[serde(
        rename = "msdnLicenseType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub msdn_license_type: Option<license_summary_data::MsdnLicenseType>,
    #[serde(
        rename = "nextBillingDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub next_billing_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<license_summary_data::Source>,
    #[serde(
        rename = "totalAfterNextBillingDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_after_next_billing_date: Option<i32>,
}
pub mod license_summary_data {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AccountLicenseType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "earlyAdopter")]
        EarlyAdopter,
        #[serde(rename = "express")]
        Express,
        #[serde(rename = "professional")]
        Professional,
        #[serde(rename = "advanced")]
        Advanced,
        #[serde(rename = "stakeholder")]
        Stakeholder,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MsdnLicenseType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "eligible")]
        Eligible,
        #[serde(rename = "professional")]
        Professional,
        #[serde(rename = "platforms")]
        Platforms,
        #[serde(rename = "testProfessional")]
        TestProfessional,
        #[serde(rename = "premium")]
        Premium,
        #[serde(rename = "ultimate")]
        Ultimate,
        #[serde(rename = "enterprise")]
        Enterprise,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Source {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "account")]
        Account,
        #[serde(rename = "msdn")]
        Msdn,
        #[serde(rename = "profile")]
        Profile,
        #[serde(rename = "auto")]
        Auto,
        #[serde(rename = "trial")]
        Trial,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MemberEntitlement {
    #[serde(flatten)]
    pub user_entitlement: UserEntitlement,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub member: Option<GraphMember>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MemberEntitlementOperationReference {
    #[serde(flatten)]
    pub operation_reference: OperationReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub completed: Option<bool>,
    #[serde(
        rename = "haveResultsSucceeded",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub have_results_succeeded: Option<bool>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<OperationResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MemberEntitlementsPatchResponse {
    #[serde(flatten)]
    pub member_entitlements_response_base: MemberEntitlementsResponseBase,
    #[serde(
        rename = "operationResults",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub operation_results: Vec<OperationResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MemberEntitlementsPostResponse {
    #[serde(flatten)]
    pub member_entitlements_response_base: MemberEntitlementsResponseBase,
    #[serde(
        rename = "operationResult",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub operation_result: Option<OperationResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MemberEntitlementsResponseBase {
    #[serde(rename = "isSuccess", default, skip_serializing_if = "Option::is_none")]
    pub is_success: Option<bool>,
    #[serde(
        rename = "memberEntitlement",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub member_entitlement: Option<MemberEntitlement>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "pluginId", default, skip_serializing_if = "Option::is_none")]
    pub plugin_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<operation_reference::Status>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod operation_reference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "notSet")]
        NotSet,
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "cancelled")]
        Cancelled,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperationResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub errors: Vec<serde_json::Value>,
    #[serde(rename = "isSuccess", default, skip_serializing_if = "Option::is_none")]
    pub is_success: Option<bool>,
    #[serde(rename = "memberId", default, skip_serializing_if = "Option::is_none")]
    pub member_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<MemberEntitlement>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PagedGraphMemberList {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub members: Vec<UserEntitlement>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectEntitlement {
    #[serde(
        rename = "assignmentSource",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assignment_source: Option<project_entitlement::AssignmentSource>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<Group>,
    #[serde(
        rename = "projectPermissionInherited",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_permission_inherited: Option<project_entitlement::ProjectPermissionInherited>,
    #[serde(
        rename = "projectRef",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_ref: Option<ProjectRef>,
    #[serde(rename = "teamRefs", default, skip_serializing_if = "Vec::is_empty")]
    pub team_refs: Vec<TeamRef>,
}
pub mod project_entitlement {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AssignmentSource {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "groupRule")]
        GroupRule,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ProjectPermissionInherited {
        #[serde(rename = "notSet")]
        NotSet,
        #[serde(rename = "notInherited")]
        NotInherited,
        #[serde(rename = "inherited")]
        Inherited,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SummaryData {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assigned: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub available: Option<i32>,
    #[serde(
        rename = "includedQuantity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub included_quantity: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserEntitlement {
    #[serde(
        rename = "accessLevel",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub access_level: Option<AccessLevel>,
    #[serde(
        rename = "dateCreated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_created: Option<String>,
    #[serde(
        rename = "groupAssignments",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub group_assignments: Vec<GroupEntitlement>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "lastAccessedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_accessed_date: Option<String>,
    #[serde(
        rename = "projectEntitlements",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub project_entitlements: Vec<ProjectEntitlement>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<GraphUser>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserEntitlementOperationReference {
    #[serde(flatten)]
    pub operation_reference: OperationReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub completed: Option<bool>,
    #[serde(
        rename = "haveResultsSucceeded",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub have_results_succeeded: Option<bool>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<UserEntitlementOperationResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserEntitlementOperationResult {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub errors: Vec<serde_json::Value>,
    #[serde(rename = "isSuccess", default, skip_serializing_if = "Option::is_none")]
    pub is_success: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<UserEntitlement>,
    #[serde(rename = "userId", default, skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserEntitlementsPatchResponse {
    #[serde(flatten)]
    pub user_entitlements_response_base: UserEntitlementsResponseBase,
    #[serde(
        rename = "operationResults",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub operation_results: Vec<UserEntitlementOperationResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserEntitlementsPostResponse {
    #[serde(flatten)]
    pub user_entitlements_response_base: UserEntitlementsResponseBase,
    #[serde(
        rename = "operationResult",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub operation_result: Option<UserEntitlementOperationResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserEntitlementsResponseBase {
    #[serde(rename = "isSuccess", default, skip_serializing_if = "Option::is_none")]
    pub is_success: Option<bool>,
    #[serde(
        rename = "userEntitlement",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub user_entitlement: Option<UserEntitlement>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UsersSummary {
    #[serde(
        rename = "availableAccessLevels",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub available_access_levels: Vec<AccessLevel>,
    #[serde(
        rename = "defaultAccessLevel",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_access_level: Option<AccessLevel>,
    #[serde(
        rename = "groupOptions",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub group_options: Vec<GroupOption>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub licenses: Vec<LicenseSummaryData>,
    #[serde(rename = "projectRefs", default, skip_serializing_if = "Vec::is_empty")]
    pub project_refs: Vec<ProjectRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GroupEntitlementList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GroupEntitlement>,
}
