#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CopyDashboardOptions {
    #[serde(
        rename = "copyDashboardScope",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub copy_dashboard_scope: Option<copy_dashboard_options::CopyDashboardScope>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(
        rename = "refreshInterval",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub refresh_interval: Option<i32>,
    #[serde(rename = "teamId", default, skip_serializing_if = "Option::is_none")]
    pub team_id: Option<String>,
}
pub mod copy_dashboard_options {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CopyDashboardScope {
        #[serde(rename = "collection_User")]
        CollectionUser,
        #[serde(rename = "project_Team")]
        ProjectTeam,
        #[serde(rename = "project")]
        Project,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CopyDashboardResponse {
    #[serde(
        rename = "copiedDashboard",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub copied_dashboard: Option<Dashboard>,
    #[serde(
        rename = "copyDashboardOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub copy_dashboard_options: Option<CopyDashboardOptions>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Dashboard {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(
        rename = "dashboardScope",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub dashboard_scope: Option<dashboard::DashboardScope>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "eTag", default, skip_serializing_if = "Option::is_none")]
    pub e_tag: Option<String>,
    #[serde(rename = "groupId", default, skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "ownerId", default, skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub position: Option<i32>,
    #[serde(
        rename = "refreshInterval",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub refresh_interval: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub widgets: Vec<Widget>,
}
pub mod dashboard {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DashboardScope {
        #[serde(rename = "collection_User")]
        CollectionUser,
        #[serde(rename = "project_Team")]
        ProjectTeam,
        #[serde(rename = "project")]
        Project,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DashboardGroup {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(
        rename = "dashboardEntries",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub dashboard_entries: Vec<DashboardGroupEntry>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permission: Option<dashboard_group::Permission>,
    #[serde(
        rename = "teamDashboardPermission",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_dashboard_permission: Option<dashboard_group::TeamDashboardPermission>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod dashboard_group {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Permission {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "edit")]
        Edit,
        #[serde(rename = "manage")]
        Manage,
        #[serde(rename = "managePermissions")]
        ManagePermissions,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TeamDashboardPermission {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "read")]
        Read,
        #[serde(rename = "create")]
        Create,
        #[serde(rename = "edit")]
        Edit,
        #[serde(rename = "delete")]
        Delete,
        #[serde(rename = "managePermissions")]
        ManagePermissions,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DashboardGroupEntry {
    #[serde(flatten)]
    pub dashboard: Dashboard,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DashboardGroupEntryResponse {
    #[serde(flatten)]
    pub dashboard_group_entry: DashboardGroupEntry,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DashboardResponse {
    #[serde(flatten)]
    pub dashboard_group_entry: DashboardGroupEntry,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LightboxOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub height: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resizable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub width: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SemanticVersion {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub major: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minor: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamContext {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub team: Option<String>,
    #[serde(rename = "teamId", default, skip_serializing_if = "Option::is_none")]
    pub team_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Widget {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(
        rename = "allowedSizes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub allowed_sizes: Vec<WidgetSize>,
    #[serde(
        rename = "areSettingsBlockedForUser",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub are_settings_blocked_for_user: Option<bool>,
    #[serde(
        rename = "artifactId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_id: Option<String>,
    #[serde(
        rename = "configurationContributionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub configuration_contribution_id: Option<String>,
    #[serde(
        rename = "configurationContributionRelativeId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub configuration_contribution_relative_id: Option<String>,
    #[serde(
        rename = "contentUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub content_uri: Option<String>,
    #[serde(
        rename = "contributionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub contribution_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dashboard: Option<Dashboard>,
    #[serde(rename = "eTag", default, skip_serializing_if = "Option::is_none")]
    pub e_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "isEnabled", default, skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<bool>,
    #[serde(
        rename = "isNameConfigurable",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_name_configurable: Option<bool>,
    #[serde(
        rename = "lightboxOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub lightbox_options: Option<LightboxOptions>,
    #[serde(
        rename = "loadingImageUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub loading_image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub position: Option<WidgetPosition>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<String>,
    #[serde(
        rename = "settingsVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub settings_version: Option<SemanticVersion>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<WidgetSize>,
    #[serde(rename = "typeId", default, skip_serializing_if = "Option::is_none")]
    pub type_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WidgetMetadata {
    #[serde(
        rename = "allowedSizes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub allowed_sizes: Vec<WidgetSize>,
    #[serde(
        rename = "analyticsServiceRequired",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub analytics_service_required: Option<bool>,
    #[serde(
        rename = "catalogIconUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub catalog_icon_url: Option<String>,
    #[serde(
        rename = "catalogInfoUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub catalog_info_url: Option<String>,
    #[serde(
        rename = "configurationContributionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub configuration_contribution_id: Option<String>,
    #[serde(
        rename = "configurationContributionRelativeId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub configuration_contribution_relative_id: Option<String>,
    #[serde(
        rename = "configurationRequired",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub configuration_required: Option<bool>,
    #[serde(
        rename = "contentUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub content_uri: Option<String>,
    #[serde(
        rename = "contributionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub contribution_id: Option<String>,
    #[serde(
        rename = "defaultSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_settings: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "isEnabled", default, skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<bool>,
    #[serde(
        rename = "isNameConfigurable",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_name_configurable: Option<bool>,
    #[serde(
        rename = "isVisibleFromCatalog",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_visible_from_catalog: Option<bool>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub keywords: Vec<String>,
    #[serde(
        rename = "lightboxOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub lightbox_options: Option<LightboxOptions>,
    #[serde(
        rename = "loadingImageUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub loading_image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "publisherName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_name: Option<String>,
    #[serde(
        rename = "supportedScopes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub supported_scopes: Vec<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub targets: Vec<String>,
    #[serde(rename = "typeId", default, skip_serializing_if = "Option::is_none")]
    pub type_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WidgetMetadataResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    #[serde(
        rename = "widgetMetadata",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub widget_metadata: Option<WidgetMetadata>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WidgetPosition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub column: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub row: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WidgetResponse {
    #[serde(flatten)]
    pub widget: Widget,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WidgetSize {
    #[serde(
        rename = "columnSpan",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub column_span: Option<i32>,
    #[serde(rename = "rowSpan", default, skip_serializing_if = "Option::is_none")]
    pub row_span: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WidgetsVersionedList {
    #[serde(rename = "eTag", default, skip_serializing_if = "Vec::is_empty")]
    pub e_tag: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub widgets: Vec<Widget>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WidgetTypesResponse {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    #[serde(rename = "widgetTypes", default, skip_serializing_if = "Vec::is_empty")]
    pub widget_types: Vec<WidgetMetadata>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DashboardList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Dashboard>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WidgetList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Widget>,
}
