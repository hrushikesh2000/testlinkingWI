#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccessControlEntry {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deny: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<IdentityDescriptor>,
    #[serde(
        rename = "extendedInfo",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub extended_info: Option<AceExtendedInformation>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccessControlList {
    #[serde(
        rename = "acesDictionary",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub aces_dictionary: Option<serde_json::Value>,
    #[serde(
        rename = "includeExtendedInfo",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_extended_info: Option<bool>,
    #[serde(
        rename = "inheritPermissions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub inherit_permissions: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccessControlListsCollection {
    #[serde(flatten)]
    pub vec_access_control_list: Vec<AccessControlList>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AceExtendedInformation {
    #[serde(
        rename = "effectiveAllow",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub effective_allow: Option<i32>,
    #[serde(
        rename = "effectiveDeny",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub effective_deny: Option<i32>,
    #[serde(
        rename = "inheritedAllow",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub inherited_allow: Option<i32>,
    #[serde(
        rename = "inheritedDeny",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub inherited_deny: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ActionDefinition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bit: Option<i32>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "namespaceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub namespace_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityDescriptor {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
    #[serde(
        rename = "identityType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub identity_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JObject {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub item: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PermissionEvaluation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<i32>,
    #[serde(
        rename = "securityNamespaceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub security_namespace_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PermissionEvaluationBatch {
    #[serde(
        rename = "alwaysAllowAdministrators",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub always_allow_administrators: Option<bool>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub evaluations: Vec<PermissionEvaluation>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecurityNamespaceDescription {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub actions: Vec<ActionDefinition>,
    #[serde(
        rename = "dataspaceCategory",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub dataspace_category: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(
        rename = "elementLength",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub element_length: Option<i32>,
    #[serde(
        rename = "extensionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub extension_type: Option<String>,
    #[serde(
        rename = "isRemotable",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_remotable: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "namespaceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub namespace_id: Option<String>,
    #[serde(
        rename = "readPermission",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub read_permission: Option<i32>,
    #[serde(
        rename = "separatorValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub separator_value: Option<String>,
    #[serde(
        rename = "structureValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub structure_value: Option<i32>,
    #[serde(
        rename = "systemBitMask",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub system_bit_mask: Option<i32>,
    #[serde(
        rename = "useTokenTranslator",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub use_token_translator: Option<bool>,
    #[serde(
        rename = "writePermission",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub write_permission: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccessControlEntryList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<AccessControlEntry>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccessControlListList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<AccessControlList>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecurityNamespaceDescriptionList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<SecurityNamespaceDescription>,
}
