#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AssociatedWorkItem {
    #[serde(
        rename = "assignedTo",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_to: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "webUrl", default, skip_serializing_if = "Option::is_none")]
    pub web_url: Option<String>,
    #[serde(
        rename = "workItemType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AsyncGitOperationNotification {
    #[serde(
        rename = "operationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub operation_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AsyncRefOperationCommitLevelEventNotification {
    #[serde(flatten)]
    pub async_git_operation_notification: AsyncGitOperationNotification,
    #[serde(rename = "commitId", default, skip_serializing_if = "Option::is_none")]
    pub commit_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AsyncRefOperationCompletedNotification {
    #[serde(flatten)]
    pub async_git_operation_notification: AsyncGitOperationNotification,
    #[serde(
        rename = "newRefName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub new_ref_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AsyncRefOperationConflictNotification {
    #[serde(flatten)]
    pub async_ref_operation_commit_level_event_notification:
        AsyncRefOperationCommitLevelEventNotification,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AsyncRefOperationGeneralFailureNotification {
    #[serde(flatten)]
    pub async_git_operation_notification: AsyncGitOperationNotification,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AsyncRefOperationProgressNotification {
    #[serde(flatten)]
    pub async_ref_operation_commit_level_event_notification:
        AsyncRefOperationCommitLevelEventNotification,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub progress: Option<f64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AsyncRefOperationTimeoutNotification {
    #[serde(flatten)]
    pub async_git_operation_notification: AsyncGitOperationNotification,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Attachment {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<IdentityRef>,
    #[serde(
        rename = "contentHash",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub content_hash: Option<String>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<PropertiesCollection>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AutoCompleteUpdatedEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BranchUpdatedEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
    #[serde(
        rename = "isSourceUpdate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_source_update: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Change {
    #[serde(
        rename = "changeType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_type: Option<change::ChangeType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub item: Option<String>,
    #[serde(
        rename = "newContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub new_content: Option<ItemContent>,
    #[serde(
        rename = "sourceServerItem",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_server_item: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod change {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ChangeType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "add")]
        Add,
        #[serde(rename = "edit")]
        Edit,
        #[serde(rename = "encoding")]
        Encoding,
        #[serde(rename = "rename")]
        Rename,
        #[serde(rename = "delete")]
        Delete,
        #[serde(rename = "undelete")]
        Undelete,
        #[serde(rename = "branch")]
        Branch,
        #[serde(rename = "merge")]
        Merge,
        #[serde(rename = "lock")]
        Lock,
        #[serde(rename = "rollback")]
        Rollback,
        #[serde(rename = "sourceRename")]
        SourceRename,
        #[serde(rename = "targetRename")]
        TargetRename,
        #[serde(rename = "property")]
        Property,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChangeCountDictionary {
    #[serde(flatten)]
    pub serde_json_value: serde_json::Value,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChangeList {
    #[serde(
        rename = "allChangesIncluded",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub all_changes_included: Option<bool>,
    #[serde(
        rename = "changeCounts",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_counts: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub changes: Vec<Change>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "commentTruncated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub comment_truncated: Option<bool>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub notes: Vec<CheckinNote>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(
        rename = "ownerDisplayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub owner_display_name: Option<String>,
    #[serde(rename = "ownerId", default, skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<String>,
    #[serde(rename = "sortDate", default, skip_serializing_if = "Option::is_none")]
    pub sort_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChangeListSearchCriteria {
    #[serde(
        rename = "compareVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub compare_version: Option<String>,
    #[serde(
        rename = "excludeDeletes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub exclude_deletes: Option<bool>,
    #[serde(
        rename = "followRenames",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub follow_renames: Option<bool>,
    #[serde(rename = "fromDate", default, skip_serializing_if = "Option::is_none")]
    pub from_date: Option<String>,
    #[serde(
        rename = "fromVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub from_version: Option<String>,
    #[serde(rename = "itemPath", default, skip_serializing_if = "Option::is_none")]
    pub item_path: Option<String>,
    #[serde(rename = "itemPaths", default, skip_serializing_if = "Vec::is_empty")]
    pub item_paths: Vec<String>,
    #[serde(
        rename = "itemVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub item_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub skip: Option<i32>,
    #[serde(rename = "toDate", default, skip_serializing_if = "Option::is_none")]
    pub to_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub top: Option<i32>,
    #[serde(rename = "toVersion", default, skip_serializing_if = "Option::is_none")]
    pub to_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CheckinNote {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Comment {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<IdentityRef>,
    #[serde(
        rename = "commentType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub comment_type: Option<comment::CommentType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "isDeleted", default, skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    #[serde(
        rename = "lastContentUpdatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_content_updated_date: Option<String>,
    #[serde(
        rename = "lastUpdatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_date: Option<String>,
    #[serde(
        rename = "parentCommentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub parent_comment_id: Option<i64>,
    #[serde(
        rename = "publishedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub published_date: Option<String>,
    #[serde(rename = "usersLiked", default, skip_serializing_if = "Vec::is_empty")]
    pub users_liked: Vec<IdentityRef>,
}
pub mod comment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CommentType {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "text")]
        Text,
        #[serde(rename = "codeChange")]
        CodeChange,
        #[serde(rename = "system")]
        System,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommentIterationContext {
    #[serde(
        rename = "firstComparingIteration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub first_comparing_iteration: Option<i64>,
    #[serde(
        rename = "secondComparingIteration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub second_comparing_iteration: Option<i64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommentPosition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub line: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub offset: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommentThread {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub comments: Vec<Comment>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identities: Option<serde_json::Value>,
    #[serde(rename = "isDeleted", default, skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    #[serde(
        rename = "lastUpdatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<PropertiesCollection>,
    #[serde(
        rename = "publishedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub published_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<comment_thread::Status>,
    #[serde(
        rename = "threadContext",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub thread_context: Option<CommentThreadContext>,
}
pub mod comment_thread {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "active")]
        Active,
        #[serde(rename = "fixed")]
        Fixed,
        #[serde(rename = "wontFix")]
        WontFix,
        #[serde(rename = "closed")]
        Closed,
        #[serde(rename = "byDesign")]
        ByDesign,
        #[serde(rename = "pending")]
        Pending,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommentThreadContext {
    #[serde(rename = "filePath", default, skip_serializing_if = "Option::is_none")]
    pub file_path: Option<String>,
    #[serde(
        rename = "leftFileEnd",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub left_file_end: Option<CommentPosition>,
    #[serde(
        rename = "leftFileStart",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub left_file_start: Option<CommentPosition>,
    #[serde(
        rename = "rightFileEnd",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub right_file_end: Option<CommentPosition>,
    #[serde(
        rename = "rightFileStart",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub right_file_start: Option<CommentPosition>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommentTrackingCriteria {
    #[serde(
        rename = "firstComparingIteration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub first_comparing_iteration: Option<i32>,
    #[serde(
        rename = "origFilePath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub orig_file_path: Option<String>,
    #[serde(
        rename = "origLeftFileEnd",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub orig_left_file_end: Option<CommentPosition>,
    #[serde(
        rename = "origLeftFileStart",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub orig_left_file_start: Option<CommentPosition>,
    #[serde(
        rename = "origRightFileEnd",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub orig_right_file_end: Option<CommentPosition>,
    #[serde(
        rename = "origRightFileStart",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub orig_right_file_start: Option<CommentPosition>,
    #[serde(
        rename = "secondComparingIteration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub second_comparing_iteration: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CompletionErrorsEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiscussionsUpdatedEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileContentMetadata {
    #[serde(
        rename = "contentType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encoding: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extension: Option<String>,
    #[serde(rename = "fileName", default, skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    #[serde(rename = "isBinary", default, skip_serializing_if = "Option::is_none")]
    pub is_binary: Option<bool>,
    #[serde(rename = "isImage", default, skip_serializing_if = "Option::is_none")]
    pub is_image: Option<bool>,
    #[serde(rename = "vsLink", default, skip_serializing_if = "Option::is_none")]
    pub vs_link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileDiff {
    #[serde(
        rename = "lineDiffBlocks",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub line_diff_blocks: Vec<LineDiffBlock>,
    #[serde(
        rename = "originalPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub original_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileDiffParams {
    #[serde(
        rename = "originalPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub original_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileDiffsCriteria {
    #[serde(
        rename = "baseVersionCommit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub base_version_commit: Option<String>,
    #[serde(
        rename = "fileDiffParams",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub file_diff_params: Vec<FileDiffParams>,
    #[serde(
        rename = "targetVersionCommit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_version_commit: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitAnnotatedTag {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "objectId", default, skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    #[serde(rename = "taggedBy", default, skip_serializing_if = "Option::is_none")]
    pub tagged_by: Option<GitUserDate>,
    #[serde(
        rename = "taggedObject",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub tagged_object: Option<GitObject>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitAsyncRefOperation {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(
        rename = "detailedStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub detailed_status: Option<GitAsyncRefOperationDetail>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GitAsyncRefOperationParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<git_async_ref_operation::Status>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod git_async_ref_operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "abandoned")]
        Abandoned,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitAsyncRefOperationDetail {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conflict: Option<bool>,
    #[serde(
        rename = "currentCommitId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub current_commit_id: Option<String>,
    #[serde(
        rename = "failureMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub failure_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub progress: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<git_async_ref_operation_detail::Status>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timedout: Option<bool>,
}
pub mod git_async_ref_operation_detail {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "invalidRefName")]
        InvalidRefName,
        #[serde(rename = "refNameConflict")]
        RefNameConflict,
        #[serde(rename = "createBranchPermissionRequired")]
        CreateBranchPermissionRequired,
        #[serde(rename = "writePermissionRequired")]
        WritePermissionRequired,
        #[serde(rename = "targetBranchDeleted")]
        TargetBranchDeleted,
        #[serde(rename = "gitObjectTooLarge")]
        GitObjectTooLarge,
        #[serde(rename = "operationIndentityNotFound")]
        OperationIndentityNotFound,
        #[serde(rename = "asyncOperationNotFound")]
        AsyncOperationNotFound,
        #[serde(rename = "other")]
        Other,
        #[serde(rename = "emptyCommitterSignature")]
        EmptyCommitterSignature,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitAsyncRefOperationParameters {
    #[serde(
        rename = "generatedRefName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub generated_ref_name: Option<String>,
    #[serde(
        rename = "ontoRefName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub onto_ref_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<GitRepository>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<GitAsyncRefOperationSource>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitAsyncRefOperationSource {
    #[serde(rename = "commitList", default, skip_serializing_if = "Vec::is_empty")]
    pub commit_list: Vec<GitCommitRef>,
    #[serde(
        rename = "pullRequestId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pull_request_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitBaseVersionDescriptor {
    #[serde(flatten)]
    pub git_version_descriptor: GitVersionDescriptor,
    #[serde(
        rename = "baseVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub base_version: Option<String>,
    #[serde(
        rename = "baseVersionOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub base_version_options: Option<git_base_version_descriptor::BaseVersionOptions>,
    #[serde(
        rename = "baseVersionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub base_version_type: Option<git_base_version_descriptor::BaseVersionType>,
}
pub mod git_base_version_descriptor {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum BaseVersionOptions {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "previousChange")]
        PreviousChange,
        #[serde(rename = "firstParent")]
        FirstParent,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum BaseVersionType {
        #[serde(rename = "branch")]
        Branch,
        #[serde(rename = "tag")]
        Tag,
        #[serde(rename = "commit")]
        Commit,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitBlobRef {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(rename = "objectId", default, skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitBranchStats {
    #[serde(
        rename = "aheadCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub ahead_count: Option<i32>,
    #[serde(
        rename = "behindCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub behind_count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commit: Option<GitCommitRef>,
    #[serde(
        rename = "isBaseVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_base_version: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitChange {
    #[serde(flatten)]
    pub change: Change,
    #[serde(rename = "changeId", default, skip_serializing_if = "Option::is_none")]
    pub change_id: Option<i32>,
    #[serde(
        rename = "newContentTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub new_content_template: Option<GitTemplate>,
    #[serde(
        rename = "originalPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub original_path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitCherryPick {
    #[serde(flatten)]
    pub git_async_ref_operation: GitAsyncRefOperation,
    #[serde(
        rename = "cherryPickId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub cherry_pick_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitCommit {
    #[serde(flatten)]
    pub git_commit_ref: GitCommitRef,
    #[serde(rename = "treeId", default, skip_serializing_if = "Option::is_none")]
    pub tree_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitCommitChanges {
    #[serde(
        rename = "changeCounts",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_counts: Option<ChangeCountDictionary>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub changes: Vec<GitChange>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitCommitDiffs {
    #[serde(
        rename = "aheadCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub ahead_count: Option<i32>,
    #[serde(
        rename = "allChangesIncluded",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub all_changes_included: Option<bool>,
    #[serde(
        rename = "baseCommit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub base_commit: Option<String>,
    #[serde(
        rename = "behindCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub behind_count: Option<i32>,
    #[serde(
        rename = "changeCounts",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_counts: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub changes: Vec<GitChange>,
    #[serde(
        rename = "commonCommit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub common_commit: Option<String>,
    #[serde(
        rename = "targetCommit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_commit: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitCommitRef {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<GitUserDate>,
    #[serde(
        rename = "changeCounts",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_counts: Option<ChangeCountDictionary>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub changes: Vec<GitChange>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "commentTruncated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub comment_truncated: Option<bool>,
    #[serde(rename = "commitId", default, skip_serializing_if = "Option::is_none")]
    pub commit_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub committer: Option<GitUserDate>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub parents: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub push: Option<GitPushRef>,
    #[serde(rename = "remoteUrl", default, skip_serializing_if = "Option::is_none")]
    pub remote_url: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub statuses: Vec<GitStatus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "workItems", default, skip_serializing_if = "Vec::is_empty")]
    pub work_items: Vec<ResourceRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitCommitToCreate {
    #[serde(rename = "baseRef", default, skip_serializing_if = "Option::is_none")]
    pub base_ref: Option<GitRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "pathActions", default, skip_serializing_if = "Vec::is_empty")]
    pub path_actions: Vec<GitPathAction>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitConflict {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(
        rename = "conflictId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub conflict_id: Option<i32>,
    #[serde(
        rename = "conflictPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub conflict_path: Option<String>,
    #[serde(
        rename = "conflictType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub conflict_type: Option<git_conflict::ConflictType>,
    #[serde(
        rename = "mergeBaseCommit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub merge_base_commit: Option<GitCommitRef>,
    #[serde(
        rename = "mergeOrigin",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub merge_origin: Option<GitMergeOriginRef>,
    #[serde(
        rename = "mergeSourceCommit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub merge_source_commit: Option<GitCommitRef>,
    #[serde(
        rename = "mergeTargetCommit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub merge_target_commit: Option<GitCommitRef>,
    #[serde(
        rename = "resolutionError",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resolution_error: Option<git_conflict::ResolutionError>,
    #[serde(
        rename = "resolutionStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resolution_status: Option<git_conflict::ResolutionStatus>,
    #[serde(
        rename = "resolvedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resolved_by: Option<IdentityRef>,
    #[serde(
        rename = "resolvedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resolved_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod git_conflict {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ConflictType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "addAdd")]
        AddAdd,
        #[serde(rename = "addRename")]
        AddRename,
        #[serde(rename = "deleteEdit")]
        DeleteEdit,
        #[serde(rename = "deleteRename")]
        DeleteRename,
        #[serde(rename = "directoryFile")]
        DirectoryFile,
        #[serde(rename = "directoryChild")]
        DirectoryChild,
        #[serde(rename = "editDelete")]
        EditDelete,
        #[serde(rename = "editEdit")]
        EditEdit,
        #[serde(rename = "fileDirectory")]
        FileDirectory,
        #[serde(rename = "rename1to2")]
        Rename1to2,
        #[serde(rename = "rename2to1")]
        Rename2to1,
        #[serde(rename = "renameAdd")]
        RenameAdd,
        #[serde(rename = "renameDelete")]
        RenameDelete,
        #[serde(rename = "renameRename")]
        RenameRename,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ResolutionError {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "mergeContentNotFound")]
        MergeContentNotFound,
        #[serde(rename = "pathInUse")]
        PathInUse,
        #[serde(rename = "invalidPath")]
        InvalidPath,
        #[serde(rename = "unknownAction")]
        UnknownAction,
        #[serde(rename = "unknownMergeType")]
        UnknownMergeType,
        #[serde(rename = "otherError")]
        OtherError,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ResolutionStatus {
        #[serde(rename = "unresolved")]
        Unresolved,
        #[serde(rename = "partiallyResolved")]
        PartiallyResolved,
        #[serde(rename = "resolved")]
        Resolved,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitConflictAddAdd {
    #[serde(flatten)]
    pub git_conflict: GitConflict,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GitResolutionMergeContent>,
    #[serde(
        rename = "sourceBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_blob: Option<GitBlobRef>,
    #[serde(
        rename = "targetBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_blob: Option<GitBlobRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitConflictAddRename {
    #[serde(flatten)]
    pub git_conflict: GitConflict,
    #[serde(rename = "baseBlob", default, skip_serializing_if = "Option::is_none")]
    pub base_blob: Option<GitBlobRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GitResolutionPathConflict>,
    #[serde(
        rename = "sourceBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_blob: Option<GitBlobRef>,
    #[serde(
        rename = "targetBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_blob: Option<GitBlobRef>,
    #[serde(
        rename = "targetOriginalPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_original_path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitConflictDeleteEdit {
    #[serde(flatten)]
    pub git_conflict: GitConflict,
    #[serde(rename = "baseBlob", default, skip_serializing_if = "Option::is_none")]
    pub base_blob: Option<GitBlobRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GitResolutionPickOneAction>,
    #[serde(
        rename = "targetBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_blob: Option<GitBlobRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitConflictDeleteRename {
    #[serde(flatten)]
    pub git_conflict: GitConflict,
    #[serde(rename = "baseBlob", default, skip_serializing_if = "Option::is_none")]
    pub base_blob: Option<GitBlobRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GitResolutionPickOneAction>,
    #[serde(
        rename = "targetBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_blob: Option<GitBlobRef>,
    #[serde(
        rename = "targetNewPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_new_path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitConflictDirectoryFile {
    #[serde(flatten)]
    pub git_conflict: GitConflict,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GitResolutionPathConflict>,
    #[serde(
        rename = "sourceTree",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_tree: Option<GitTreeRef>,
    #[serde(
        rename = "targetBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_blob: Option<GitBlobRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitConflictEditDelete {
    #[serde(flatten)]
    pub git_conflict: GitConflict,
    #[serde(rename = "baseBlob", default, skip_serializing_if = "Option::is_none")]
    pub base_blob: Option<GitBlobRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GitResolutionPickOneAction>,
    #[serde(
        rename = "sourceBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_blob: Option<GitBlobRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitConflictEditEdit {
    #[serde(flatten)]
    pub git_conflict: GitConflict,
    #[serde(rename = "baseBlob", default, skip_serializing_if = "Option::is_none")]
    pub base_blob: Option<GitBlobRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GitResolutionMergeContent>,
    #[serde(
        rename = "sourceBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_blob: Option<GitBlobRef>,
    #[serde(
        rename = "targetBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_blob: Option<GitBlobRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitConflictFileDirectory {
    #[serde(flatten)]
    pub git_conflict: GitConflict,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GitResolutionPathConflict>,
    #[serde(
        rename = "sourceBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_blob: Option<GitBlobRef>,
    #[serde(
        rename = "targetTree",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_tree: Option<GitTreeRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitConflictRename1to2 {
    #[serde(flatten)]
    pub git_conflict: GitConflict,
    #[serde(rename = "baseBlob", default, skip_serializing_if = "Option::is_none")]
    pub base_blob: Option<GitBlobRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GitResolutionRename1to2>,
    #[serde(
        rename = "sourceBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_blob: Option<GitBlobRef>,
    #[serde(
        rename = "sourceNewPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_new_path: Option<String>,
    #[serde(
        rename = "targetBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_blob: Option<GitBlobRef>,
    #[serde(
        rename = "targetNewPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_new_path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitConflictRename2to1 {
    #[serde(flatten)]
    pub git_conflict: GitConflict,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GitResolutionPathConflict>,
    #[serde(
        rename = "sourceNewBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_new_blob: Option<GitBlobRef>,
    #[serde(
        rename = "sourceOriginalBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_original_blob: Option<GitBlobRef>,
    #[serde(
        rename = "sourceOriginalPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_original_path: Option<String>,
    #[serde(
        rename = "targetNewBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_new_blob: Option<GitBlobRef>,
    #[serde(
        rename = "targetOriginalBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_original_blob: Option<GitBlobRef>,
    #[serde(
        rename = "targetOriginalPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_original_path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitConflictRenameAdd {
    #[serde(flatten)]
    pub git_conflict: GitConflict,
    #[serde(rename = "baseBlob", default, skip_serializing_if = "Option::is_none")]
    pub base_blob: Option<GitBlobRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GitResolutionPathConflict>,
    #[serde(
        rename = "sourceBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_blob: Option<GitBlobRef>,
    #[serde(
        rename = "sourceOriginalPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_original_path: Option<String>,
    #[serde(
        rename = "targetBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_blob: Option<GitBlobRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitConflictRenameDelete {
    #[serde(flatten)]
    pub git_conflict: GitConflict,
    #[serde(rename = "baseBlob", default, skip_serializing_if = "Option::is_none")]
    pub base_blob: Option<GitBlobRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GitResolutionPickOneAction>,
    #[serde(
        rename = "sourceBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_blob: Option<GitBlobRef>,
    #[serde(
        rename = "sourceNewPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_new_path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitConflictRenameRename {
    #[serde(flatten)]
    pub git_conflict: GitConflict,
    #[serde(rename = "baseBlob", default, skip_serializing_if = "Option::is_none")]
    pub base_blob: Option<GitBlobRef>,
    #[serde(
        rename = "originalPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub original_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GitResolutionMergeContent>,
    #[serde(
        rename = "sourceBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_blob: Option<GitBlobRef>,
    #[serde(
        rename = "targetBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_blob: Option<GitBlobRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitConflictUpdateResult {
    #[serde(
        rename = "conflictId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub conflict_id: Option<i32>,
    #[serde(
        rename = "customMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub custom_message: Option<String>,
    #[serde(
        rename = "updatedConflict",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub updated_conflict: Option<GitConflict>,
    #[serde(
        rename = "updateStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub update_status: Option<git_conflict_update_result::UpdateStatus>,
}
pub mod git_conflict_update_result {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum UpdateStatus {
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "badRequest")]
        BadRequest,
        #[serde(rename = "invalidResolution")]
        InvalidResolution,
        #[serde(rename = "unsupportedConflictType")]
        UnsupportedConflictType,
        #[serde(rename = "notFound")]
        NotFound,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitDeletedRepository {
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(rename = "deletedBy", default, skip_serializing_if = "Option::is_none")]
    pub deleted_by: Option<IdentityRef>,
    #[serde(
        rename = "deletedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deleted_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitFilePathsCollection {
    #[serde(rename = "commitId", default, skip_serializing_if = "Option::is_none")]
    pub commit_id: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub paths: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitForkOperationStatusDetail {
    #[serde(rename = "allSteps", default, skip_serializing_if = "Vec::is_empty")]
    pub all_steps: Vec<String>,
    #[serde(
        rename = "currentStep",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub current_step: Option<i32>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitForkRef {
    #[serde(flatten)]
    pub git_ref: GitRef,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<GitRepository>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitForkSyncRequest {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(
        rename = "detailedStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub detailed_status: Option<GitForkOperationStatusDetail>,
    #[serde(
        rename = "operationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub operation_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<GlobalGitRepositoryKey>,
    #[serde(
        rename = "sourceToTargetRefs",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub source_to_target_refs: Vec<SourceToTargetRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<git_fork_sync_request::Status>,
}
pub mod git_fork_sync_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "abandoned")]
        Abandoned,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitForkSyncRequestParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<GlobalGitRepositoryKey>,
    #[serde(
        rename = "sourceToTargetRefs",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub source_to_target_refs: Vec<SourceToTargetRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitForkTeamProjectReference {
    #[serde(flatten)]
    pub team_project_reference: TeamProjectReference,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitImportFailedEvent {
    #[serde(
        rename = "sourceRepositoryName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_repository_name: Option<String>,
    #[serde(
        rename = "targetRepository",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_repository: Option<GitRepository>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitImportGitSource {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub overwrite: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitImportRequest {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(
        rename = "detailedStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub detailed_status: Option<GitImportStatusDetail>,
    #[serde(
        rename = "importRequestId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub import_request_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<GitImportRequestParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<GitRepository>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<git_import_request::Status>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod git_import_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "abandoned")]
        Abandoned,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitImportRequestParameters {
    #[serde(
        rename = "deleteServiceEndpointAfterImportIsDone",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub delete_service_endpoint_after_import_is_done: Option<bool>,
    #[serde(rename = "gitSource", default, skip_serializing_if = "Option::is_none")]
    pub git_source: Option<GitImportGitSource>,
    #[serde(
        rename = "serviceEndpointId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub service_endpoint_id: Option<String>,
    #[serde(
        rename = "tfvcSource",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub tfvc_source: Option<GitImportTfvcSource>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitImportStatusDetail {
    #[serde(rename = "allSteps", default, skip_serializing_if = "Vec::is_empty")]
    pub all_steps: Vec<String>,
    #[serde(
        rename = "currentStep",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub current_step: Option<i32>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitImportSucceededEvent {
    #[serde(
        rename = "sourceRepositoryName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_repository_name: Option<String>,
    #[serde(
        rename = "targetRepository",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_repository: Option<GitRepository>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitImportTfvcSource {
    #[serde(
        rename = "importHistory",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub import_history: Option<bool>,
    #[serde(
        rename = "importHistoryDurationInDays",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub import_history_duration_in_days: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitItem {
    #[serde(flatten)]
    pub item_model: ItemModel,
    #[serde(rename = "commitId", default, skip_serializing_if = "Option::is_none")]
    pub commit_id: Option<String>,
    #[serde(
        rename = "gitObjectType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub git_object_type: Option<git_item::GitObjectType>,
    #[serde(
        rename = "latestProcessedChange",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub latest_processed_change: Option<GitCommitRef>,
    #[serde(rename = "objectId", default, skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    #[serde(
        rename = "originalObjectId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub original_object_id: Option<String>,
}
pub mod git_item {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum GitObjectType {
        #[serde(rename = "bad")]
        Bad,
        #[serde(rename = "commit")]
        Commit,
        #[serde(rename = "tree")]
        Tree,
        #[serde(rename = "blob")]
        Blob,
        #[serde(rename = "tag")]
        Tag,
        #[serde(rename = "ext2")]
        Ext2,
        #[serde(rename = "ofsDelta")]
        OfsDelta,
        #[serde(rename = "refDelta")]
        RefDelta,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitItemDescriptor {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(
        rename = "recursionLevel",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub recursion_level: Option<git_item_descriptor::RecursionLevel>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(
        rename = "versionOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub version_options: Option<git_item_descriptor::VersionOptions>,
    #[serde(
        rename = "versionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub version_type: Option<git_item_descriptor::VersionType>,
}
pub mod git_item_descriptor {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecursionLevel {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "oneLevel")]
        OneLevel,
        #[serde(rename = "oneLevelPlusNestedEmptyFolders")]
        OneLevelPlusNestedEmptyFolders,
        #[serde(rename = "full")]
        Full,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VersionOptions {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "previousChange")]
        PreviousChange,
        #[serde(rename = "firstParent")]
        FirstParent,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VersionType {
        #[serde(rename = "branch")]
        Branch,
        #[serde(rename = "tag")]
        Tag,
        #[serde(rename = "commit")]
        Commit,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitItemRequestData {
    #[serde(
        rename = "includeContentMetadata",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_content_metadata: Option<bool>,
    #[serde(
        rename = "includeLinks",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_links: Option<bool>,
    #[serde(
        rename = "itemDescriptors",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub item_descriptors: Vec<GitItemDescriptor>,
    #[serde(
        rename = "latestProcessedChange",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub latest_processed_change: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitLastChangeItem {
    #[serde(rename = "commitId", default, skip_serializing_if = "Option::is_none")]
    pub commit_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitLastChangeTreeItems {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub commits: Vec<GitCommitRef>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub items: Vec<GitLastChangeItem>,
    #[serde(
        rename = "lastExploredTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_explored_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitMerge {
    #[serde(flatten)]
    pub git_merge_parameters: GitMergeParameters,
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(
        rename = "detailedStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub detailed_status: Option<GitMergeOperationStatusDetail>,
    #[serde(
        rename = "mergeOperationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub merge_operation_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<git_merge::Status>,
}
pub mod git_merge {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "abandoned")]
        Abandoned,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitMergeOperationStatusDetail {
    #[serde(
        rename = "failureMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub failure_message: Option<String>,
    #[serde(
        rename = "mergeCommitId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub merge_commit_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitMergeOriginRef {
    #[serde(
        rename = "cherryPickId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub cherry_pick_id: Option<i32>,
    #[serde(
        rename = "pullRequestId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pull_request_id: Option<i32>,
    #[serde(rename = "revertId", default, skip_serializing_if = "Option::is_none")]
    pub revert_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitMergeParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub parents: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitObject {
    #[serde(rename = "objectId", default, skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    #[serde(
        rename = "objectType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub object_type: Option<git_object::ObjectType>,
}
pub mod git_object {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ObjectType {
        #[serde(rename = "bad")]
        Bad,
        #[serde(rename = "commit")]
        Commit,
        #[serde(rename = "tree")]
        Tree,
        #[serde(rename = "blob")]
        Blob,
        #[serde(rename = "tag")]
        Tag,
        #[serde(rename = "ext2")]
        Ext2,
        #[serde(rename = "ofsDelta")]
        OfsDelta,
        #[serde(rename = "refDelta")]
        RefDelta,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPathAction {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<git_path_action::Action>,
    #[serde(
        rename = "base64Content",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub base64_content: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(
        rename = "rawTextContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub raw_text_content: Option<String>,
    #[serde(
        rename = "targetPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_path: Option<String>,
}
pub mod git_path_action {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Action {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "edit")]
        Edit,
        #[serde(rename = "delete")]
        Delete,
        #[serde(rename = "add")]
        Add,
        #[serde(rename = "rename")]
        Rename,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPathToItemsCollection {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPolicyConfigurationResponse {
    #[serde(
        rename = "continuationToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continuation_token: Option<String>,
    #[serde(
        rename = "policyConfigurations",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub policy_configurations: Vec<PolicyConfiguration>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequest {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(
        rename = "artifactId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_id: Option<String>,
    #[serde(
        rename = "autoCompleteSetBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub auto_complete_set_by: Option<IdentityRef>,
    #[serde(rename = "closedBy", default, skip_serializing_if = "Option::is_none")]
    pub closed_by: Option<IdentityRef>,
    #[serde(
        rename = "closedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub closed_date: Option<String>,
    #[serde(
        rename = "codeReviewId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub code_review_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub commits: Vec<GitCommitRef>,
    #[serde(
        rename = "completionOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completion_options: Option<GitPullRequestCompletionOptions>,
    #[serde(
        rename = "completionQueueTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completion_queue_time: Option<String>,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "forkSource",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub fork_source: Option<GitForkRef>,
    #[serde(
        rename = "hasMultipleMergeBases",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub has_multiple_merge_bases: Option<bool>,
    #[serde(rename = "isDraft", default, skip_serializing_if = "Option::is_none")]
    pub is_draft: Option<bool>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub labels: Vec<WebApiTagDefinition>,
    #[serde(
        rename = "lastMergeCommit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_merge_commit: Option<GitCommitRef>,
    #[serde(
        rename = "lastMergeSourceCommit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_merge_source_commit: Option<GitCommitRef>,
    #[serde(
        rename = "lastMergeTargetCommit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_merge_target_commit: Option<GitCommitRef>,
    #[serde(
        rename = "mergeFailureMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub merge_failure_message: Option<String>,
    #[serde(
        rename = "mergeFailureType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub merge_failure_type: Option<git_pull_request::MergeFailureType>,
    #[serde(rename = "mergeId", default, skip_serializing_if = "Option::is_none")]
    pub merge_id: Option<String>,
    #[serde(
        rename = "mergeOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub merge_options: Option<GitPullRequestMergeOptions>,
    #[serde(
        rename = "mergeStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub merge_status: Option<git_pull_request::MergeStatus>,
    #[serde(
        rename = "pullRequestId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pull_request_id: Option<i32>,
    #[serde(rename = "remoteUrl", default, skip_serializing_if = "Option::is_none")]
    pub remote_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<GitRepository>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub reviewers: Vec<IdentityRefWithVote>,
    #[serde(
        rename = "sourceRefName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_ref_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<git_pull_request::Status>,
    #[serde(
        rename = "supportsIterations",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub supports_iterations: Option<bool>,
    #[serde(
        rename = "targetRefName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_ref_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(
        rename = "workItemRefs",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub work_item_refs: Vec<ResourceRef>,
}
pub mod git_pull_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MergeFailureType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "caseSensitive")]
        CaseSensitive,
        #[serde(rename = "objectTooLarge")]
        ObjectTooLarge,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MergeStatus {
        #[serde(rename = "notSet")]
        NotSet,
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "conflicts")]
        Conflicts,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "rejectedByPolicy")]
        RejectedByPolicy,
        #[serde(rename = "failure")]
        Failure,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "notSet")]
        NotSet,
        #[serde(rename = "active")]
        Active,
        #[serde(rename = "abandoned")]
        Abandoned,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequestChange {
    #[serde(flatten)]
    pub git_change: GitChange,
    #[serde(
        rename = "changeTrackingId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_tracking_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequestCommentThread {
    #[serde(flatten)]
    pub comment_thread: CommentThread,
    #[serde(
        rename = "pullRequestThreadContext",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pull_request_thread_context: Option<GitPullRequestCommentThreadContext>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequestCommentThreadContext {
    #[serde(
        rename = "changeTrackingId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_tracking_id: Option<i32>,
    #[serde(
        rename = "iterationContext",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub iteration_context: Option<CommentIterationContext>,
    #[serde(
        rename = "trackingCriteria",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub tracking_criteria: Option<CommentTrackingCriteria>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequestCompletionOptions {
    #[serde(
        rename = "autoCompleteIgnoreConfigIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub auto_complete_ignore_config_ids: Vec<i32>,
    #[serde(
        rename = "bypassPolicy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub bypass_policy: Option<bool>,
    #[serde(
        rename = "bypassReason",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub bypass_reason: Option<String>,
    #[serde(
        rename = "deleteSourceBranch",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub delete_source_branch: Option<bool>,
    #[serde(
        rename = "mergeCommitMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub merge_commit_message: Option<String>,
    #[serde(
        rename = "mergeStrategy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub merge_strategy: Option<git_pull_request_completion_options::MergeStrategy>,
    #[serde(
        rename = "squashMerge",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub squash_merge: Option<bool>,
    #[serde(
        rename = "transitionWorkItems",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub transition_work_items: Option<bool>,
    #[serde(
        rename = "triggeredByAutoComplete",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub triggered_by_auto_complete: Option<bool>,
}
pub mod git_pull_request_completion_options {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MergeStrategy {
        #[serde(rename = "noFastForward")]
        NoFastForward,
        #[serde(rename = "squash")]
        Squash,
        #[serde(rename = "rebase")]
        Rebase,
        #[serde(rename = "rebaseMerge")]
        RebaseMerge,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequestIteration {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<IdentityRef>,
    #[serde(rename = "changeList", default, skip_serializing_if = "Vec::is_empty")]
    pub change_list: Vec<GitPullRequestChange>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub commits: Vec<GitCommitRef>,
    #[serde(
        rename = "commonRefCommit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub common_ref_commit: Option<GitCommitRef>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "hasMoreCommits",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub has_more_commits: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "newTargetRefName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub new_target_ref_name: Option<String>,
    #[serde(
        rename = "oldTargetRefName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub old_target_ref_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub push: Option<GitPushRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<git_pull_request_iteration::Reason>,
    #[serde(
        rename = "sourceRefCommit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_ref_commit: Option<GitCommitRef>,
    #[serde(
        rename = "targetRefCommit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_ref_commit: Option<GitCommitRef>,
    #[serde(
        rename = "updatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub updated_date: Option<String>,
}
pub mod git_pull_request_iteration {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Reason {
        #[serde(rename = "push")]
        Push,
        #[serde(rename = "forcePush")]
        ForcePush,
        #[serde(rename = "create")]
        Create,
        #[serde(rename = "rebase")]
        Rebase,
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "retarget")]
        Retarget,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequestIterationChanges {
    #[serde(
        rename = "changeEntries",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub change_entries: Vec<GitPullRequestChange>,
    #[serde(rename = "nextSkip", default, skip_serializing_if = "Option::is_none")]
    pub next_skip: Option<i32>,
    #[serde(rename = "nextTop", default, skip_serializing_if = "Option::is_none")]
    pub next_top: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequestMergeOptions {
    #[serde(
        rename = "conflictAuthorshipCommits",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub conflict_authorship_commits: Option<bool>,
    #[serde(
        rename = "detectRenameFalsePositives",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub detect_rename_false_positives: Option<bool>,
    #[serde(
        rename = "disableRenames",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub disable_renames: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequestQuery {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub queries: Vec<GitPullRequestQueryInput>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequestQueryInput {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub items: Vec<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<git_pull_request_query_input::Type>,
}
pub mod git_pull_request_query_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "notSet")]
        NotSet,
        #[serde(rename = "lastMergeCommit")]
        LastMergeCommit,
        #[serde(rename = "commit")]
        Commit,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequestReviewFileContentInfo {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(rename = "shA1Hash", default, skip_serializing_if = "Option::is_none")]
    pub sh_a1_hash: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequestSearchCriteria {
    #[serde(rename = "creatorId", default, skip_serializing_if = "Option::is_none")]
    pub creator_id: Option<String>,
    #[serde(
        rename = "includeLinks",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_links: Option<bool>,
    #[serde(
        rename = "repositoryId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub repository_id: Option<String>,
    #[serde(
        rename = "reviewerId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reviewer_id: Option<String>,
    #[serde(
        rename = "sourceRefName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_ref_name: Option<String>,
    #[serde(
        rename = "sourceRepositoryId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_repository_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<git_pull_request_search_criteria::Status>,
    #[serde(
        rename = "targetRefName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_ref_name: Option<String>,
}
pub mod git_pull_request_search_criteria {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "notSet")]
        NotSet,
        #[serde(rename = "active")]
        Active,
        #[serde(rename = "abandoned")]
        Abandoned,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequestStatus {
    #[serde(flatten)]
    pub git_status: GitStatus,
    #[serde(
        rename = "iterationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub iteration_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<PropertiesCollection>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPush {
    #[serde(flatten)]
    pub git_push_ref: GitPushRef,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub commits: Vec<GitCommitRef>,
    #[serde(rename = "refUpdates", default, skip_serializing_if = "Vec::is_empty")]
    pub ref_updates: Vec<GitRefUpdate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<GitRepository>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPushEventData {
    #[serde(rename = "afterId", default, skip_serializing_if = "Option::is_none")]
    pub after_id: Option<String>,
    #[serde(rename = "beforeId", default, skip_serializing_if = "Option::is_none")]
    pub before_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branch: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub commits: Vec<GitCommit>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<GitRepository>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPushRef {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    #[serde(rename = "pushedBy", default, skip_serializing_if = "Option::is_none")]
    pub pushed_by: Option<IdentityRef>,
    #[serde(rename = "pushId", default, skip_serializing_if = "Option::is_none")]
    pub push_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPushSearchCriteria {
    #[serde(rename = "fromDate", default, skip_serializing_if = "Option::is_none")]
    pub from_date: Option<String>,
    #[serde(
        rename = "includeLinks",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_links: Option<bool>,
    #[serde(
        rename = "includeRefUpdates",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_ref_updates: Option<bool>,
    #[serde(rename = "pusherId", default, skip_serializing_if = "Option::is_none")]
    pub pusher_id: Option<String>,
    #[serde(rename = "refName", default, skip_serializing_if = "Option::is_none")]
    pub ref_name: Option<String>,
    #[serde(rename = "toDate", default, skip_serializing_if = "Option::is_none")]
    pub to_date: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitQueryBranchStatsCriteria {
    #[serde(
        rename = "baseCommit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub base_commit: Option<GitVersionDescriptor>,
    #[serde(
        rename = "targetCommits",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub target_commits: Vec<GitVersionDescriptor>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitQueryCommitsCriteria {
    #[serde(rename = "$skip", default, skip_serializing_if = "Option::is_none")]
    pub skip: Option<i32>,
    #[serde(rename = "$top", default, skip_serializing_if = "Option::is_none")]
    pub top: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<String>,
    #[serde(
        rename = "compareVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub compare_version: Option<GitVersionDescriptor>,
    #[serde(
        rename = "excludeDeletes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub exclude_deletes: Option<bool>,
    #[serde(
        rename = "fromCommitId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub from_commit_id: Option<String>,
    #[serde(rename = "fromDate", default, skip_serializing_if = "Option::is_none")]
    pub from_date: Option<String>,
    #[serde(
        rename = "historyMode",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub history_mode: Option<git_query_commits_criteria::HistoryMode>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub ids: Vec<String>,
    #[serde(
        rename = "includeLinks",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_links: Option<bool>,
    #[serde(
        rename = "includePushData",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_push_data: Option<bool>,
    #[serde(
        rename = "includeUserImageUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_user_image_url: Option<bool>,
    #[serde(
        rename = "includeWorkItems",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_work_items: Option<bool>,
    #[serde(rename = "itemPath", default, skip_serializing_if = "Option::is_none")]
    pub item_path: Option<String>,
    #[serde(
        rename = "itemVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub item_version: Option<GitVersionDescriptor>,
    #[serde(
        rename = "showOldestCommitsFirst",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub show_oldest_commits_first: Option<bool>,
    #[serde(
        rename = "toCommitId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub to_commit_id: Option<String>,
    #[serde(rename = "toDate", default, skip_serializing_if = "Option::is_none")]
    pub to_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}
pub mod git_query_commits_criteria {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum HistoryMode {
        #[serde(rename = "simplifiedHistory")]
        SimplifiedHistory,
        #[serde(rename = "firstParent")]
        FirstParent,
        #[serde(rename = "fullHistory")]
        FullHistory,
        #[serde(rename = "fullHistorySimplifyMerges")]
        FullHistorySimplifyMerges,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitQueryRefsCriteria {
    #[serde(rename = "commitIds", default, skip_serializing_if = "Vec::is_empty")]
    pub commit_ids: Vec<String>,
    #[serde(rename = "refNames", default, skip_serializing_if = "Vec::is_empty")]
    pub ref_names: Vec<String>,
    #[serde(
        rename = "searchType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub search_type: Option<git_query_refs_criteria::SearchType>,
}
pub mod git_query_refs_criteria {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SearchType {
        #[serde(rename = "exact")]
        Exact,
        #[serde(rename = "startsWith")]
        StartsWith,
        #[serde(rename = "contains")]
        Contains,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitRecycleBinRepositoryDetails {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitRef {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub creator: Option<IdentityRef>,
    #[serde(rename = "isLocked", default, skip_serializing_if = "Option::is_none")]
    pub is_locked: Option<bool>,
    #[serde(
        rename = "isLockedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_locked_by: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "objectId", default, skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    #[serde(
        rename = "peeledObjectId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub peeled_object_id: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub statuses: Vec<GitStatus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitRefFavorite {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "identityId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub identity_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "repositoryId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub repository_id: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<git_ref_favorite::Type>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod git_ref_favorite {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "invalid")]
        Invalid,
        #[serde(rename = "folder")]
        Folder,
        #[serde(rename = "ref")]
        Ref,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitRefUpdate {
    #[serde(rename = "isLocked", default, skip_serializing_if = "Option::is_none")]
    pub is_locked: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "newObjectId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub new_object_id: Option<String>,
    #[serde(
        rename = "oldObjectId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub old_object_id: Option<String>,
    #[serde(
        rename = "repositoryId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub repository_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitRefUpdateResult {
    #[serde(
        rename = "customMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub custom_message: Option<String>,
    #[serde(rename = "isLocked", default, skip_serializing_if = "Option::is_none")]
    pub is_locked: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "newObjectId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub new_object_id: Option<String>,
    #[serde(
        rename = "oldObjectId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub old_object_id: Option<String>,
    #[serde(
        rename = "rejectedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub rejected_by: Option<String>,
    #[serde(
        rename = "repositoryId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub repository_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub success: Option<bool>,
    #[serde(
        rename = "updateStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub update_status: Option<git_ref_update_result::UpdateStatus>,
}
pub mod git_ref_update_result {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum UpdateStatus {
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "forcePushRequired")]
        ForcePushRequired,
        #[serde(rename = "staleOldObjectId")]
        StaleOldObjectId,
        #[serde(rename = "invalidRefName")]
        InvalidRefName,
        #[serde(rename = "unprocessed")]
        Unprocessed,
        #[serde(rename = "unresolvableToCommit")]
        UnresolvableToCommit,
        #[serde(rename = "writePermissionRequired")]
        WritePermissionRequired,
        #[serde(rename = "manageNotePermissionRequired")]
        ManageNotePermissionRequired,
        #[serde(rename = "createBranchPermissionRequired")]
        CreateBranchPermissionRequired,
        #[serde(rename = "createTagPermissionRequired")]
        CreateTagPermissionRequired,
        #[serde(rename = "rejectedByPlugin")]
        RejectedByPlugin,
        #[serde(rename = "locked")]
        Locked,
        #[serde(rename = "refNameConflict")]
        RefNameConflict,
        #[serde(rename = "rejectedByPolicy")]
        RejectedByPolicy,
        #[serde(rename = "succeededNonExistentRef")]
        SucceededNonExistentRef,
        #[serde(rename = "succeededCorruptRef")]
        SucceededCorruptRef,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitRepository {
    #[serde(rename = "_links")]
    pub links: serde_json::Value,
    #[serde(rename = "defaultBranch")]
    pub default_branch: String,
    pub id: String,
    #[serde(rename = "isDisabled")]
    pub is_disabled: bool,
    #[serde(rename = "isFork", default, skip_serializing_if = "Option::is_none")]
    pub is_fork: Option<bool>,
    pub name: String,
    #[serde(
        rename = "parentRepository",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub parent_repository: Option<GitRepositoryRef>,
    pub project: TeamProjectReference,
    #[serde(rename = "remoteUrl")]
    pub remote_url: String,
    pub size: i64,
    #[serde(rename = "sshUrl")]
    pub ssh_url: String,
    pub url: String,
    #[serde(
        rename = "validRemoteUrls",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub valid_remote_urls: Vec<String>,
    #[serde(rename = "webUrl")]
    pub web_url: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitRepositoryCreateOptions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "parentRepository",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub parent_repository: Option<GitRepositoryRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitRepositoryRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collection: Option<TeamProjectCollectionReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "isFork", default, skip_serializing_if = "Option::is_none")]
    pub is_fork: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
    #[serde(rename = "remoteUrl", default, skip_serializing_if = "Option::is_none")]
    pub remote_url: Option<String>,
    #[serde(rename = "sshUrl", default, skip_serializing_if = "Option::is_none")]
    pub ssh_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitRepositoryStats {
    #[serde(
        rename = "activePullRequestsCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub active_pull_requests_count: Option<i32>,
    #[serde(
        rename = "branchesCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub branches_count: Option<i32>,
    #[serde(
        rename = "commitsCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub commits_count: Option<i32>,
    #[serde(
        rename = "repositoryId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub repository_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitResolution {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<IdentityRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitResolutionMergeContent {
    #[serde(flatten)]
    pub git_resolution: GitResolution,
    #[serde(rename = "mergeType", default, skip_serializing_if = "Option::is_none")]
    pub merge_type: Option<git_resolution_merge_content::MergeType>,
    #[serde(
        rename = "userMergedBlob",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub user_merged_blob: Option<GitBlobRef>,
    #[serde(
        rename = "userMergedContent",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub user_merged_content: Vec<String>,
}
pub mod git_resolution_merge_content {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MergeType {
        #[serde(rename = "undecided")]
        Undecided,
        #[serde(rename = "takeSourceContent")]
        TakeSourceContent,
        #[serde(rename = "takeTargetContent")]
        TakeTargetContent,
        #[serde(rename = "autoMerged")]
        AutoMerged,
        #[serde(rename = "userMerged")]
        UserMerged,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitResolutionPathConflict {
    #[serde(flatten)]
    pub git_resolution: GitResolution,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<git_resolution_path_conflict::Action>,
    #[serde(
        rename = "renamePath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub rename_path: Option<String>,
}
pub mod git_resolution_path_conflict {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Action {
        #[serde(rename = "undecided")]
        Undecided,
        #[serde(rename = "keepSourceRenameTarget")]
        KeepSourceRenameTarget,
        #[serde(rename = "keepSourceDeleteTarget")]
        KeepSourceDeleteTarget,
        #[serde(rename = "keepTargetRenameSource")]
        KeepTargetRenameSource,
        #[serde(rename = "keepTargetDeleteSource")]
        KeepTargetDeleteSource,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitResolutionPickOneAction {
    #[serde(flatten)]
    pub git_resolution: GitResolution,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<git_resolution_pick_one_action::Action>,
}
pub mod git_resolution_pick_one_action {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Action {
        #[serde(rename = "undecided")]
        Undecided,
        #[serde(rename = "pickSourceAction")]
        PickSourceAction,
        #[serde(rename = "pickTargetAction")]
        PickTargetAction,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitResolutionRename1to2 {
    #[serde(flatten)]
    pub git_resolution_merge_content: GitResolutionMergeContent,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<git_resolution_rename1to2::Action>,
}
pub mod git_resolution_rename1to2 {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Action {
        #[serde(rename = "undecided")]
        Undecided,
        #[serde(rename = "keepSourcePath")]
        KeepSourcePath,
        #[serde(rename = "keepTargetPath")]
        KeepTargetPath,
        #[serde(rename = "keepBothFiles")]
        KeepBothFiles,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitRevert {
    #[serde(flatten)]
    pub git_async_ref_operation: GitAsyncRefOperation,
    #[serde(rename = "revertId", default, skip_serializing_if = "Option::is_none")]
    pub revert_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitStatus {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<GitStatusContext>,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<git_status::State>,
    #[serde(rename = "targetUrl", default, skip_serializing_if = "Option::is_none")]
    pub target_url: Option<String>,
    #[serde(
        rename = "updatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub updated_date: Option<String>,
}
pub mod git_status {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "notSet")]
        NotSet,
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "error")]
        Error,
        #[serde(rename = "notApplicable")]
        NotApplicable,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitStatusContext {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub genre: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitSuggestion {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitTargetVersionDescriptor {
    #[serde(flatten)]
    pub git_version_descriptor: GitVersionDescriptor,
    #[serde(
        rename = "targetVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_version: Option<String>,
    #[serde(
        rename = "targetVersionOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_version_options: Option<git_target_version_descriptor::TargetVersionOptions>,
    #[serde(
        rename = "targetVersionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_version_type: Option<git_target_version_descriptor::TargetVersionType>,
}
pub mod git_target_version_descriptor {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TargetVersionOptions {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "previousChange")]
        PreviousChange,
        #[serde(rename = "firstParent")]
        FirstParent,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TargetVersionType {
        #[serde(rename = "branch")]
        Branch,
        #[serde(rename = "tag")]
        Tag,
        #[serde(rename = "commit")]
        Commit,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitTreeDiff {
    #[serde(
        rename = "baseTreeId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub base_tree_id: Option<String>,
    #[serde(rename = "diffEntries", default, skip_serializing_if = "Vec::is_empty")]
    pub diff_entries: Vec<GitTreeDiffEntry>,
    #[serde(
        rename = "targetTreeId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_tree_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitTreeDiffEntry {
    #[serde(
        rename = "baseObjectId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub base_object_id: Option<String>,
    #[serde(
        rename = "changeType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_type: Option<git_tree_diff_entry::ChangeType>,
    #[serde(
        rename = "objectType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub object_type: Option<git_tree_diff_entry::ObjectType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(
        rename = "targetObjectId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_object_id: Option<String>,
}
pub mod git_tree_diff_entry {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ChangeType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "add")]
        Add,
        #[serde(rename = "edit")]
        Edit,
        #[serde(rename = "encoding")]
        Encoding,
        #[serde(rename = "rename")]
        Rename,
        #[serde(rename = "delete")]
        Delete,
        #[serde(rename = "undelete")]
        Undelete,
        #[serde(rename = "branch")]
        Branch,
        #[serde(rename = "merge")]
        Merge,
        #[serde(rename = "lock")]
        Lock,
        #[serde(rename = "rollback")]
        Rollback,
        #[serde(rename = "sourceRename")]
        SourceRename,
        #[serde(rename = "targetRename")]
        TargetRename,
        #[serde(rename = "property")]
        Property,
        #[serde(rename = "all")]
        All,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ObjectType {
        #[serde(rename = "bad")]
        Bad,
        #[serde(rename = "commit")]
        Commit,
        #[serde(rename = "tree")]
        Tree,
        #[serde(rename = "blob")]
        Blob,
        #[serde(rename = "tag")]
        Tag,
        #[serde(rename = "ext2")]
        Ext2,
        #[serde(rename = "ofsDelta")]
        OfsDelta,
        #[serde(rename = "refDelta")]
        RefDelta,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitTreeDiffResponse {
    #[serde(
        rename = "continuationToken",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub continuation_token: Vec<String>,
    #[serde(rename = "treeDiff", default, skip_serializing_if = "Option::is_none")]
    pub tree_diff: Option<GitTreeDiff>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitTreeEntryRef {
    #[serde(
        rename = "gitObjectType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub git_object_type: Option<git_tree_entry_ref::GitObjectType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(rename = "objectId", default, skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    #[serde(
        rename = "relativePath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub relative_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod git_tree_entry_ref {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum GitObjectType {
        #[serde(rename = "bad")]
        Bad,
        #[serde(rename = "commit")]
        Commit,
        #[serde(rename = "tree")]
        Tree,
        #[serde(rename = "blob")]
        Blob,
        #[serde(rename = "tag")]
        Tag,
        #[serde(rename = "ext2")]
        Ext2,
        #[serde(rename = "ofsDelta")]
        OfsDelta,
        #[serde(rename = "refDelta")]
        RefDelta,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitTreeRef {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(rename = "objectId", default, skip_serializing_if = "Option::is_none")]
    pub object_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(rename = "treeEntries", default, skip_serializing_if = "Vec::is_empty")]
    pub tree_entries: Vec<GitTreeEntryRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitUserDate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitVersionDescriptor {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(
        rename = "versionOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub version_options: Option<git_version_descriptor::VersionOptions>,
    #[serde(
        rename = "versionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub version_type: Option<git_version_descriptor::VersionType>,
}
pub mod git_version_descriptor {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VersionOptions {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "previousChange")]
        PreviousChange,
        #[serde(rename = "firstParent")]
        FirstParent,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VersionType {
        #[serde(rename = "branch")]
        Branch,
        #[serde(rename = "tag")]
        Tag,
        #[serde(rename = "commit")]
        Commit,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GlobalGitRepositoryKey {
    #[serde(
        rename = "collectionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub collection_id: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(
        rename = "repositoryId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub repository_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectBase {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HistoryEntry {
    #[serde(
        rename = "changeList",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_list: Option<ChangeList>,
    #[serde(
        rename = "itemChangeType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub item_change_type: Option<history_entry::ItemChangeType>,
    #[serde(
        rename = "serverItem",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub server_item: Option<String>,
}
pub mod history_entry {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ItemChangeType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "add")]
        Add,
        #[serde(rename = "edit")]
        Edit,
        #[serde(rename = "encoding")]
        Encoding,
        #[serde(rename = "rename")]
        Rename,
        #[serde(rename = "delete")]
        Delete,
        #[serde(rename = "undelete")]
        Undelete,
        #[serde(rename = "branch")]
        Branch,
        #[serde(rename = "merge")]
        Merge,
        #[serde(rename = "lock")]
        Lock,
        #[serde(rename = "rollback")]
        Rollback,
        #[serde(rename = "sourceRename")]
        SourceRename,
        #[serde(rename = "targetRename")]
        TargetRename,
        #[serde(rename = "property")]
        Property,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityRef {
    #[serde(flatten)]
    pub graph_subject_base: GraphSubjectBase,
    #[serde(
        rename = "directoryAlias",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub directory_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inactive: Option<bool>,
    #[serde(
        rename = "isAadIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_aad_identity: Option<bool>,
    #[serde(
        rename = "isContainer",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_container: Option<bool>,
    #[serde(
        rename = "isDeletedInOrigin",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_deleted_in_origin: Option<bool>,
    #[serde(
        rename = "profileUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub profile_url: Option<String>,
    #[serde(
        rename = "uniqueName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityRefWithVote {
    #[serde(flatten)]
    pub identity_ref: IdentityRef,
    #[serde(
        rename = "hasDeclined",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub has_declined: Option<bool>,
    #[serde(rename = "isFlagged", default, skip_serializing_if = "Option::is_none")]
    pub is_flagged: Option<bool>,
    #[serde(
        rename = "isRequired",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_required: Option<bool>,
    #[serde(
        rename = "reviewerUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reviewer_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vote: Option<i64>,
    #[serde(rename = "votedFor", default, skip_serializing_if = "Vec::is_empty")]
    pub voted_for: Vec<IdentityRefWithVote>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImportRepositoryValidation {
    #[serde(rename = "gitSource", default, skip_serializing_if = "Option::is_none")]
    pub git_source: Option<GitImportGitSource>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(
        rename = "tfvcSource",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub tfvc_source: Option<GitImportTfvcSource>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IncludedGitCommit {
    #[serde(rename = "commitId", default, skip_serializing_if = "Option::is_none")]
    pub commit_id: Option<String>,
    #[serde(
        rename = "commitTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub commit_time: Option<String>,
    #[serde(
        rename = "parentCommitIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub parent_commit_ids: Vec<String>,
    #[serde(
        rename = "repositoryId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub repository_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IsDraftUpdatedEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ItemContent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(
        rename = "contentType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub content_type: Option<item_content::ContentType>,
}
pub mod item_content {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ContentType {
        #[serde(rename = "rawText")]
        RawText,
        #[serde(rename = "base64Encoded")]
        Base64Encoded,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ItemDetailsOptions {
    #[serde(
        rename = "includeContentMetadata",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_content_metadata: Option<bool>,
    #[serde(
        rename = "recursionLevel",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub recursion_level: Option<item_details_options::RecursionLevel>,
}
pub mod item_details_options {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecursionLevel {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "oneLevel")]
        OneLevel,
        #[serde(rename = "oneLevelPlusNestedEmptyFolders")]
        OneLevelPlusNestedEmptyFolders,
        #[serde(rename = "full")]
        Full,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ItemModel {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(
        rename = "contentMetadata",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub content_metadata: Option<FileContentMetadata>,
    #[serde(rename = "isFolder", default, skip_serializing_if = "Option::is_none")]
    pub is_folder: Option<bool>,
    #[serde(rename = "isSymLink", default, skip_serializing_if = "Option::is_none")]
    pub is_sym_link: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonPatchDocument {
    #[serde(flatten)]
    pub vec_json_patch_operation: Vec<JsonPatchOperation>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonPatchOperation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub op: Option<json_patch_operation::Op>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
}
pub mod json_patch_operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Op {
        #[serde(rename = "add")]
        Add,
        #[serde(rename = "remove")]
        Remove,
        #[serde(rename = "replace")]
        Replace,
        #[serde(rename = "move")]
        Move,
        #[serde(rename = "copy")]
        Copy,
        #[serde(rename = "test")]
        Test,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LabelsUpdatedEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LineDiffBlock {
    #[serde(
        rename = "changeType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_type: Option<line_diff_block::ChangeType>,
    #[serde(
        rename = "modifiedLineNumberStart",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_line_number_start: Option<i32>,
    #[serde(
        rename = "modifiedLinesCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_lines_count: Option<i32>,
    #[serde(
        rename = "originalLineNumberStart",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub original_line_number_start: Option<i32>,
    #[serde(
        rename = "originalLinesCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub original_lines_count: Option<i32>,
}
pub mod line_diff_block {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ChangeType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "add")]
        Add,
        #[serde(rename = "delete")]
        Delete,
        #[serde(rename = "edit")]
        Edit,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MergeCompletedEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyConfiguration {
    #[serde(flatten)]
    pub versioned_policy_configuration_ref: VersionedPolicyConfigurationRef,
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(
        rename = "isBlocking",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_blocking: Option<bool>,
    #[serde(rename = "isDeleted", default, skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    #[serde(rename = "isEnabled", default, skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<bool>,
    #[serde(
        rename = "isEnterpriseManaged",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_enterprise_managed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyConfigurationRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<PolicyTypeRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyEvaluationUpdatedEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyTypeRef {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PropertiesCollection {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub item: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub keys: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub values: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PullRequestCreatedEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PullRequestTabExtensionConfig {
    #[serde(
        rename = "pullRequestId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pull_request_id: Option<i32>,
    #[serde(
        rename = "repositoryId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub repository_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RealTimePullRequestEvent {
    #[serde(rename = "eventId", default, skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    #[serde(
        rename = "pullRequestId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pull_request_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commits: Option<Link>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub items: Option<Link>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<Link>,
    #[serde(
        rename = "pullRequests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pull_requests: Option<Link>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pushes: Option<Link>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub refs: Option<Link>,
    #[serde(rename = "self", default, skip_serializing_if = "Option::is_none")]
    pub self_: Option<Link>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssh: Option<Link>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub web: Option<Link>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RetargetEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReviewersUpdatedEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReviewersVotesResetEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReviewerVoteUpdatedEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShareNotificationContext {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub receivers: Vec<IdentityRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceToTargetRef {
    #[serde(rename = "sourceRef", default, skip_serializing_if = "Option::is_none")]
    pub source_ref: Option<String>,
    #[serde(rename = "targetRef", default, skip_serializing_if = "Option::is_none")]
    pub target_ref: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StatusAddedEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StatusesDeletedEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StatusUpdatedEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SupportedIde {
    #[serde(
        rename = "downloadUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub download_url: Option<String>,
    #[serde(rename = "ideType", default, skip_serializing_if = "Option::is_none")]
    pub ide_type: Option<supported_ide::IdeType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "protocolHandlerUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub protocol_handler_url: Option<String>,
    #[serde(
        rename = "supportedPlatforms",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub supported_platforms: Vec<String>,
}
pub mod supported_ide {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum IdeType {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "androidStudio")]
        AndroidStudio,
        #[serde(rename = "appCode")]
        AppCode,
        #[serde(rename = "cLion")]
        CLion,
        #[serde(rename = "dataGrip")]
        DataGrip,
        #[serde(rename = "eclipse")]
        Eclipse,
        #[serde(rename = "intelliJ")]
        IntelliJ,
        #[serde(rename = "mps")]
        Mps,
        #[serde(rename = "phpStorm")]
        PhpStorm,
        #[serde(rename = "pyCharm")]
        PyCharm,
        #[serde(rename = "rubyMine")]
        RubyMine,
        #[serde(rename = "tower")]
        Tower,
        #[serde(rename = "visualStudio")]
        VisualStudio,
        #[serde(rename = "vsCode")]
        VsCode,
        #[serde(rename = "webStorm")]
        WebStorm,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamProjectCollectionReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamProjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub abbreviation: Option<String>,
    #[serde(
        rename = "defaultTeamImageUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_team_image_url: Option<String>,
    pub description: String,
    pub id: String,
    #[serde(rename = "lastUpdateTime")]
    pub last_update_time: String,
    pub name: String,
    pub revision: i64,
    pub state: team_project_reference::State,
    pub url: String,
    pub visibility: team_project_reference::Visibility,
}
pub mod team_project_reference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "deleting")]
        Deleting,
        #[serde(rename = "new")]
        New,
        #[serde(rename = "wellFormed")]
        WellFormed,
        #[serde(rename = "createPending")]
        CreatePending,
        #[serde(rename = "all")]
        All,
        #[serde(rename = "unchanged")]
        Unchanged,
        #[serde(rename = "deleted")]
        Deleted,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Visibility {
        #[serde(rename = "private")]
        Private,
        #[serde(rename = "public")]
        Public,
        #[serde(rename = "organization")]
        Organization,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcBranch {
    #[serde(flatten)]
    pub tfvc_branch_ref: TfvcBranchRef,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub children: Vec<TfvcBranch>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub mappings: Vec<TfvcBranchMapping>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<TfvcShallowBranchRef>,
    #[serde(
        rename = "relatedBranches",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub related_branches: Vec<TfvcShallowBranchRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcBranchMapping {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub depth: Option<String>,
    #[serde(
        rename = "serverItem",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub server_item: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcBranchRef {
    #[serde(flatten)]
    pub tfvc_shallow_branch_ref: TfvcShallowBranchRef,
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "isDeleted", default, skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcChange {
    #[serde(flatten)]
    pub change: Change,
    #[serde(
        rename = "mergeSources",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub merge_sources: Vec<TfvcMergeSource>,
    #[serde(
        rename = "pendingVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pending_version: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcChangeset {
    #[serde(flatten)]
    pub tfvc_changeset_ref: TfvcChangesetRef,
    #[serde(rename = "accountId", default, skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub changes: Vec<TfvcChange>,
    #[serde(
        rename = "checkinNotes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub checkin_notes: Vec<CheckinNote>,
    #[serde(
        rename = "collectionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub collection_id: Option<String>,
    #[serde(
        rename = "hasMoreChanges",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub has_more_changes: Option<bool>,
    #[serde(
        rename = "policyOverride",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub policy_override: Option<TfvcPolicyOverrideInfo>,
    #[serde(
        rename = "teamProjectIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub team_project_ids: Vec<String>,
    #[serde(rename = "workItems", default, skip_serializing_if = "Vec::is_empty")]
    pub work_items: Vec<AssociatedWorkItem>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcChangesetRef {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<IdentityRef>,
    #[serde(
        rename = "changesetId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub changeset_id: Option<i32>,
    #[serde(
        rename = "checkedInBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub checked_in_by: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "commentTruncated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub comment_truncated: Option<bool>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcChangesetSearchCriteria {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<String>,
    #[serde(
        rename = "followRenames",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub follow_renames: Option<bool>,
    #[serde(rename = "fromDate", default, skip_serializing_if = "Option::is_none")]
    pub from_date: Option<String>,
    #[serde(rename = "fromId", default, skip_serializing_if = "Option::is_none")]
    pub from_id: Option<i32>,
    #[serde(
        rename = "includeLinks",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_links: Option<bool>,
    #[serde(rename = "itemPath", default, skip_serializing_if = "Option::is_none")]
    pub item_path: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub mappings: Vec<TfvcMappingFilter>,
    #[serde(rename = "toDate", default, skip_serializing_if = "Option::is_none")]
    pub to_date: Option<String>,
    #[serde(rename = "toId", default, skip_serializing_if = "Option::is_none")]
    pub to_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcChangesetsRequestData {
    #[serde(
        rename = "changesetIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub changeset_ids: Vec<i32>,
    #[serde(
        rename = "commentLength",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub comment_length: Option<i32>,
    #[serde(
        rename = "includeLinks",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_links: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcCheckinEventData {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub changeset: Option<TfvcChangeset>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcHistoryEntry {
    #[serde(flatten)]
    pub history_entry: HistoryEntry,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encoding: Option<i32>,
    #[serde(rename = "fileId", default, skip_serializing_if = "Option::is_none")]
    pub file_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcItem {
    #[serde(flatten)]
    pub item_model: ItemModel,
    #[serde(
        rename = "changeDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_date: Option<String>,
    #[serde(
        rename = "deletionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deletion_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encoding: Option<i32>,
    #[serde(rename = "hashValue", default, skip_serializing_if = "Option::is_none")]
    pub hash_value: Option<String>,
    #[serde(rename = "isBranch", default, skip_serializing_if = "Option::is_none")]
    pub is_branch: Option<bool>,
    #[serde(
        rename = "isPendingChange",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_pending_change: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcItemDescriptor {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(
        rename = "recursionLevel",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub recursion_level: Option<tfvc_item_descriptor::RecursionLevel>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(
        rename = "versionOption",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub version_option: Option<tfvc_item_descriptor::VersionOption>,
    #[serde(
        rename = "versionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub version_type: Option<tfvc_item_descriptor::VersionType>,
}
pub mod tfvc_item_descriptor {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RecursionLevel {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "oneLevel")]
        OneLevel,
        #[serde(rename = "oneLevelPlusNestedEmptyFolders")]
        OneLevelPlusNestedEmptyFolders,
        #[serde(rename = "full")]
        Full,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VersionOption {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "previous")]
        Previous,
        #[serde(rename = "useRename")]
        UseRename,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VersionType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "changeset")]
        Changeset,
        #[serde(rename = "shelveset")]
        Shelveset,
        #[serde(rename = "change")]
        Change,
        #[serde(rename = "date")]
        Date,
        #[serde(rename = "latest")]
        Latest,
        #[serde(rename = "tip")]
        Tip,
        #[serde(rename = "mergeSource")]
        MergeSource,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcItemPreviousHash {
    #[serde(flatten)]
    pub tfvc_item: TfvcItem,
    #[serde(
        rename = "previousHashValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub previous_hash_value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcItemRequestData {
    #[serde(
        rename = "includeContentMetadata",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_content_metadata: Option<bool>,
    #[serde(
        rename = "includeLinks",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_links: Option<bool>,
    #[serde(
        rename = "itemDescriptors",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub item_descriptors: Vec<TfvcItemDescriptor>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcLabel {
    #[serde(flatten)]
    pub tfvc_label_ref: TfvcLabelRef,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub items: Vec<TfvcItem>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcLabelRef {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "labelScope",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub label_scope: Option<String>,
    #[serde(
        rename = "modifiedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcLabelRequestData {
    #[serde(
        rename = "includeLinks",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_links: Option<bool>,
    #[serde(
        rename = "itemLabelFilter",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub item_label_filter: Option<String>,
    #[serde(
        rename = "labelScope",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub label_scope: Option<String>,
    #[serde(
        rename = "maxItemCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_item_count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcMappingFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<bool>,
    #[serde(
        rename = "serverPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub server_path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcMergeSource {
    #[serde(rename = "isRename", default, skip_serializing_if = "Option::is_none")]
    pub is_rename: Option<bool>,
    #[serde(
        rename = "serverItem",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub server_item: Option<String>,
    #[serde(
        rename = "versionFrom",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub version_from: Option<i32>,
    #[serde(rename = "versionTo", default, skip_serializing_if = "Option::is_none")]
    pub version_to: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcPolicyFailureInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(
        rename = "policyName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub policy_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcPolicyOverrideInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "policyFailures",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub policy_failures: Vec<TfvcPolicyFailureInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcShallowBranchRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcShelveset {
    #[serde(flatten)]
    pub tfvc_shelveset_ref: TfvcShelvesetRef,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub changes: Vec<TfvcChange>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub notes: Vec<CheckinNote>,
    #[serde(
        rename = "policyOverride",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub policy_override: Option<TfvcPolicyOverrideInfo>,
    #[serde(rename = "workItems", default, skip_serializing_if = "Vec::is_empty")]
    pub work_items: Vec<AssociatedWorkItem>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcShelvesetRef {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "commentTruncated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub comment_truncated: Option<bool>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcShelvesetRequestData {
    #[serde(
        rename = "includeDetails",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_details: Option<bool>,
    #[serde(
        rename = "includeLinks",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_links: Option<bool>,
    #[serde(
        rename = "includeWorkItems",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_work_items: Option<bool>,
    #[serde(
        rename = "maxChangeCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_change_count: Option<i32>,
    #[serde(
        rename = "maxCommentLength",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_comment_length: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcStatistics {
    #[serde(
        rename = "changesetId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub changeset_id: Option<i32>,
    #[serde(
        rename = "fileCountTotal",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub file_count_total: Option<i64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcVersionDescriptor {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(
        rename = "versionOption",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub version_option: Option<tfvc_version_descriptor::VersionOption>,
    #[serde(
        rename = "versionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub version_type: Option<tfvc_version_descriptor::VersionType>,
}
pub mod tfvc_version_descriptor {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VersionOption {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "previous")]
        Previous,
        #[serde(rename = "useRename")]
        UseRename,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum VersionType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "changeset")]
        Changeset,
        #[serde(rename = "shelveset")]
        Shelveset,
        #[serde(rename = "change")]
        Change,
        #[serde(rename = "date")]
        Date,
        #[serde(rename = "latest")]
        Latest,
        #[serde(rename = "tip")]
        Tip,
        #[serde(rename = "mergeSource")]
        MergeSource,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TitleDescriptionUpdatedEvent {
    #[serde(flatten)]
    pub real_time_pull_request_event: RealTimePullRequestEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateRefsRequest {
    #[serde(
        rename = "refUpdateRequests",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub ref_update_requests: Vec<GitRefUpdate>,
    #[serde(
        rename = "updateMode",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub update_mode: Option<update_refs_request::UpdateMode>,
}
pub mod update_refs_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum UpdateMode {
        #[serde(rename = "bestEffort")]
        BestEffort,
        #[serde(rename = "allOrNone")]
        AllOrNone,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VersionControlProjectInfo {
    #[serde(
        rename = "defaultSourceControlType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_source_control_type: Option<version_control_project_info::DefaultSourceControlType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
    #[serde(
        rename = "supportsGit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub supports_git: Option<bool>,
    #[serde(
        rename = "supportsTFVC",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub supports_tfvc: Option<bool>,
}
pub mod version_control_project_info {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DefaultSourceControlType {
        #[serde(rename = "tfvc")]
        Tfvc,
        #[serde(rename = "git")]
        Git,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VersionedPolicyConfigurationRef {
    #[serde(flatten)]
    pub policy_configuration_ref: PolicyConfigurationRef,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebApiCreateTagRequestData {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebApiTagDefinition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AttachmentList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Attachment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommentList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Comment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitBranchStatsList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitBranchStats>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitCommitRefList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitCommitRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitDeletedRepositoryList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitDeletedRepository>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitForkSyncRequestList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitForkSyncRequest>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitImportRequestList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitImportRequest>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitItemList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitItem>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequestCommentThreadList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitPullRequestCommentThread>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequestIterationList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitPullRequestIteration>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequestList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitPullRequest>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPullRequestStatusList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitPullRequestStatus>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitPushList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitPush>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitRefFavoriteList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitRefFavorite>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitRefList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitRefUpdateResultList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitRefUpdateResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitRepositoryList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitRepository>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitRepositoryRefList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitRepositoryRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitStatusList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitStatus>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitSuggestionList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GitSuggestion>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityRefList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<IdentityRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityRefWithVoteList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<IdentityRefWithVote>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Link {
    pub href: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyConfigurationList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<PolicyConfiguration>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceRefList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ResourceRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebApiTagDefinitionList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<WebApiTagDefinition>,
}
