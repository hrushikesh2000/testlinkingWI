#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub boardtype: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collection: Option<Collection>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<Project>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub team: Option<Team>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardSearchRequest {
    #[serde(flatten)]
    pub entity_search_request: EntitySearchRequest,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardSearchResponse {
    #[serde(flatten)]
    pub entity_search_response: EntitySearchResponse,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<BoardResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BranchInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodeResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collection: Option<Collection>,
    #[serde(rename = "contentId", default, skip_serializing_if = "Option::is_none")]
    pub content_id: Option<String>,
    #[serde(rename = "fileName", default, skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matches: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<Project>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<Repository>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub versions: Vec<Version>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodeSearchRequest {
    #[serde(flatten)]
    pub entity_search_request: EntitySearchRequest,
    #[serde(
        rename = "includeSnippet",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_snippet: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodeSearchResponse {
    #[serde(flatten)]
    pub entity_search_response: EntitySearchResponse,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<CodeResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Collection {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomRepositoryStatusResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "indexedTopLevelFolders",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub indexed_top_level_folders: Vec<DepotInfo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DepotInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EntitySearchRequest {
    #[serde(flatten)]
    pub entity_search_request_base: EntitySearchRequestBase,
    #[serde(rename = "$orderBy", default, skip_serializing_if = "Vec::is_empty")]
    pub order_by: Vec<SortOption>,
    #[serde(rename = "$skip", default, skip_serializing_if = "Option::is_none")]
    pub skip: Option<i32>,
    #[serde(rename = "$top", default, skip_serializing_if = "Option::is_none")]
    pub top: Option<i32>,
    #[serde(
        rename = "includeFacets",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_facets: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EntitySearchRequestBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filters: Option<serde_json::Value>,
    #[serde(
        rename = "searchText",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub search_text: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EntitySearchResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub facets: Option<serde_json::Value>,
    #[serde(rename = "infoCode", default, skip_serializing_if = "Option::is_none")]
    pub info_code: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FeedInfo {
    #[serde(
        rename = "collectionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub collection_id: Option<String>,
    #[serde(
        rename = "collectionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub collection_name: Option<String>,
    #[serde(rename = "feedId", default, skip_serializing_if = "Option::is_none")]
    pub feed_id: Option<String>,
    #[serde(rename = "feedName", default, skip_serializing_if = "Option::is_none")]
    pub feed_name: Option<String>,
    #[serde(
        rename = "latestMatchedVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub latest_matched_version: Option<String>,
    #[serde(
        rename = "latestVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub latest_version: Option<String>,
    #[serde(
        rename = "packageUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub package_url: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub views: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Filter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "resultCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Hit {
    #[serde(
        rename = "charOffset",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub char_offset: Option<i32>,
    #[serde(
        rename = "codeSnippet",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub code_snippet: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub column: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub length: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub line: Option<i32>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageHit {
    #[serde(
        rename = "fieldReferenceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub field_reference_name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub highlights: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub feeds: Vec<FeedInfo>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub hits: Vec<PackageHit>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "protocolType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub protocol_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageSearchRequest {
    #[serde(flatten)]
    pub entity_search_request: EntitySearchRequest,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageSearchResponse {
    #[serde(rename = "activityId", default, skip_serializing_if = "Vec::is_empty")]
    pub activity_id: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<PackageSearchResponseContent>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageSearchResponseContent {
    #[serde(flatten)]
    pub entity_search_response: EntitySearchResponse,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<PackageResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Project {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub visibility: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Repository {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<repository::Type>,
}
pub mod repository {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "git")]
        Git,
        #[serde(rename = "tfvc")]
        Tfvc,
        #[serde(rename = "custom")]
        Custom,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepositoryStatusResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "indexedBranches",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub indexed_branches: Vec<BranchInfo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScrollSearchRequest {
    #[serde(flatten)]
    pub entity_search_request_base: EntitySearchRequestBase,
    #[serde(rename = "$scrollId", default, skip_serializing_if = "Option::is_none")]
    pub scroll_id: Option<String>,
    #[serde(
        rename = "$scrollSize",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub scroll_size: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SettingResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    #[serde(rename = "routeId", default, skip_serializing_if = "Option::is_none")]
    pub route_id: Option<String>,
    #[serde(
        rename = "routeParameterMapping",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub route_parameter_mapping: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<setting_result::Scope>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}
pub mod setting_result {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Scope {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "organization")]
        Organization,
        #[serde(rename = "project")]
        Project,
        #[serde(rename = "user")]
        User,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SettingSearchRequest {
    #[serde(flatten)]
    pub entity_search_request: EntitySearchRequest,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SettingSearchResponse {
    #[serde(flatten)]
    pub entity_search_response: EntitySearchResponse,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<SettingResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SortOption {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub field: Option<String>,
    #[serde(rename = "sortOrder", default, skip_serializing_if = "Option::is_none")]
    pub sort_order: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Team {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcRepositoryStatusResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "indexingInformation",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub indexing_information: Vec<BranchInfo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Version {
    #[serde(
        rename = "branchName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub branch_name: Option<String>,
    #[serde(rename = "changeId", default, skip_serializing_if = "Option::is_none")]
    pub change_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Wiki {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "mappedPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub mapped_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WikiHit {
    #[serde(
        rename = "fieldReferenceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub field_reference_name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub highlights: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WikiResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collection: Option<Collection>,
    #[serde(rename = "contentId", default, skip_serializing_if = "Option::is_none")]
    pub content_id: Option<String>,
    #[serde(rename = "fileName", default, skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub hits: Vec<WikiHit>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ProjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub wiki: Option<Wiki>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WikiSearchRequest {
    #[serde(flatten)]
    pub entity_search_request: EntitySearchRequest,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WikiSearchResponse {
    #[serde(flatten)]
    pub entity_search_response: EntitySearchResponse,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<WikiResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemHit {
    #[serde(
        rename = "fieldReferenceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub field_reference_name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub highlights: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub hits: Vec<WorkItemHit>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<Project>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemSearchRequest {
    #[serde(flatten)]
    pub entity_search_request: EntitySearchRequest,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemSearchResponse {
    #[serde(flatten)]
    pub entity_search_response: EntitySearchResponse,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<WorkItemResult>,
}
