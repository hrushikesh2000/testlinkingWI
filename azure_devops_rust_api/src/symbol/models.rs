#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DebugEntry {
    #[serde(flatten)]
    pub resource_base: ResourceBase,
    #[serde(
        rename = "blobDetails",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub blob_details: Option<JsonBlobIdentifierWithBlocks>,
    #[serde(
        rename = "blobIdentifier",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub blob_identifier: Option<JsonBlobIdentifier>,
    #[serde(rename = "blobUri", default, skip_serializing_if = "Option::is_none")]
    pub blob_uri: Option<String>,
    #[serde(rename = "clientKey", default, skip_serializing_if = "Option::is_none")]
    pub client_key: Option<String>,
    #[serde(rename = "domainId", default, skip_serializing_if = "Option::is_none")]
    pub domain_id: Option<IDomainId>,
    #[serde(
        rename = "informationLevel",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub information_level: Option<debug_entry::InformationLevel>,
    #[serde(rename = "requestId", default, skip_serializing_if = "Option::is_none")]
    pub request_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<debug_entry::Status>,
}
pub mod debug_entry {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum InformationLevel {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "binary")]
        Binary,
        #[serde(rename = "publics")]
        Publics,
        #[serde(rename = "traceFormatPresent")]
        TraceFormatPresent,
        #[serde(rename = "typeInfo")]
        TypeInfo,
        #[serde(rename = "lineNumbers")]
        LineNumbers,
        #[serde(rename = "globalSymbols")]
        GlobalSymbols,
        #[serde(rename = "private")]
        Private,
        #[serde(rename = "sourceIndexed")]
        SourceIndexed,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "created")]
        Created,
        #[serde(rename = "blobMissing")]
        BlobMissing,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DebugEntryCreateBatch {
    #[serde(
        rename = "createBehavior",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub create_behavior: Option<debug_entry_create_batch::CreateBehavior>,
    #[serde(
        rename = "debugEntries",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub debug_entries: Vec<DebugEntry>,
    #[serde(rename = "proofNodes", default, skip_serializing_if = "Vec::is_empty")]
    pub proof_nodes: Vec<String>,
}
pub mod debug_entry_create_batch {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum CreateBehavior {
        #[serde(rename = "throwIfExists")]
        ThrowIfExists,
        #[serde(rename = "skipIfExists")]
        SkipIfExists,
        #[serde(rename = "overwriteIfExists")]
        OverwriteIfExists,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IDomainId {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonBlobBlockHash {
    #[serde(rename = "hashBytes", default, skip_serializing_if = "Vec::is_empty")]
    pub hash_bytes: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonBlobIdentifier {
    #[serde(
        rename = "identifierValue",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub identifier_value: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonBlobIdentifierWithBlocks {
    #[serde(rename = "blockHashes", default, skip_serializing_if = "Vec::is_empty")]
    pub block_hashes: Vec<JsonBlobBlockHash>,
    #[serde(
        rename = "identifierValue",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub identifier_value: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Request {
    #[serde(flatten)]
    pub resource_base: ResourceBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "domainId", default, skip_serializing_if = "Option::is_none")]
    pub domain_id: Option<IDomainId>,
    #[serde(
        rename = "expirationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub expiration_date: Option<String>,
    #[serde(rename = "isChunked", default, skip_serializing_if = "Option::is_none")]
    pub is_chunked: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<request::Status>,
}
pub mod request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "created")]
        Created,
        #[serde(rename = "sealed")]
        Sealed,
        #[serde(rename = "unavailable")]
        Unavailable,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceBase {
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "storageETag",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub storage_e_tag: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DebugEntryList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<DebugEntry>,
}
