// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
#![doc = "generated by AutoRust"]
#![allow(unused_mut)]
#![allow(unused_variables)]
#![allow(unused_imports)]
#![allow(clippy::redundant_clone)]
use super::models;
#[derive(Clone)]
pub struct Client {
    endpoint: String,
    credential: crate::Credential,
    scopes: Vec<String>,
    pipeline: azure_core::Pipeline,
}
#[derive(Clone)]
pub struct ClientBuilder {
    credential: crate::Credential,
    endpoint: Option<String>,
    scopes: Option<Vec<String>>,
}
pub const DEFAULT_ENDPOINT: &str = "https://dev.azure.com";
impl ClientBuilder {
    pub fn new(credential: crate::Credential) -> Self {
        Self {
            credential,
            endpoint: None,
            scopes: None,
        }
    }
    pub fn endpoint(mut self, endpoint: impl Into<String>) -> Self {
        self.endpoint = Some(endpoint.into());
        self
    }
    pub fn scopes(mut self, scopes: &[&str]) -> Self {
        self.scopes = Some(scopes.iter().map(|scope| (*scope).to_owned()).collect());
        self
    }
    pub fn build(self) -> Client {
        let endpoint = self.endpoint.unwrap_or_else(|| DEFAULT_ENDPOINT.to_owned());
        let scopes = self
            .scopes
            .unwrap_or_else(|| vec![format!("{}/", endpoint)]);
        Client::new(endpoint, self.credential, scopes)
    }
}
impl Client {
    pub(crate) fn endpoint(&self) -> &str {
        self.endpoint.as_str()
    }
    pub(crate) fn credential(&self) -> &crate::Credential {
        &self.credential
    }
    pub(crate) async fn send(
        &self,
        request: impl Into<azure_core::Request>,
    ) -> azure_core::error::Result<azure_core::Response> {
        let mut context = azure_core::Context::default();
        let mut request = request.into();
        self.pipeline.send(&mut context, &mut request).await
    }
    pub fn new(
        endpoint: impl Into<String>,
        credential: crate::Credential,
        scopes: Vec<String>,
    ) -> Self {
        let endpoint = endpoint.into();
        let pipeline = azure_core::Pipeline::new(
            option_env!("CARGO_PKG_NAME"),
            option_env!("CARGO_PKG_VERSION"),
            azure_core::ClientOptions::default(),
            Vec::new(),
            Vec::new(),
        );
        Self {
            endpoint,
            credential,
            scopes,
            pipeline,
        }
    }
    pub fn attachments(&self) -> attachments::Client {
        attachments::Client(self.clone())
    }
    pub fn code_coverage(&self) -> code_coverage::Client {
        code_coverage::Client(self.clone())
    }
    pub fn iterations(&self) -> iterations::Client {
        iterations::Client(self.clone())
    }
    pub fn points(&self) -> points::Client {
        points::Client(self.clone())
    }
    pub fn result_retention_settings(&self) -> result_retention_settings::Client {
        result_retention_settings::Client(self.clone())
    }
    pub fn results(&self) -> results::Client {
        results::Client(self.clone())
    }
    pub fn runs(&self) -> runs::Client {
        runs::Client(self.clone())
    }
    pub fn session(&self) -> session::Client {
        session::Client(self.clone())
    }
    pub fn test_cases(&self) -> test_cases::Client {
        test_cases::Client(self.clone())
    }
    pub fn test_history(&self) -> test_history::Client {
        test_history::Client(self.clone())
    }
    pub fn test_suites(&self) -> test_suites::Client {
        test_suites::Client(self.clone())
    }
}
pub mod runs {
    use super::models;
    pub struct Client(pub(crate) super::Client);
    impl Client {
        #[doc = "Query Test Runs based on filters. Mandatory fields are minLastUpdatedDate and maxLastUpdatedDate."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `min_last_updated_date`: Minimum Last Modified Date of run to be queried (Mandatory)."]
        #[doc = "* `max_last_updated_date`: Maximum Last Modified Date of run to be queried (Mandatory, difference between min and max date can be atmost 7 days)."]
        pub fn query(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            min_last_updated_date: impl Into<String>,
            max_last_updated_date: impl Into<String>,
        ) -> query::Builder {
            query::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                min_last_updated_date: min_last_updated_date.into(),
                max_last_updated_date: max_last_updated_date.into(),
                state: None,
                plan_ids: None,
                is_automated: None,
                publish_context: None,
                build_ids: None,
                build_def_ids: None,
                branch_name: None,
                release_ids: None,
                release_def_ids: None,
                release_env_ids: None,
                release_env_def_ids: None,
                run_title: None,
                top: None,
                continuation_token: None,
            }
        }
        #[doc = "Get a list of test runs."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        pub fn list(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
        ) -> list::Builder {
            list::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                build_uri: None,
                owner: None,
                tmi_run_id: None,
                plan_id: None,
                include_run_details: None,
                automated: None,
                skip: None,
                top: None,
            }
        }
        #[doc = "Create new test run."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `body`: Run details RunCreateModel"]
        #[doc = "* `project`: Project ID or project name"]
        pub fn create(
            &self,
            organization: impl Into<String>,
            body: impl Into<models::RunCreateModel>,
            project: impl Into<String>,
        ) -> create::Builder {
            create::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body: body.into(),
                project: project.into(),
            }
        }
        #[doc = "Get a test run by its ID."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: ID of the run to get."]
        pub fn get_test_run_by_id(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            run_id: i32,
        ) -> get_test_run_by_id::Builder {
            get_test_run_by_id::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                run_id,
                include_details: None,
            }
        }
        #[doc = "Update test run by its ID."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `body`: Run details RunUpdateModel"]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: ID of the run to update."]
        pub fn update(
            &self,
            organization: impl Into<String>,
            body: impl Into<models::RunUpdateModel>,
            project: impl Into<String>,
            run_id: i32,
        ) -> update::Builder {
            update::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body: body.into(),
                project: project.into(),
                run_id,
            }
        }
        #[doc = "Delete a test run by its ID."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: ID of the run to delete."]
        pub fn delete(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            run_id: i32,
        ) -> delete::Builder {
            delete::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                run_id,
            }
        }
        #[doc = "Get test run statistics , used when we want to get summary of a run by outcome."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: ID of the run to get."]
        pub fn get_test_run_statistics(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            run_id: i32,
        ) -> get_test_run_statistics::Builder {
            get_test_run_statistics::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                run_id,
            }
        }
    }
    pub mod query {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestRunList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) min_last_updated_date: String,
            pub(crate) max_last_updated_date: String,
            pub(crate) state: Option<String>,
            pub(crate) plan_ids: Option<String>,
            pub(crate) is_automated: Option<bool>,
            pub(crate) publish_context: Option<String>,
            pub(crate) build_ids: Option<String>,
            pub(crate) build_def_ids: Option<String>,
            pub(crate) branch_name: Option<String>,
            pub(crate) release_ids: Option<String>,
            pub(crate) release_def_ids: Option<String>,
            pub(crate) release_env_ids: Option<String>,
            pub(crate) release_env_def_ids: Option<String>,
            pub(crate) run_title: Option<String>,
            pub(crate) top: Option<i32>,
            pub(crate) continuation_token: Option<String>,
        }
        impl Builder {
            #[doc = "Current state of the Runs to be queried."]
            pub fn state(mut self, state: impl Into<String>) -> Self {
                self.state = Some(state.into());
                self
            }
            #[doc = "Plan Ids of the Runs to be queried, comma separated list of valid ids (limit no. of ids 10)."]
            pub fn plan_ids(mut self, plan_ids: impl Into<String>) -> Self {
                self.plan_ids = Some(plan_ids.into());
                self
            }
            #[doc = "Automation type of the Runs to be queried."]
            pub fn is_automated(mut self, is_automated: bool) -> Self {
                self.is_automated = Some(is_automated);
                self
            }
            #[doc = "PublishContext of the Runs to be queried."]
            pub fn publish_context(mut self, publish_context: impl Into<String>) -> Self {
                self.publish_context = Some(publish_context.into());
                self
            }
            #[doc = "Build Ids of the Runs to be queried, comma separated list of valid ids (limit no. of ids 10)."]
            pub fn build_ids(mut self, build_ids: impl Into<String>) -> Self {
                self.build_ids = Some(build_ids.into());
                self
            }
            #[doc = "Build Definition Ids of the Runs to be queried, comma separated list of valid ids (limit no. of ids 10)."]
            pub fn build_def_ids(mut self, build_def_ids: impl Into<String>) -> Self {
                self.build_def_ids = Some(build_def_ids.into());
                self
            }
            #[doc = "Source Branch name of the Runs to be queried."]
            pub fn branch_name(mut self, branch_name: impl Into<String>) -> Self {
                self.branch_name = Some(branch_name.into());
                self
            }
            #[doc = "Release Ids of the Runs to be queried, comma separated list of valid ids (limit no. of ids 10)."]
            pub fn release_ids(mut self, release_ids: impl Into<String>) -> Self {
                self.release_ids = Some(release_ids.into());
                self
            }
            #[doc = "Release Definition Ids of the Runs to be queried, comma separated list of valid ids (limit no. of ids 10)."]
            pub fn release_def_ids(mut self, release_def_ids: impl Into<String>) -> Self {
                self.release_def_ids = Some(release_def_ids.into());
                self
            }
            #[doc = "Release Environment Ids of the Runs to be queried, comma separated list of valid ids (limit no. of ids 10)."]
            pub fn release_env_ids(mut self, release_env_ids: impl Into<String>) -> Self {
                self.release_env_ids = Some(release_env_ids.into());
                self
            }
            #[doc = "Release Environment Definition Ids of the Runs to be queried, comma separated list of valid ids (limit no. of ids 10)."]
            pub fn release_env_def_ids(mut self, release_env_def_ids: impl Into<String>) -> Self {
                self.release_env_def_ids = Some(release_env_def_ids.into());
                self
            }
            #[doc = "Run Title of the Runs to be queried."]
            pub fn run_title(mut self, run_title: impl Into<String>) -> Self {
                self.run_title = Some(run_title.into());
                self
            }
            #[doc = "Number of runs to be queried. Limit is 100"]
            pub fn top(mut self, top: i32) -> Self {
                self.top = Some(top);
                self
            }
            #[doc = "continuation token received from previous batch or null for first batch. It is not supposed to be created (or altered, if received from last batch) by user."]
            pub fn continuation_token(mut self, continuation_token: impl Into<String>) -> Self {
                self.continuation_token = Some(continuation_token.into());
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/runs?minLastUpdatedDate={}&maxLastUpdatedDate={}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.min_last_updated_date,
                            &this.max_last_updated_date
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let min_last_updated_date = &this.min_last_updated_date;
                        url.query_pairs_mut()
                            .append_pair("minLastUpdatedDate", min_last_updated_date);
                        let max_last_updated_date = &this.max_last_updated_date;
                        url.query_pairs_mut()
                            .append_pair("maxLastUpdatedDate", max_last_updated_date);
                        if let Some(state) = &this.state {
                            url.query_pairs_mut().append_pair("state", state);
                        }
                        if let Some(plan_ids) = &this.plan_ids {
                            url.query_pairs_mut().append_pair("planIds", plan_ids);
                        }
                        if let Some(is_automated) = &this.is_automated {
                            url.query_pairs_mut()
                                .append_pair("isAutomated", &is_automated.to_string());
                        }
                        if let Some(publish_context) = &this.publish_context {
                            url.query_pairs_mut()
                                .append_pair("publishContext", publish_context);
                        }
                        if let Some(build_ids) = &this.build_ids {
                            url.query_pairs_mut().append_pair("buildIds", build_ids);
                        }
                        if let Some(build_def_ids) = &this.build_def_ids {
                            url.query_pairs_mut()
                                .append_pair("buildDefIds", build_def_ids);
                        }
                        if let Some(branch_name) = &this.branch_name {
                            url.query_pairs_mut().append_pair("branchName", branch_name);
                        }
                        if let Some(release_ids) = &this.release_ids {
                            url.query_pairs_mut().append_pair("releaseIds", release_ids);
                        }
                        if let Some(release_def_ids) = &this.release_def_ids {
                            url.query_pairs_mut()
                                .append_pair("releaseDefIds", release_def_ids);
                        }
                        if let Some(release_env_ids) = &this.release_env_ids {
                            url.query_pairs_mut()
                                .append_pair("releaseEnvIds", release_env_ids);
                        }
                        if let Some(release_env_def_ids) = &this.release_env_def_ids {
                            url.query_pairs_mut()
                                .append_pair("releaseEnvDefIds", release_env_def_ids);
                        }
                        if let Some(run_title) = &this.run_title {
                            url.query_pairs_mut().append_pair("runTitle", run_title);
                        }
                        if let Some(top) = &this.top {
                            url.query_pairs_mut().append_pair("$top", &top.to_string());
                        }
                        if let Some(continuation_token) = &this.continuation_token {
                            url.query_pairs_mut()
                                .append_pair("continuationToken", continuation_token);
                        }
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestRunList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod list {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestRunList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) build_uri: Option<String>,
            pub(crate) owner: Option<String>,
            pub(crate) tmi_run_id: Option<String>,
            pub(crate) plan_id: Option<i32>,
            pub(crate) include_run_details: Option<bool>,
            pub(crate) automated: Option<bool>,
            pub(crate) skip: Option<i32>,
            pub(crate) top: Option<i32>,
        }
        impl Builder {
            #[doc = "URI of the build that the runs used."]
            pub fn build_uri(mut self, build_uri: impl Into<String>) -> Self {
                self.build_uri = Some(build_uri.into());
                self
            }
            #[doc = "Team foundation ID of the owner of the runs."]
            pub fn owner(mut self, owner: impl Into<String>) -> Self {
                self.owner = Some(owner.into());
                self
            }
            pub fn tmi_run_id(mut self, tmi_run_id: impl Into<String>) -> Self {
                self.tmi_run_id = Some(tmi_run_id.into());
                self
            }
            #[doc = "ID of the test plan that the runs are a part of."]
            pub fn plan_id(mut self, plan_id: i32) -> Self {
                self.plan_id = Some(plan_id);
                self
            }
            #[doc = "If true, include all the properties of the runs."]
            pub fn include_run_details(mut self, include_run_details: bool) -> Self {
                self.include_run_details = Some(include_run_details);
                self
            }
            #[doc = "If true, only returns automated runs."]
            pub fn automated(mut self, automated: bool) -> Self {
                self.automated = Some(automated);
                self
            }
            #[doc = "Number of test runs to skip."]
            pub fn skip(mut self, skip: i32) -> Self {
                self.skip = Some(skip);
                self
            }
            #[doc = "Number of test runs to return."]
            pub fn top(mut self, top: i32) -> Self {
                self.top = Some(top);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/runs",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        if let Some(build_uri) = &this.build_uri {
                            url.query_pairs_mut().append_pair("buildUri", build_uri);
                        }
                        if let Some(owner) = &this.owner {
                            url.query_pairs_mut().append_pair("owner", owner);
                        }
                        if let Some(tmi_run_id) = &this.tmi_run_id {
                            url.query_pairs_mut().append_pair("tmiRunId", tmi_run_id);
                        }
                        if let Some(plan_id) = &this.plan_id {
                            url.query_pairs_mut()
                                .append_pair("planId", &plan_id.to_string());
                        }
                        if let Some(include_run_details) = &this.include_run_details {
                            url.query_pairs_mut()
                                .append_pair("includeRunDetails", &include_run_details.to_string());
                        }
                        if let Some(automated) = &this.automated {
                            url.query_pairs_mut()
                                .append_pair("automated", &automated.to_string());
                        }
                        if let Some(skip) = &this.skip {
                            url.query_pairs_mut()
                                .append_pair("$skip", &skip.to_string());
                        }
                        if let Some(top) = &this.top {
                            url.query_pairs_mut().append_pair("$top", &top.to_string());
                        }
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestRunList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod create {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestRun;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: models::RunCreateModel,
            pub(crate) project: String,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/runs",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::POST);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        req_builder = req_builder.header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.body)?;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestRun = serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod get_test_run_by_id {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestRun;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) run_id: i32,
            pub(crate) include_details: Option<bool>,
        }
        impl Builder {
            #[doc = "Default value is true. It includes details like run statistics, release, build, test environment, post process state, and more."]
            pub fn include_details(mut self, include_details: bool) -> Self {
                self.include_details = Some(include_details);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/runs/{}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        if let Some(include_details) = &this.include_details {
                            url.query_pairs_mut()
                                .append_pair("includeDetails", &include_details.to_string());
                        }
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestRun = serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod update {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestRun;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: models::RunUpdateModel,
            pub(crate) project: String,
            pub(crate) run_id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/runs/{}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::PATCH);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        req_builder = req_builder.header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.body)?;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestRun = serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod delete {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) run_id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/runs/{}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::DELETE);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => Ok(()),
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod get_test_run_statistics {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestRunStatistic;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) run_id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/runs/{}/Statistics",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestRunStatistic =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
}
pub mod attachments {
    use super::models;
    pub struct Client(pub(crate) super::Client);
    impl Client {
        #[doc = "Get list of test sub result attachments"]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: ID of the test run that contains the result."]
        #[doc = "* `test_case_result_id`: ID of the test results that contains sub result."]
        #[doc = "* `test_sub_result_id`: ID of the test sub result whose attachment has to be downloaded"]
        pub fn get_test_sub_result_attachments(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            run_id: i32,
            test_case_result_id: i32,
            test_sub_result_id: i32,
        ) -> get_test_sub_result_attachments::Builder {
            get_test_sub_result_attachments::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                run_id,
                test_case_result_id,
                test_sub_result_id,
            }
        }
        #[doc = "Attach a file to a test result"]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `body`: Attachment Request Model."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: ID of the test run that contains the result."]
        #[doc = "* `test_case_result_id`: ID of the test results that contains sub result."]
        #[doc = "* `test_sub_result_id`: ID of the test sub results against which attachment has to be uploaded."]
        pub fn create_test_sub_result_attachment(
            &self,
            organization: impl Into<String>,
            body: impl Into<models::TestAttachmentRequestModel>,
            project: impl Into<String>,
            run_id: i32,
            test_case_result_id: i32,
            test_sub_result_id: i32,
        ) -> create_test_sub_result_attachment::Builder {
            create_test_sub_result_attachment::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body: body.into(),
                project: project.into(),
                run_id,
                test_case_result_id,
                test_sub_result_id,
            }
        }
        #[doc = "Download a test sub result attachment"]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: ID of the test run that contains the result."]
        #[doc = "* `test_case_result_id`: ID of the test results that contains sub result."]
        #[doc = "* `attachment_id`: ID of the test result attachment to be downloaded"]
        #[doc = "* `test_sub_result_id`: ID of the test sub result whose attachment has to be downloaded"]
        pub fn get_test_sub_result_attachment_zip(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            run_id: i32,
            test_case_result_id: i32,
            attachment_id: i32,
            test_sub_result_id: i32,
        ) -> get_test_sub_result_attachment_zip::Builder {
            get_test_sub_result_attachment_zip::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                run_id,
                test_case_result_id,
                attachment_id,
                test_sub_result_id,
            }
        }
        #[doc = "Get list of test run attachments reference."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: ID of the test run."]
        pub fn get_test_run_attachments(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            run_id: i32,
        ) -> get_test_run_attachments::Builder {
            get_test_run_attachments::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                run_id,
            }
        }
        #[doc = "Attach a file to a test run."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `body`: Attachment details TestAttachmentRequestModel"]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: ID of the test run against which attachment has to be uploaded."]
        pub fn create_test_run_attachment(
            &self,
            organization: impl Into<String>,
            body: impl Into<models::TestAttachmentRequestModel>,
            project: impl Into<String>,
            run_id: i32,
        ) -> create_test_run_attachment::Builder {
            create_test_run_attachment::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body: body.into(),
                project: project.into(),
                run_id,
            }
        }
        #[doc = "Download a test run attachment by its ID."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: ID of the test run whose attachment has to be downloaded."]
        #[doc = "* `attachment_id`: ID of the test run attachment to be downloaded."]
        pub fn get_test_run_attachment_zip(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            run_id: i32,
            attachment_id: i32,
        ) -> get_test_run_attachment_zip::Builder {
            get_test_run_attachment_zip::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                run_id,
                attachment_id,
            }
        }
        #[doc = "Get list of test result attachments reference."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: ID of the test run that contains the result."]
        #[doc = "* `test_case_result_id`: ID of the test result."]
        pub fn get_test_result_attachments(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            run_id: i32,
            test_case_result_id: i32,
        ) -> get_test_result_attachments::Builder {
            get_test_result_attachments::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                run_id,
                test_case_result_id,
            }
        }
        #[doc = "Attach a file to a test result."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `body`: Attachment details TestAttachmentRequestModel"]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: ID of the test run that contains the result."]
        #[doc = "* `test_case_result_id`: ID of the test result against which attachment has to be uploaded."]
        pub fn create_test_result_attachment(
            &self,
            organization: impl Into<String>,
            body: impl Into<models::TestAttachmentRequestModel>,
            project: impl Into<String>,
            run_id: i32,
            test_case_result_id: i32,
        ) -> create_test_result_attachment::Builder {
            create_test_result_attachment::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body: body.into(),
                project: project.into(),
                run_id,
                test_case_result_id,
            }
        }
        #[doc = "Download a test result attachment by its ID."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: ID of the test run that contains the testCaseResultId."]
        #[doc = "* `test_case_result_id`: ID of the test result whose attachment has to be downloaded."]
        #[doc = "* `attachment_id`: ID of the test result attachment to be downloaded."]
        pub fn get_test_result_attachment_zip(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            run_id: i32,
            test_case_result_id: i32,
            attachment_id: i32,
        ) -> get_test_result_attachment_zip::Builder {
            get_test_result_attachment_zip::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                run_id,
                test_case_result_id,
                attachment_id,
            }
        }
    }
    pub mod get_test_sub_result_attachments {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestAttachmentList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) run_id: i32,
            pub(crate) test_case_result_id: i32,
            pub(crate) test_sub_result_id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Runs/{}/Results/{}/attachments?testSubResultId={}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id,
                            &this.test_case_result_id,
                            &this.test_sub_result_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let test_sub_result_id = &this.test_sub_result_id;
                        url.query_pairs_mut()
                            .append_pair("testSubResultId", &test_sub_result_id.to_string());
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestAttachmentList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod create_test_sub_result_attachment {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestAttachmentReference;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: models::TestAttachmentRequestModel,
            pub(crate) project: String,
            pub(crate) run_id: i32,
            pub(crate) test_case_result_id: i32,
            pub(crate) test_sub_result_id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Runs/{}/Results/{}/attachments?testSubResultId={}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id,
                            &this.test_case_result_id,
                            &this.test_sub_result_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::POST);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        req_builder = req_builder.header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.body)?;
                        let test_sub_result_id = &this.test_sub_result_id;
                        url.query_pairs_mut()
                            .append_pair("testSubResultId", &test_sub_result_id.to_string());
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestAttachmentReference =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod get_test_sub_result_attachment_zip {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = String;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) run_id: i32,
            pub(crate) test_case_result_id: i32,
            pub(crate) attachment_id: i32,
            pub(crate) test_sub_result_id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = & format ! ("{}/{}/{}/_apis/test/Runs/{}/Results/{}/attachments/{}?testSubResultId={}" , this . client . endpoint () , & this . organization , & this . project , & this . run_id , & this . test_case_result_id , & this . attachment_id , & this . test_sub_result_id) ;
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let test_sub_result_id = &this.test_sub_result_id;
                        url.query_pairs_mut()
                            .append_pair("testSubResultId", &test_sub_result_id.to_string());
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: String = serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod get_test_run_attachments {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestAttachmentList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) run_id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Runs/{}/attachments",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestAttachmentList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod create_test_run_attachment {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestAttachmentReference;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: models::TestAttachmentRequestModel,
            pub(crate) project: String,
            pub(crate) run_id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Runs/{}/attachments",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::POST);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        req_builder = req_builder.header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.body)?;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestAttachmentReference =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod get_test_run_attachment_zip {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = String;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) run_id: i32,
            pub(crate) attachment_id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Runs/{}/attachments/{}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id,
                            &this.attachment_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: String = serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod get_test_result_attachments {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestAttachmentList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) run_id: i32,
            pub(crate) test_case_result_id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Runs/{}/Results/{}/attachments",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id,
                            &this.test_case_result_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestAttachmentList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod create_test_result_attachment {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestAttachmentReference;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: models::TestAttachmentRequestModel,
            pub(crate) project: String,
            pub(crate) run_id: i32,
            pub(crate) test_case_result_id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Runs/{}/Results/{}/attachments",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id,
                            &this.test_case_result_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::POST);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        req_builder = req_builder.header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.body)?;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestAttachmentReference =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod get_test_result_attachment_zip {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = String;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) run_id: i32,
            pub(crate) test_case_result_id: i32,
            pub(crate) attachment_id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Runs/{}/Results/{}/attachments/{}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id,
                            &this.test_case_result_id,
                            &this.attachment_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: String = serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
}
pub mod code_coverage {
    use super::models;
    pub struct Client(pub(crate) super::Client);
    impl Client {
        #[doc = "Get code coverage data for a build."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `build_id`: ID of the build for which code coverage data needs to be fetched."]
        #[doc = "* `flags`: Value of flags determine the level of code coverage details to be fetched. Flags are additive. Expected Values are 1 for Modules, 2 for Functions, 4 for BlockData."]
        pub fn get_build_code_coverage(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            build_id: i32,
            flags: i32,
        ) -> get_build_code_coverage::Builder {
            get_build_code_coverage::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                build_id,
                flags,
            }
        }
        #[doc = "Get code coverage data for a test run"]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: ID of the test run for which code coverage data needs to be fetched."]
        #[doc = "* `flags`: Value of flags determine the level of code coverage details to be fetched. Flags are additive. Expected Values are 1 for Modules, 2 for Functions, 4 for BlockData."]
        pub fn get_test_run_code_coverage(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            run_id: i32,
            flags: i32,
        ) -> get_test_run_code_coverage::Builder {
            get_test_run_code_coverage::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                run_id,
                flags,
            }
        }
    }
    pub mod get_build_code_coverage {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::BuildCoverageList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) build_id: i32,
            pub(crate) flags: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/codecoverage",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let build_id = &this.build_id;
                        url.query_pairs_mut()
                            .append_pair("buildId", &build_id.to_string());
                        let flags = &this.flags;
                        url.query_pairs_mut()
                            .append_pair("flags", &flags.to_string());
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::BuildCoverageList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod get_test_run_code_coverage {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestRunCoverageList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) run_id: i32,
            pub(crate) flags: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Runs/{}/codecoverage",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let flags = &this.flags;
                        url.query_pairs_mut()
                            .append_pair("flags", &flags.to_string());
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestRunCoverageList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
}
pub mod points {
    use super::models;
    pub struct Client(pub(crate) super::Client);
    impl Client {
        #[doc = "Get a list of test points."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `plan_id`: ID of the test plan."]
        #[doc = "* `suite_id`: ID of the suite that contains the points."]
        pub fn list(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            plan_id: i32,
            suite_id: i32,
        ) -> list::Builder {
            list::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                plan_id,
                suite_id,
                wit_fields: None,
                configuration_id: None,
                test_case_id: None,
                test_point_ids: None,
                include_point_details: None,
                skip: None,
                top: None,
            }
        }
        #[doc = "Get a test point."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `plan_id`: ID of the test plan."]
        #[doc = "* `suite_id`: ID of the suite that contains the point."]
        #[doc = "* `point_ids`: ID of the test point to get."]
        pub fn get_point(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            plan_id: i32,
            suite_id: i32,
            point_ids: i32,
        ) -> get_point::Builder {
            get_point::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                plan_id,
                suite_id,
                point_ids,
                wit_fields: None,
            }
        }
        #[doc = "Update test points."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `body`: Data to update."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `plan_id`: ID of the test plan."]
        #[doc = "* `suite_id`: ID of the suite that contains the points."]
        #[doc = "* `point_ids`: ID of the test point to get. Use a comma-separated list of IDs to update multiple test points."]
        pub fn update(
            &self,
            organization: impl Into<String>,
            body: impl Into<models::PointUpdateModel>,
            project: impl Into<String>,
            plan_id: i32,
            suite_id: i32,
            point_ids: impl Into<String>,
        ) -> update::Builder {
            update::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body: body.into(),
                project: project.into(),
                plan_id,
                suite_id,
                point_ids: point_ids.into(),
            }
        }
        #[doc = "Get test points using query."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `body`: TestPointsQuery to get test points."]
        #[doc = "* `project`: Project ID or project name"]
        pub fn get_points_by_query(
            &self,
            organization: impl Into<String>,
            body: impl Into<models::TestPointsQuery>,
            project: impl Into<String>,
        ) -> get_points_by_query::Builder {
            get_points_by_query::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body: body.into(),
                project: project.into(),
                skip: None,
                top: None,
            }
        }
    }
    pub mod list {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestPointList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) plan_id: i32,
            pub(crate) suite_id: i32,
            pub(crate) wit_fields: Option<String>,
            pub(crate) configuration_id: Option<String>,
            pub(crate) test_case_id: Option<String>,
            pub(crate) test_point_ids: Option<String>,
            pub(crate) include_point_details: Option<bool>,
            pub(crate) skip: Option<i32>,
            pub(crate) top: Option<i32>,
        }
        impl Builder {
            #[doc = "Comma-separated list of work item field names."]
            pub fn wit_fields(mut self, wit_fields: impl Into<String>) -> Self {
                self.wit_fields = Some(wit_fields.into());
                self
            }
            #[doc = "Get test points for specific configuration."]
            pub fn configuration_id(mut self, configuration_id: impl Into<String>) -> Self {
                self.configuration_id = Some(configuration_id.into());
                self
            }
            #[doc = "Get test points for a specific test case, valid when configurationId is not set."]
            pub fn test_case_id(mut self, test_case_id: impl Into<String>) -> Self {
                self.test_case_id = Some(test_case_id.into());
                self
            }
            #[doc = "Get test points for comma-separated list of test point IDs, valid only when configurationId and testCaseId are not set."]
            pub fn test_point_ids(mut self, test_point_ids: impl Into<String>) -> Self {
                self.test_point_ids = Some(test_point_ids.into());
                self
            }
            #[doc = "Include all properties for the test point."]
            pub fn include_point_details(mut self, include_point_details: bool) -> Self {
                self.include_point_details = Some(include_point_details);
                self
            }
            #[doc = "Number of test points to skip."]
            pub fn skip(mut self, skip: i32) -> Self {
                self.skip = Some(skip);
                self
            }
            #[doc = "Number of test points to return."]
            pub fn top(mut self, top: i32) -> Self {
                self.top = Some(top);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Plans/{}/Suites/{}/points",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.plan_id,
                            &this.suite_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        if let Some(wit_fields) = &this.wit_fields {
                            url.query_pairs_mut().append_pair("witFields", wit_fields);
                        }
                        if let Some(configuration_id) = &this.configuration_id {
                            url.query_pairs_mut()
                                .append_pair("configurationId", configuration_id);
                        }
                        if let Some(test_case_id) = &this.test_case_id {
                            url.query_pairs_mut()
                                .append_pair("testCaseId", test_case_id);
                        }
                        if let Some(test_point_ids) = &this.test_point_ids {
                            url.query_pairs_mut()
                                .append_pair("testPointIds", test_point_ids);
                        }
                        if let Some(include_point_details) = &this.include_point_details {
                            url.query_pairs_mut().append_pair(
                                "includePointDetails",
                                &include_point_details.to_string(),
                            );
                        }
                        if let Some(skip) = &this.skip {
                            url.query_pairs_mut()
                                .append_pair("$skip", &skip.to_string());
                        }
                        if let Some(top) = &this.top {
                            url.query_pairs_mut().append_pair("$top", &top.to_string());
                        }
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestPointList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod get_point {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestPoint;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) plan_id: i32,
            pub(crate) suite_id: i32,
            pub(crate) point_ids: i32,
            pub(crate) wit_fields: Option<String>,
        }
        impl Builder {
            #[doc = "Comma-separated list of work item field names."]
            pub fn wit_fields(mut self, wit_fields: impl Into<String>) -> Self {
                self.wit_fields = Some(wit_fields.into());
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Plans/{}/Suites/{}/points/{}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.plan_id,
                            &this.suite_id,
                            &this.point_ids
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        if let Some(wit_fields) = &this.wit_fields {
                            url.query_pairs_mut().append_pair("witFields", wit_fields);
                        }
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestPoint =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod update {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestPointList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: models::PointUpdateModel,
            pub(crate) project: String,
            pub(crate) plan_id: i32,
            pub(crate) suite_id: i32,
            pub(crate) point_ids: String,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Plans/{}/Suites/{}/points/{}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.plan_id,
                            &this.suite_id,
                            &this.point_ids
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::PATCH);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        req_builder = req_builder.header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.body)?;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestPointList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod get_points_by_query {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestPointsQuery;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: models::TestPointsQuery,
            pub(crate) project: String,
            pub(crate) skip: Option<i32>,
            pub(crate) top: Option<i32>,
        }
        impl Builder {
            #[doc = "Number of test points to skip."]
            pub fn skip(mut self, skip: i32) -> Self {
                self.skip = Some(skip);
                self
            }
            #[doc = "Number of test points to return."]
            pub fn top(mut self, top: i32) -> Self {
                self.top = Some(top);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/points",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::POST);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        req_builder = req_builder.header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.body)?;
                        if let Some(skip) = &this.skip {
                            url.query_pairs_mut()
                                .append_pair("$skip", &skip.to_string());
                        }
                        if let Some(top) = &this.top {
                            url.query_pairs_mut().append_pair("$top", &top.to_string());
                        }
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestPointsQuery =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
}
pub mod test_suites {
    use super::models;
    pub struct Client(pub(crate) super::Client);
    impl Client {
        #[doc = "Get all test cases in a suite."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `plan_id`: ID of the test plan that contains the suites."]
        #[doc = "* `suite_id`: ID of the suite to get."]
        pub fn list(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            plan_id: i32,
            suite_id: i32,
        ) -> list::Builder {
            list::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                plan_id,
                suite_id,
            }
        }
        #[doc = "Get a specific test case in a test suite with test case id."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `plan_id`: ID of the test plan that contains the suites."]
        #[doc = "* `suite_id`: ID of the suite that contains the test case."]
        #[doc = "* `test_case_ids`: ID of the test case to get."]
        pub fn get(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            plan_id: i32,
            suite_id: i32,
            test_case_ids: i32,
        ) -> get::Builder {
            get::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                plan_id,
                suite_id,
                test_case_ids,
            }
        }
        #[doc = "Add test cases to suite."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `plan_id`: ID of the test plan that contains the suite."]
        #[doc = "* `suite_id`: ID of the test suite to which the test cases must be added."]
        #[doc = "* `test_case_ids`: IDs of the test cases to add to the suite. Ids are specified in comma separated format."]
        pub fn add(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            plan_id: i32,
            suite_id: i32,
            test_case_ids: impl Into<String>,
        ) -> add::Builder {
            add::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                plan_id,
                suite_id,
                test_case_ids: test_case_ids.into(),
            }
        }
        #[doc = "Updates the properties of the test case association in a suite."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `body`: Model for updation of the properties of test case suite association."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `plan_id`: ID of the test plan that contains the suite."]
        #[doc = "* `suite_id`: ID of the test suite to which the test cases must be added."]
        #[doc = "* `test_case_ids`: IDs of the test cases to add to the suite. Ids are specified in comma separated format."]
        pub fn update(
            &self,
            organization: impl Into<String>,
            body: impl Into<models::SuiteTestCaseUpdateModel>,
            project: impl Into<String>,
            plan_id: i32,
            suite_id: i32,
            test_case_ids: impl Into<String>,
        ) -> update::Builder {
            update::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body: body.into(),
                project: project.into(),
                plan_id,
                suite_id,
                test_case_ids: test_case_ids.into(),
            }
        }
        #[doc = "The test points associated with the test cases are removed from the test suite. The test case work item is not deleted from the system. See test cases resource to delete a test case permanently."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `plan_id`: ID of the test plan that contains the suite."]
        #[doc = "* `suite_id`: ID of the suite to get."]
        #[doc = "* `test_case_ids`: IDs of the test cases to remove from the suite."]
        pub fn remove_test_cases_from_suite_url(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            plan_id: i32,
            suite_id: i32,
            test_case_ids: impl Into<String>,
        ) -> remove_test_cases_from_suite_url::Builder {
            remove_test_cases_from_suite_url::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                plan_id,
                suite_id,
                test_case_ids: test_case_ids.into(),
            }
        }
    }
    pub mod list {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::SuiteTestCaseList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) plan_id: i32,
            pub(crate) suite_id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Plans/{}/suites/{}/testcases",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.plan_id,
                            &this.suite_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::SuiteTestCaseList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod get {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::SuiteTestCase;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) plan_id: i32,
            pub(crate) suite_id: i32,
            pub(crate) test_case_ids: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Plans/{}/suites/{}/testcases/{}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.plan_id,
                            &this.suite_id,
                            &this.test_case_ids
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::SuiteTestCase =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod add {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::SuiteTestCaseList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) plan_id: i32,
            pub(crate) suite_id: i32,
            pub(crate) test_case_ids: String,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Plans/{}/suites/{}/testcases/{}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.plan_id,
                            &this.suite_id,
                            &this.test_case_ids
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::POST);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.header(http::header::CONTENT_LENGTH, 0);
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::SuiteTestCaseList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod update {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::SuiteTestCaseList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: models::SuiteTestCaseUpdateModel,
            pub(crate) project: String,
            pub(crate) plan_id: i32,
            pub(crate) suite_id: i32,
            pub(crate) test_case_ids: String,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Plans/{}/suites/{}/testcases/{}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.plan_id,
                            &this.suite_id,
                            &this.test_case_ids
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::PATCH);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        req_builder = req_builder.header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.body)?;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::SuiteTestCaseList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod remove_test_cases_from_suite_url {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) plan_id: i32,
            pub(crate) suite_id: i32,
            pub(crate) test_case_ids: String,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Plans/{}/suites/{}/testcases/{}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.plan_id,
                            &this.suite_id,
                            &this.test_case_ids
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::DELETE);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => Ok(()),
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
}
pub mod result_retention_settings {
    use super::models;
    pub struct Client(pub(crate) super::Client);
    impl Client {
        #[doc = "Get test result retention settings"]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        pub fn get(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
        ) -> get::Builder {
            get::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
            }
        }
        #[doc = "Update test result retention settings"]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `body`: Test result retention settings details to be updated"]
        #[doc = "* `project`: Project ID or project name"]
        pub fn update(
            &self,
            organization: impl Into<String>,
            body: impl Into<models::ResultRetentionSettings>,
            project: impl Into<String>,
        ) -> update::Builder {
            update::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body: body.into(),
                project: project.into(),
            }
        }
    }
    pub mod get {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::ResultRetentionSettings;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/resultretentionsettings",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::ResultRetentionSettings =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod update {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::ResultRetentionSettings;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: models::ResultRetentionSettings,
            pub(crate) project: String,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/resultretentionsettings",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::PATCH);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        req_builder = req_builder.header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.body)?;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::ResultRetentionSettings =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
}
pub mod test_history {
    use super::models;
    pub struct Client(pub(crate) super::Client);
    impl Client {
        #[doc = "Get history of a test method using TestHistoryQuery"]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `body`: TestHistoryQuery to get history"]
        #[doc = "* `project`: Project ID or project name"]
        pub fn query(
            &self,
            organization: impl Into<String>,
            body: impl Into<models::TestHistoryQuery>,
            project: impl Into<String>,
        ) -> query::Builder {
            query::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body: body.into(),
                project: project.into(),
            }
        }
    }
    pub mod query {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestHistoryQuery;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: models::TestHistoryQuery,
            pub(crate) project: String,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Results/testhistory",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::POST);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        req_builder = req_builder.header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.body)?;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestHistoryQuery =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
}
pub mod results {
    use super::models;
    pub struct Client(pub(crate) super::Client);
    impl Client {
        #[doc = "Get test results for a test run."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: Test run ID of test results to fetch."]
        pub fn list(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            run_id: i32,
        ) -> list::Builder {
            list::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                run_id,
                details_to_include: None,
                skip: None,
                top: None,
                outcomes: None,
            }
        }
        #[doc = "Add test results to a test run."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `body`: List of test results to add."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: Test run ID into which test results to add."]
        pub fn add(
            &self,
            organization: impl Into<String>,
            body: Vec<models::TestCaseResult>,
            project: impl Into<String>,
            run_id: i32,
        ) -> add::Builder {
            add::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body,
                project: project.into(),
                run_id,
            }
        }
        #[doc = "Update test results in a test run."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `body`: List of test results to update."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: Test run ID whose test results to update."]
        pub fn update(
            &self,
            organization: impl Into<String>,
            body: Vec<models::TestCaseResult>,
            project: impl Into<String>,
            run_id: i32,
        ) -> update::Builder {
            update::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body,
                project: project.into(),
                run_id,
            }
        }
        #[doc = "Get a test result for a test run."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: Test run ID of a test result to fetch."]
        #[doc = "* `test_case_result_id`: Test result ID."]
        pub fn get(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            run_id: i32,
            test_case_result_id: i32,
        ) -> get::Builder {
            get::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                run_id,
                test_case_result_id,
                details_to_include: None,
            }
        }
    }
    pub mod list {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestCaseResultList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) run_id: i32,
            pub(crate) details_to_include: Option<String>,
            pub(crate) skip: Option<i32>,
            pub(crate) top: Option<i32>,
            pub(crate) outcomes: Option<String>,
        }
        impl Builder {
            #[doc = "Details to include with test results. Default is None. Other values are Iterations and WorkItems."]
            pub fn details_to_include(mut self, details_to_include: impl Into<String>) -> Self {
                self.details_to_include = Some(details_to_include.into());
                self
            }
            #[doc = "Number of test results to skip from beginning."]
            pub fn skip(mut self, skip: i32) -> Self {
                self.skip = Some(skip);
                self
            }
            #[doc = "Number of test results to return. Maximum is 1000 when details_to_include is None and 200 otherwise."]
            pub fn top(mut self, top: i32) -> Self {
                self.top = Some(top);
                self
            }
            #[doc = "Comma separated list of test outcomes to filter test results."]
            pub fn outcomes(mut self, outcomes: impl Into<String>) -> Self {
                self.outcomes = Some(outcomes.into());
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Runs/{}/results",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        if let Some(details_to_include) = &this.details_to_include {
                            url.query_pairs_mut()
                                .append_pair("detailsToInclude", details_to_include);
                        }
                        if let Some(skip) = &this.skip {
                            url.query_pairs_mut()
                                .append_pair("$skip", &skip.to_string());
                        }
                        if let Some(top) = &this.top {
                            url.query_pairs_mut().append_pair("$top", &top.to_string());
                        }
                        if let Some(outcomes) = &this.outcomes {
                            url.query_pairs_mut().append_pair("outcomes", outcomes);
                        }
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestCaseResultList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod add {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestCaseResultList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: Vec<models::TestCaseResult>,
            pub(crate) project: String,
            pub(crate) run_id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Runs/{}/results",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::POST);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        req_builder = req_builder.header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.body)?;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestCaseResultList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod update {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestCaseResultList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: Vec<models::TestCaseResult>,
            pub(crate) project: String,
            pub(crate) run_id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Runs/{}/results",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::PATCH);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        req_builder = req_builder.header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.body)?;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestCaseResultList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod get {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestCaseResult;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) run_id: i32,
            pub(crate) test_case_result_id: i32,
            pub(crate) details_to_include: Option<String>,
        }
        impl Builder {
            #[doc = "Details to include with test results. Default is None. Other values are Iterations, WorkItems and SubResults."]
            pub fn details_to_include(mut self, details_to_include: impl Into<String>) -> Self {
                self.details_to_include = Some(details_to_include.into());
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Runs/{}/results/{}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id,
                            &this.test_case_result_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        if let Some(details_to_include) = &this.details_to_include {
                            url.query_pairs_mut()
                                .append_pair("detailsToInclude", details_to_include);
                        }
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestCaseResult =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
}
pub mod iterations {
    use super::models;
    pub struct Client(pub(crate) super::Client);
    impl Client {
        #[doc = "Get iterations for a result"]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: ID of the test run that contains the result."]
        #[doc = "* `test_case_result_id`: ID of the test result that contains the iterations."]
        pub fn list(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            run_id: i32,
            test_case_result_id: i32,
        ) -> list::Builder {
            list::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                run_id,
                test_case_result_id,
                include_action_results: None,
            }
        }
        #[doc = "Get iteration for a result"]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `run_id`: ID of the test run that contains the result."]
        #[doc = "* `test_case_result_id`: ID of the test result that contains the iterations."]
        #[doc = "* `iteration_id`: Id of the test results Iteration."]
        pub fn get(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            run_id: i32,
            test_case_result_id: i32,
            iteration_id: i32,
        ) -> get::Builder {
            get::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                run_id,
                test_case_result_id,
                iteration_id,
                include_action_results: None,
            }
        }
    }
    pub mod list {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestIterationDetailsModelList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) run_id: i32,
            pub(crate) test_case_result_id: i32,
            pub(crate) include_action_results: Option<bool>,
        }
        impl Builder {
            #[doc = "Include result details for each action performed in the test iteration. ActionResults refer to outcome (pass/fail) of test steps that are executed as part of a running a manual test. Including the ActionResults flag gets the outcome of test steps in the actionResults section and test parameters in the parameters section for each test iteration."]
            pub fn include_action_results(mut self, include_action_results: bool) -> Self {
                self.include_action_results = Some(include_action_results);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Runs/{}/Results/{}/iterations",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id,
                            &this.test_case_result_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        if let Some(include_action_results) = &this.include_action_results {
                            url.query_pairs_mut().append_pair(
                                "includeActionResults",
                                &include_action_results.to_string(),
                            );
                        }
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestIterationDetailsModelList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod get {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestIterationDetailsModel;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) run_id: i32,
            pub(crate) test_case_result_id: i32,
            pub(crate) iteration_id: i32,
            pub(crate) include_action_results: Option<bool>,
        }
        impl Builder {
            #[doc = "Include result details for each action performed in the test iteration. ActionResults refer to outcome (pass/fail) of test steps that are executed as part of a running a manual test. Including the ActionResults flag gets the outcome of test steps in the actionResults section and test parameters in the parameters section for each test iteration."]
            pub fn include_action_results(mut self, include_action_results: bool) -> Self {
                self.include_action_results = Some(include_action_results);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/Runs/{}/Results/{}/iterations/{}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.run_id,
                            &this.test_case_result_id,
                            &this.iteration_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        if let Some(include_action_results) = &this.include_action_results {
                            url.query_pairs_mut().append_pair(
                                "includeActionResults",
                                &include_action_results.to_string(),
                            );
                        }
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestIterationDetailsModel =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
}
pub mod test_cases {
    use super::models;
    pub struct Client(pub(crate) super::Client);
    impl Client {
        #[doc = "Delete a test case."]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `test_case_id`: Id of test case to delete."]
        pub fn delete(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            test_case_id: i32,
        ) -> delete::Builder {
            delete::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                test_case_id,
            }
        }
    }
    pub mod delete {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = ();
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) test_case_id: i32,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/_apis/test/testcases/{}",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.test_case_id
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::DELETE);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => Ok(()),
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
}
pub mod session {
    use super::models;
    pub struct Client(pub(crate) super::Client);
    impl Client {
        #[doc = "Get a list of test sessions"]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `team`: Team ID or team name"]
        pub fn list(
            &self,
            organization: impl Into<String>,
            project: impl Into<String>,
            team: impl Into<String>,
        ) -> list::Builder {
            list::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                project: project.into(),
                team: team.into(),
                period: None,
                all_sessions: None,
                include_all_properties: None,
                source: None,
                include_only_completed_sessions: None,
            }
        }
        #[doc = "Create a test session"]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `body`: Test session details for creation"]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `team`: Team ID or team name"]
        pub fn create(
            &self,
            organization: impl Into<String>,
            body: impl Into<models::TestSession>,
            project: impl Into<String>,
            team: impl Into<String>,
        ) -> create::Builder {
            create::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body: body.into(),
                project: project.into(),
                team: team.into(),
            }
        }
        #[doc = "Update a test session"]
        #[doc = ""]
        #[doc = "Arguments:"]
        #[doc = "* `organization`: The name of the Azure DevOps organization."]
        #[doc = "* `body`: Test session details for update"]
        #[doc = "* `project`: Project ID or project name"]
        #[doc = "* `team`: Team ID or team name"]
        pub fn update(
            &self,
            organization: impl Into<String>,
            body: impl Into<models::TestSession>,
            project: impl Into<String>,
            team: impl Into<String>,
        ) -> update::Builder {
            update::Builder {
                client: self.0.clone(),
                organization: organization.into(),
                body: body.into(),
                project: project.into(),
                team: team.into(),
            }
        }
    }
    pub mod list {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestSessionList;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) project: String,
            pub(crate) team: String,
            pub(crate) period: Option<i32>,
            pub(crate) all_sessions: Option<bool>,
            pub(crate) include_all_properties: Option<bool>,
            pub(crate) source: Option<String>,
            pub(crate) include_only_completed_sessions: Option<bool>,
        }
        impl Builder {
            #[doc = "Period in days from now, for which test sessions are fetched."]
            pub fn period(mut self, period: i32) -> Self {
                self.period = Some(period);
                self
            }
            #[doc = "If false, returns test sessions for current user. Otherwise, it returns test sessions for all users"]
            pub fn all_sessions(mut self, all_sessions: bool) -> Self {
                self.all_sessions = Some(all_sessions);
                self
            }
            #[doc = "If true, it returns all properties of the test sessions. Otherwise, it returns the skinny version."]
            pub fn include_all_properties(mut self, include_all_properties: bool) -> Self {
                self.include_all_properties = Some(include_all_properties);
                self
            }
            #[doc = "Source of the test session."]
            pub fn source(mut self, source: impl Into<String>) -> Self {
                self.source = Some(source.into());
                self
            }
            #[doc = "If true, it returns test sessions in completed state. Otherwise, it returns test sessions for all states"]
            pub fn include_only_completed_sessions(
                mut self,
                include_only_completed_sessions: bool,
            ) -> Self {
                self.include_only_completed_sessions = Some(include_only_completed_sessions);
                self
            }
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/{}/_apis/test/session",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.team
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::GET);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        if let Some(period) = &this.period {
                            url.query_pairs_mut()
                                .append_pair("period", &period.to_string());
                        }
                        if let Some(all_sessions) = &this.all_sessions {
                            url.query_pairs_mut()
                                .append_pair("allSessions", &all_sessions.to_string());
                        }
                        if let Some(include_all_properties) = &this.include_all_properties {
                            url.query_pairs_mut().append_pair(
                                "includeAllProperties",
                                &include_all_properties.to_string(),
                            );
                        }
                        if let Some(source) = &this.source {
                            url.query_pairs_mut().append_pair("source", source);
                        }
                        if let Some(include_only_completed_sessions) =
                            &this.include_only_completed_sessions
                        {
                            url.query_pairs_mut().append_pair(
                                "includeOnlyCompletedSessions",
                                &include_only_completed_sessions.to_string(),
                            );
                        }
                        let req_body = azure_core::EMPTY_BODY;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestSessionList =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod create {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestSession;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: models::TestSession,
            pub(crate) project: String,
            pub(crate) team: String,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/{}/_apis/test/session",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.team
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::POST);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        req_builder = req_builder.header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.body)?;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestSession =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
    pub mod update {
        use super::models;
        use azure_core::error::ResultExt;
        type Response = models::TestSession;
        #[derive(Clone)]
        pub struct Builder {
            pub(crate) client: super::super::Client,
            pub(crate) organization: String,
            pub(crate) body: models::TestSession,
            pub(crate) project: String,
            pub(crate) team: String,
        }
        impl Builder {
            pub fn into_future(
                self,
            ) -> futures::future::BoxFuture<'static, azure_core::error::Result<Response>>
            {
                Box::pin({
                    let this = self.clone();
                    async move {
                        let url_str = &format!(
                            "{}/{}/{}/{}/_apis/test/session",
                            this.client.endpoint(),
                            &this.organization,
                            &this.project,
                            &this.team
                        );
                        let mut url = url::Url::parse(url_str)
                            .context(azure_core::error::ErrorKind::DataConversion, "parse url")?;
                        let mut req_builder = http::request::Builder::new();
                        req_builder = req_builder.method(http::Method::PATCH);
                        req_builder = req_builder.header(
                            http::header::AUTHORIZATION,
                            &this
                                .client
                                .credential()
                                .http_authorization_header(&this.client.scopes)
                                .await?,
                        );
                        url.query_pairs_mut()
                            .append_pair("api-version", "7.1-preview");
                        req_builder = req_builder.header("content-type", "application/json");
                        let req_body = azure_core::to_json(&this.body)?;
                        req_builder = req_builder.uri(url.as_str());
                        let req = req_builder
                            .body(req_body)
                            .context(azure_core::error::ErrorKind::Other, "build request")?;
                        let rsp = this
                            .client
                            .send(req)
                            .await
                            .context(azure_core::error::ErrorKind::Io, "execute request")?;
                        let (rsp_status, rsp_headers, rsp_stream) = rsp.deconstruct();
                        match rsp_status {
                            http::StatusCode::OK => {
                                let rsp_body =
                                    azure_core::collect_pinned_stream(rsp_stream).await?;
                                let rsp_value: models::TestSession =
                                    serde_json::from_slice(&rsp_body)?;
                                Ok(rsp_value)
                            }
                            status_code => Err(azure_core::error::Error::from(
                                azure_core::error::ErrorKind::HttpResponse {
                                    status: status_code.as_u16(),
                                    error_code: None,
                                },
                            )),
                        }
                    }
                })
            }
        }
    }
}
