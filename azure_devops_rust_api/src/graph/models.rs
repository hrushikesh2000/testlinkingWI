#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Avatar {
    #[serde(
        rename = "isAutoGenerated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_auto_generated: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<avatar::Size>,
    #[serde(rename = "timeStamp", default, skip_serializing_if = "Option::is_none")]
    pub time_stamp: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<String>,
}
pub mod avatar {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Size {
        #[serde(rename = "small")]
        Small,
        #[serde(rename = "medium")]
        Medium,
        #[serde(rename = "large")]
        Large,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphCachePolicies {
    #[serde(rename = "cacheSize", default, skip_serializing_if = "Option::is_none")]
    pub cache_size: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphDescriptorResult {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphFederatedProviderData {
    #[serde(
        rename = "accessToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub access_token: Option<String>,
    #[serde(
        rename = "providerName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub provider_name: Option<String>,
    #[serde(
        rename = "subjectDescriptor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub subject_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphGlobalExtendedPropertyBatch {
    #[serde(
        rename = "propertyNameFilters",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub property_name_filters: Vec<String>,
    #[serde(
        rename = "subjectDescriptors",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub subject_descriptors: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphGroup {
    #[serde(flatten)]
    pub graph_member: GraphMember,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphGroupCreationContext {
    #[serde(
        rename = "storageKey",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub storage_key: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphGroupMailAddressCreationContext {
    #[serde(flatten)]
    pub graph_group_creation_context: GraphGroupCreationContext,
    #[serde(
        rename = "mailAddress",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub mail_address: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphGroupOriginIdCreationContext {
    #[serde(flatten)]
    pub graph_group_creation_context: GraphGroupCreationContext,
    #[serde(rename = "originId", default, skip_serializing_if = "Option::is_none")]
    pub origin_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphGroupVstsCreationContext {
    #[serde(flatten)]
    pub graph_group_creation_context: GraphGroupCreationContext,
    #[serde(
        rename = "crossProject",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub cross_project: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(
        rename = "restrictedVisibility",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub restricted_visibility: Option<bool>,
    #[serde(
        rename = "specialGroupType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub special_group_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphMember {
    #[serde(flatten)]
    pub graph_subject: GraphSubject,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    #[serde(
        rename = "mailAddress",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub mail_address: Option<String>,
    #[serde(
        rename = "principalName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub principal_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphMembership {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(
        rename = "containerDescriptor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub container_descriptor: Option<String>,
    #[serde(
        rename = "memberDescriptor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub member_descriptor: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphMembershipState {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphMembershipTraversal {
    #[serde(
        rename = "incompletenessReason",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub incompleteness_reason: Option<String>,
    #[serde(
        rename = "isComplete",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_complete: Option<bool>,
    #[serde(
        rename = "subjectDescriptor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub subject_descriptor: Option<String>,
    #[serde(
        rename = "traversedSubjectIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub traversed_subject_ids: Vec<String>,
    #[serde(
        rename = "traversedSubjects",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub traversed_subjects: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphProviderInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(rename = "originId", default, skip_serializing_if = "Option::is_none")]
    pub origin_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphScope {
    #[serde(flatten)]
    pub graph_subject: GraphSubject,
    #[serde(
        rename = "administratorDescriptor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub administrator_descriptor: Option<String>,
    #[serde(rename = "isGlobal", default, skip_serializing_if = "Option::is_none")]
    pub is_global: Option<bool>,
    #[serde(
        rename = "parentDescriptor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub parent_descriptor: Option<String>,
    #[serde(rename = "scopeType", default, skip_serializing_if = "Option::is_none")]
    pub scope_type: Option<graph_scope::ScopeType>,
    #[serde(
        rename = "securingHostDescriptor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub securing_host_descriptor: Option<String>,
}
pub mod graph_scope {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ScopeType {
        #[serde(rename = "generic")]
        Generic,
        #[serde(rename = "serviceHost")]
        ServiceHost,
        #[serde(rename = "teamProject")]
        TeamProject,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphScopeCreationContext {
    #[serde(
        rename = "adminGroupDescription",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub admin_group_description: Option<String>,
    #[serde(
        rename = "adminGroupName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub admin_group_name: Option<String>,
    #[serde(rename = "creatorId", default, skip_serializing_if = "Option::is_none")]
    pub creator_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "scopeType", default, skip_serializing_if = "Option::is_none")]
    pub scope_type: Option<graph_scope_creation_context::ScopeType>,
    #[serde(
        rename = "storageKey",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub storage_key: Option<String>,
}
pub mod graph_scope_creation_context {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ScopeType {
        #[serde(rename = "generic")]
        Generic,
        #[serde(rename = "serviceHost")]
        ServiceHost,
        #[serde(rename = "teamProject")]
        TeamProject,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphStorageKeyResult {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubject {
    #[serde(flatten)]
    pub graph_subject_base: GraphSubjectBase,
    #[serde(
        rename = "legacyDescriptor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub legacy_descriptor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(rename = "originId", default, skip_serializing_if = "Option::is_none")]
    pub origin_id: Option<String>,
    #[serde(
        rename = "subjectKind",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub subject_kind: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectBase {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectLookup {
    #[serde(rename = "lookupKeys", default, skip_serializing_if = "Vec::is_empty")]
    pub lookup_keys: Vec<GraphSubjectLookupKey>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectLookupKey {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectQuery {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub query: Option<String>,
    #[serde(
        rename = "scopeDescriptor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub scope_descriptor: Option<String>,
    #[serde(rename = "subjectKind", default, skip_serializing_if = "Vec::is_empty")]
    pub subject_kind: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSystemSubject {
    #[serde(flatten)]
    pub graph_subject: GraphSubject,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphUser {
    #[serde(flatten)]
    pub graph_member: GraphMember,
    #[serde(
        rename = "directoryAlias",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub directory_alias: Option<String>,
    #[serde(
        rename = "isDeletedInOrigin",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_deleted_in_origin: Option<bool>,
    #[serde(rename = "metaType", default, skip_serializing_if = "Option::is_none")]
    pub meta_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphUserCreationContext {
    #[serde(
        rename = "storageKey",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub storage_key: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphUserMailAddressCreationContext {
    #[serde(flatten)]
    pub graph_user_creation_context: GraphUserCreationContext,
    #[serde(
        rename = "mailAddress",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub mail_address: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphUserOriginIdCreationContext {
    #[serde(flatten)]
    pub graph_user_creation_context: GraphUserCreationContext,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(rename = "originId", default, skip_serializing_if = "Option::is_none")]
    pub origin_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphUserOriginIdUpdateContext {
    #[serde(flatten)]
    pub graph_user_update_context: GraphUserUpdateContext,
    #[serde(rename = "originId", default, skip_serializing_if = "Option::is_none")]
    pub origin_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphUserPrincipalNameCreationContext {
    #[serde(flatten)]
    pub graph_user_creation_context: GraphUserCreationContext,
    #[serde(
        rename = "principalName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub principal_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphUserUpdateContext {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonPatchDocument {
    #[serde(flatten)]
    pub vec_json_patch_operation: Vec<JsonPatchOperation>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonPatchOperation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub op: Option<json_patch_operation::Op>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
}
pub mod json_patch_operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Op {
        #[serde(rename = "add")]
        Add,
        #[serde(rename = "remove")]
        Remove,
        #[serde(rename = "replace")]
        Replace,
        #[serde(rename = "move")]
        Move,
        #[serde(rename = "copy")]
        Copy,
        #[serde(rename = "test")]
        Test,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JToken {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub first: Box<Option<JToken>>,
    #[serde(rename = "hasValues", default, skip_serializing_if = "Option::is_none")]
    pub has_values: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub item: Box<Option<JToken>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub last: Box<Option<JToken>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub next: Box<Option<JToken>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub previous: Box<Option<JToken>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub root: Box<Option<JToken>>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PagedGraphGroups {
    #[serde(
        rename = "continuationToken",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub continuation_token: Vec<String>,
    #[serde(rename = "graphGroups", default, skip_serializing_if = "Vec::is_empty")]
    pub graph_groups: Vec<GraphGroup>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PagedGraphUsers {
    #[serde(
        rename = "continuationToken",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub continuation_token: Vec<String>,
    #[serde(rename = "graphUsers", default, skip_serializing_if = "Vec::is_empty")]
    pub graph_users: Vec<GraphUser>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RequestAccessPayLoad {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(
        rename = "projectUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_uri: Option<String>,
    #[serde(
        rename = "urlRequested",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub url_requested: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphGroupList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GraphGroup>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphMembershipList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GraphMembership>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GraphSubject>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphUserList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<GraphUser>,
}
