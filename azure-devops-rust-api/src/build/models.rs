#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentPoolQueue {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pool: Option<TaskAgentPoolReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentPoolQueueReference {
    #[serde(flatten)]
    pub resource_reference: ResourceReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentPoolQueueTarget {
    #[serde(flatten)]
    pub phase_target: PhaseTarget,
    #[serde(
        rename = "agentSpecification",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_specification: Option<AgentSpecification>,
    #[serde(
        rename = "allowScriptsAuthAccessOption",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub allow_scripts_auth_access_option: Option<bool>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub demands: Vec<Demand>,
    #[serde(
        rename = "executionOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub execution_options: Option<AgentTargetExecutionOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue: Option<AgentPoolQueue>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentTargetExecutionOptions {
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AggregatedResultsAnalysis {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(
        rename = "notReportedResultsByOutcome",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub not_reported_results_by_outcome: Option<serde_json::Value>,
    #[serde(
        rename = "previousContext",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub previous_context: Option<TestResultsContext>,
    #[serde(
        rename = "resultsByOutcome",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub results_by_outcome: Option<serde_json::Value>,
    #[serde(
        rename = "resultsDifference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub results_difference: Option<AggregatedResultsDifference>,
    #[serde(
        rename = "runSummaryByOutcome",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_summary_by_outcome: Option<serde_json::Value>,
    #[serde(
        rename = "runSummaryByState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_summary_by_state: Option<serde_json::Value>,
    #[serde(
        rename = "totalTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_tests: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AggregatedResultsByOutcome {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(
        rename = "groupByField",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub group_by_field: Option<String>,
    #[serde(
        rename = "groupByValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub group_by_value: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<aggregated_results_by_outcome::Outcome>,
    #[serde(
        rename = "rerunResultCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub rerun_result_count: Option<i32>,
}
pub mod aggregated_results_by_outcome {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Outcome {
        #[serde(rename = "unspecified")]
        Unspecified,
        #[serde(rename = "none")]
        None,
        #[serde(rename = "passed")]
        Passed,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "inconclusive")]
        Inconclusive,
        #[serde(rename = "timeout")]
        Timeout,
        #[serde(rename = "aborted")]
        Aborted,
        #[serde(rename = "blocked")]
        Blocked,
        #[serde(rename = "notExecuted")]
        NotExecuted,
        #[serde(rename = "warning")]
        Warning,
        #[serde(rename = "error")]
        Error,
        #[serde(rename = "notApplicable")]
        NotApplicable,
        #[serde(rename = "paused")]
        Paused,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "notImpacted")]
        NotImpacted,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AggregatedResultsDifference {
    #[serde(
        rename = "increaseInDuration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub increase_in_duration: Option<String>,
    #[serde(
        rename = "increaseInFailures",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub increase_in_failures: Option<i32>,
    #[serde(
        rename = "increaseInNonImpactedTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub increase_in_non_impacted_tests: Option<i32>,
    #[serde(
        rename = "increaseInOtherTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub increase_in_other_tests: Option<i32>,
    #[serde(
        rename = "increaseInPassedTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub increase_in_passed_tests: Option<i32>,
    #[serde(
        rename = "increaseInTotalTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub increase_in_total_tests: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AggregatedRunsByOutcome {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<aggregated_runs_by_outcome::Outcome>,
    #[serde(rename = "runsCount", default, skip_serializing_if = "Option::is_none")]
    pub runs_count: Option<i32>,
}
pub mod aggregated_runs_by_outcome {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Outcome {
        #[serde(rename = "passed")]
        Passed,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "notImpacted")]
        NotImpacted,
        #[serde(rename = "others")]
        Others,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AggregatedRunsByState {
    #[serde(
        rename = "resultsByOutcome",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub results_by_outcome: Option<serde_json::Value>,
    #[serde(rename = "runsCount", default, skip_serializing_if = "Option::is_none")]
    pub runs_count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<aggregated_runs_by_state::State>,
}
pub mod aggregated_runs_by_state {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "unspecified")]
        Unspecified,
        #[serde(rename = "notStarted")]
        NotStarted,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "aborted")]
        Aborted,
        #[serde(rename = "waiting")]
        Waiting,
        #[serde(rename = "needsInvestigation")]
        NeedsInvestigation,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactResource {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,
    #[serde(
        rename = "downloadUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub download_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AssociatedWorkItem {
    #[serde(
        rename = "assignedTo",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_to: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "webUrl", default, skip_serializing_if = "Option::is_none")]
    pub web_url: Option<String>,
    #[serde(
        rename = "workItemType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Attachment {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AuthorizationHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Build {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(
        rename = "agentSpecification",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_specification: Option<AgentSpecification>,
    #[serde(
        rename = "buildNumber",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_number: Option<String>,
    #[serde(
        rename = "buildNumberRevision",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_number_revision: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller: Option<BuildController>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<DefinitionReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    #[serde(rename = "deletedBy", default, skip_serializing_if = "Option::is_none")]
    pub deleted_by: Option<IdentityRef>,
    #[serde(
        rename = "deletedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deleted_date: Option<String>,
    #[serde(
        rename = "deletedReason",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deleted_reason: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub demands: Vec<Demand>,
    #[serde(
        rename = "finishTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub finish_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "lastChangedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_changed_by: Option<IdentityRef>,
    #[serde(
        rename = "lastChangedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_changed_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logs: Option<BuildLogReference>,
    #[serde(
        rename = "orchestrationPlan",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub orchestration_plan: Option<TaskOrchestrationPlanReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub plans: Vec<TaskOrchestrationPlanReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<build::Priority>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<PropertiesCollection>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quality: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue: Option<AgentPoolQueue>,
    #[serde(
        rename = "queueOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub queue_options: Option<build::QueueOptions>,
    #[serde(
        rename = "queuePosition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub queue_position: Option<i32>,
    #[serde(rename = "queueTime", default, skip_serializing_if = "Option::is_none")]
    pub queue_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<build::Reason>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<BuildRepository>,
    #[serde(
        rename = "requestedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_by: Option<IdentityRef>,
    #[serde(
        rename = "requestedFor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_for: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<build::Result>,
    #[serde(
        rename = "retainedByRelease",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub retained_by_release: Option<bool>,
    #[serde(
        rename = "sourceBranch",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_branch: Option<String>,
    #[serde(
        rename = "sourceVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_version: Option<String>,
    #[serde(rename = "startTime", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<build::Status>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
    #[serde(
        rename = "templateParameters",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub template_parameters: Option<serde_json::Value>,
    #[serde(
        rename = "triggeredByBuild",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub triggered_by_build: Box<Option<Build>>,
    #[serde(
        rename = "triggerInfo",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub trigger_info: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(
        rename = "validationResults",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub validation_results: Vec<BuildRequestValidationResult>,
}
pub mod build {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Priority {
        #[serde(rename = "low")]
        Low,
        #[serde(rename = "belowNormal")]
        BelowNormal,
        #[serde(rename = "normal")]
        Normal,
        #[serde(rename = "aboveNormal")]
        AboveNormal,
        #[serde(rename = "high")]
        High,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum QueueOptions {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "doNotRun")]
        DoNotRun,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Reason {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "manual")]
        Manual,
        #[serde(rename = "individualCI")]
        IndividualCi,
        #[serde(rename = "batchedCI")]
        BatchedCi,
        #[serde(rename = "schedule")]
        Schedule,
        #[serde(rename = "scheduleForced")]
        ScheduleForced,
        #[serde(rename = "userCreated")]
        UserCreated,
        #[serde(rename = "validateShelveset")]
        ValidateShelveset,
        #[serde(rename = "checkInShelveset")]
        CheckInShelveset,
        #[serde(rename = "pullRequest")]
        PullRequest,
        #[serde(rename = "buildCompletion")]
        BuildCompletion,
        #[serde(rename = "resourceTrigger")]
        ResourceTrigger,
        #[serde(rename = "triggered")]
        Triggered,
        #[serde(rename = "all")]
        All,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "partiallySucceeded")]
        PartiallySucceeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "canceled")]
        Canceled,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "cancelling")]
        Cancelling,
        #[serde(rename = "postponed")]
        Postponed,
        #[serde(rename = "notStarted")]
        NotStarted,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildAgent {
    #[serde(
        rename = "buildDirectory",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_directory: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller: Option<XamlBuildControllerReference>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "messageQueueUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub message_queue_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "reservedForBuild",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reserved_for_build: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub server: Option<XamlBuildServerReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<build_agent::Status>,
    #[serde(
        rename = "statusMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub status_message: Option<String>,
    #[serde(
        rename = "updatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub updated_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod build_agent {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "unavailable")]
        Unavailable,
        #[serde(rename = "available")]
        Available,
        #[serde(rename = "offline")]
        Offline,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildAgentReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildArtifact {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<ArtifactResource>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildBadge {
    #[serde(rename = "buildId", default, skip_serializing_if = "Option::is_none")]
    pub build_id: Option<i32>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildCompletedEvent {
    #[serde(flatten)]
    pub build_updated_event: BuildUpdatedEvent,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub changes: Vec<Change>,
    #[serde(
        rename = "pullRequest",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pull_request: Option<PullRequest>,
    #[serde(
        rename = "testResults",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_results: Option<AggregatedResultsAnalysis>,
    #[serde(
        rename = "timelineRecords",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub timeline_records: Vec<TimelineRecord>,
    #[serde(rename = "workItems", default, skip_serializing_if = "Vec::is_empty")]
    pub work_items: Vec<AssociatedWorkItem>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildCompletionTrigger {
    #[serde(flatten)]
    pub build_trigger: BuildTrigger,
    #[serde(
        rename = "branchFilters",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub branch_filters: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<DefinitionReference>,
    #[serde(
        rename = "requiresSuccessfulBuild",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requires_successful_build: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildController {
    #[serde(flatten)]
    pub xaml_build_controller_reference: XamlBuildControllerReference,
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<build_controller::Status>,
    #[serde(
        rename = "updatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub updated_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}
pub mod build_controller {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "unavailable")]
        Unavailable,
        #[serde(rename = "available")]
        Available,
        #[serde(rename = "offline")]
        Offline,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildDefinition {
    #[serde(flatten)]
    pub build_definition_reference: BuildDefinitionReference,
    #[serde(
        rename = "badgeEnabled",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub badge_enabled: Option<bool>,
    #[serde(
        rename = "buildNumberFormat",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_number_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub demands: Vec<Demand>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "dropLocation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub drop_location: Option<String>,
    #[serde(
        rename = "jobAuthorizationScope",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_authorization_scope: Option<build_definition::JobAuthorizationScope>,
    #[serde(
        rename = "jobCancelTimeoutInMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_cancel_timeout_in_minutes: Option<i32>,
    #[serde(
        rename = "jobTimeoutInMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_timeout_in_minutes: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub options: Vec<BuildOption>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub process: Option<BuildProcess>,
    #[serde(
        rename = "processParameters",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub process_parameters: Option<ProcessParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<PropertiesCollection>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<BuildRepository>,
    #[serde(
        rename = "retentionRules",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub retention_rules: Vec<RetentionPolicy>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub triggers: Vec<BuildTrigger>,
    #[serde(
        rename = "variableGroups",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub variable_groups: Vec<VariableGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
pub mod build_definition {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum JobAuthorizationScope {
        #[serde(rename = "projectCollection")]
        ProjectCollection,
        #[serde(rename = "project")]
        Project,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildDefinition32 {
    #[serde(flatten)]
    pub build_definition_reference32: BuildDefinitionReference32,
    #[serde(
        rename = "badgeEnabled",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub badge_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub build: Vec<BuildDefinitionStep>,
    #[serde(
        rename = "buildNumberFormat",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_number_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub demands: Vec<Demand>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "dropLocation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub drop_location: Option<String>,
    #[serde(
        rename = "jobAuthorizationScope",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_authorization_scope: Option<build_definition3_2::JobAuthorizationScope>,
    #[serde(
        rename = "jobCancelTimeoutInMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_cancel_timeout_in_minutes: Option<i32>,
    #[serde(
        rename = "jobTimeoutInMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_timeout_in_minutes: Option<i32>,
    #[serde(
        rename = "latestBuild",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub latest_build: Option<Build>,
    #[serde(
        rename = "latestCompletedBuild",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub latest_completed_build: Option<Build>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub options: Vec<BuildOption>,
    #[serde(
        rename = "processParameters",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub process_parameters: Option<ProcessParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<PropertiesCollection>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<BuildRepository>,
    #[serde(
        rename = "retentionRules",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub retention_rules: Vec<RetentionPolicy>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub triggers: Vec<BuildTrigger>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
pub mod build_definition3_2 {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum JobAuthorizationScope {
        #[serde(rename = "projectCollection")]
        ProjectCollection,
        #[serde(rename = "project")]
        Project,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildDefinitionReference {
    #[serde(flatten)]
    pub definition_reference: DefinitionReference,
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(
        rename = "authoredBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub authored_by: Option<IdentityRef>,
    #[serde(rename = "draftOf", default, skip_serializing_if = "Option::is_none")]
    pub draft_of: Option<DefinitionReference>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub drafts: Vec<DefinitionReference>,
    #[serde(
        rename = "latestBuild",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub latest_build: Option<Build>,
    #[serde(
        rename = "latestCompletedBuild",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub latest_completed_build: Option<Build>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub metrics: Vec<BuildMetric>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quality: Option<build_definition_reference::Quality>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue: Option<AgentPoolQueue>,
}
pub mod build_definition_reference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Quality {
        #[serde(rename = "definition")]
        Definition,
        #[serde(rename = "draft")]
        Draft,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildDefinitionReference32 {
    #[serde(flatten)]
    pub definition_reference: DefinitionReference,
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(
        rename = "authoredBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub authored_by: Option<IdentityRef>,
    #[serde(rename = "draftOf", default, skip_serializing_if = "Option::is_none")]
    pub draft_of: Option<DefinitionReference>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub drafts: Vec<DefinitionReference>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub metrics: Vec<BuildMetric>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quality: Option<build_definition_reference3_2::Quality>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queue: Option<AgentPoolQueue>,
}
pub mod build_definition_reference3_2 {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Quality {
        #[serde(rename = "definition")]
        Definition,
        #[serde(rename = "draft")]
        Draft,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildDefinitionRevision {
    #[serde(rename = "changedBy", default, skip_serializing_if = "Option::is_none")]
    pub changed_by: Option<IdentityRef>,
    #[serde(
        rename = "changedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub changed_date: Option<String>,
    #[serde(
        rename = "changeType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_type: Option<build_definition_revision::ChangeType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "definitionUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
}
pub mod build_definition_revision {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ChangeType {
        #[serde(rename = "add")]
        Add,
        #[serde(rename = "update")]
        Update,
        #[serde(rename = "delete")]
        Delete,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildDefinitionSourceProvider {
    #[serde(
        rename = "definitionUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "lastModified",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "supportedTriggerTypes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub supported_trigger_types: Option<build_definition_source_provider::SupportedTriggerTypes>,
}
pub mod build_definition_source_provider {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SupportedTriggerTypes {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "continuousIntegration")]
        ContinuousIntegration,
        #[serde(rename = "batchedContinuousIntegration")]
        BatchedContinuousIntegration,
        #[serde(rename = "schedule")]
        Schedule,
        #[serde(rename = "gatedCheckIn")]
        GatedCheckIn,
        #[serde(rename = "batchedGatedCheckIn")]
        BatchedGatedCheckIn,
        #[serde(rename = "pullRequest")]
        PullRequest,
        #[serde(rename = "buildCompletion")]
        BuildCompletion,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildDefinitionStep {
    #[serde(rename = "alwaysRun", default, skip_serializing_if = "Option::is_none")]
    pub always_run: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    #[serde(
        rename = "continueOnError",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continue_on_error: Option<bool>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inputs: Option<serde_json::Value>,
    #[serde(rename = "refName", default, skip_serializing_if = "Option::is_none")]
    pub ref_name: Option<String>,
    #[serde(
        rename = "retryCountOnTaskFailure",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub retry_count_on_task_failure: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub task: Option<TaskDefinitionReference>,
    #[serde(
        rename = "timeoutInMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub timeout_in_minutes: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildDefinitionTemplate {
    #[serde(rename = "canDelete", default, skip_serializing_if = "Option::is_none")]
    pub can_delete: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[serde(
        rename = "defaultHostedQueue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_hosted_queue: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icons: Option<serde_json::Value>,
    #[serde(
        rename = "iconTaskId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub icon_task_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<BuildDefinition>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildDefinitionTemplate32 {
    #[serde(rename = "canDelete", default, skip_serializing_if = "Option::is_none")]
    pub can_delete: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[serde(
        rename = "defaultHostedQueue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_hosted_queue: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icons: Option<serde_json::Value>,
    #[serde(
        rename = "iconTaskId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub icon_task_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template: Option<BuildDefinition32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildDefinitionVariable {
    #[serde(
        rename = "allowOverride",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub allow_override: Option<bool>,
    #[serde(rename = "isSecret", default, skip_serializing_if = "Option::is_none")]
    pub is_secret: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildDeletedEvent {
    #[serde(flatten)]
    pub realtime_build_event: RealtimeBuildEvent,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<Build>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildDeployment {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<BuildSummary>,
    #[serde(
        rename = "sourceBuild",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_build: Option<XamlBuildReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildEvent {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub data: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildLog {
    #[serde(flatten)]
    pub build_log_reference: BuildLogReference,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(
        rename = "lastChangedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_changed_on: Option<String>,
    #[serde(rename = "lineCount", default, skip_serializing_if = "Option::is_none")]
    pub line_count: Option<i64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildLogReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildMetric {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    #[serde(rename = "intValue", default, skip_serializing_if = "Option::is_none")]
    pub int_value: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildOption {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<BuildOptionDefinitionReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inputs: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildOptionDefinition {
    #[serde(flatten)]
    pub build_option_definition_reference: BuildOptionDefinitionReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub groups: Vec<BuildOptionGroupDefinition>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub inputs: Vec<BuildOptionInputDefinition>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ordinal: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildOptionDefinitionReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildOptionGroupDefinition {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(
        rename = "isExpanded",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_expanded: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildOptionInputDefinition {
    #[serde(
        rename = "defaultValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_value: Option<String>,
    #[serde(rename = "groupName", default, skip_serializing_if = "Option::is_none")]
    pub group_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub help: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<build_option_input_definition::Type>,
    #[serde(
        rename = "visibleRule",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub visible_rule: Option<String>,
}
pub mod build_option_input_definition {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "string")]
        String,
        #[serde(rename = "boolean")]
        Boolean,
        #[serde(rename = "stringList")]
        StringList,
        #[serde(rename = "radio")]
        Radio,
        #[serde(rename = "pickList")]
        PickList,
        #[serde(rename = "multiLine")]
        MultiLine,
        #[serde(rename = "branchFilter")]
        BranchFilter,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildProcess {
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildProcessResources {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub endpoints: Vec<ServiceEndpointReference>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub files: Vec<SecureFileReference>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub queues: Vec<AgentPoolQueueReference>,
    #[serde(
        rename = "variableGroups",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub variable_groups: Vec<VariableGroupReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildProcessTemplate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "fileExists",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub file_exists: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<String>,
    #[serde(
        rename = "serverPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub server_path: Option<String>,
    #[serde(
        rename = "supportedReasons",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub supported_reasons: Option<build_process_template::SupportedReasons>,
    #[serde(
        rename = "teamProject",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_project: Option<String>,
    #[serde(
        rename = "templateType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub template_type: Option<build_process_template::TemplateType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
pub mod build_process_template {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SupportedReasons {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "manual")]
        Manual,
        #[serde(rename = "individualCI")]
        IndividualCi,
        #[serde(rename = "batchedCI")]
        BatchedCi,
        #[serde(rename = "schedule")]
        Schedule,
        #[serde(rename = "scheduleForced")]
        ScheduleForced,
        #[serde(rename = "userCreated")]
        UserCreated,
        #[serde(rename = "validateShelveset")]
        ValidateShelveset,
        #[serde(rename = "checkInShelveset")]
        CheckInShelveset,
        #[serde(rename = "pullRequest")]
        PullRequest,
        #[serde(rename = "buildCompletion")]
        BuildCompletion,
        #[serde(rename = "resourceTrigger")]
        ResourceTrigger,
        #[serde(rename = "triggered")]
        Triggered,
        #[serde(rename = "all")]
        All,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TemplateType {
        #[serde(rename = "custom")]
        Custom,
        #[serde(rename = "default")]
        Default,
        #[serde(rename = "upgrade")]
        Upgrade,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildQueuedEvent {
    #[serde(flatten)]
    pub build_updated_event: BuildUpdatedEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildReference {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(
        rename = "buildNumber",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_number: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    #[serde(
        rename = "finishTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub finish_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "queueTime", default, skip_serializing_if = "Option::is_none")]
    pub queue_time: Option<String>,
    #[serde(
        rename = "requestedFor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_for: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<build_reference::Result>,
    #[serde(rename = "startTime", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<build_reference::Status>,
}
pub mod build_reference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "partiallySucceeded")]
        PartiallySucceeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "canceled")]
        Canceled,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "cancelling")]
        Cancelling,
        #[serde(rename = "postponed")]
        Postponed,
        #[serde(rename = "notStarted")]
        NotStarted,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildReportMetadata {
    #[serde(rename = "buildId", default, skip_serializing_if = "Option::is_none")]
    pub build_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildRepository {
    #[serde(
        rename = "checkoutSubmodules",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub checkout_submodules: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clean: Option<String>,
    #[serde(
        rename = "defaultBranch",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_branch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(
        rename = "rootFolder",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub root_folder: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildRequestValidationResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<build_request_validation_result::Result>,
}
pub mod build_request_validation_result {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "ok")]
        Ok,
        #[serde(rename = "warning")]
        Warning,
        #[serde(rename = "error")]
        Error,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildResourceUsage {
    #[serde(
        rename = "distributedTaskAgents",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub distributed_task_agents: Option<i32>,
    #[serde(
        rename = "paidPrivateAgentSlots",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub paid_private_agent_slots: Option<i32>,
    #[serde(
        rename = "totalUsage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_usage: Option<i32>,
    #[serde(
        rename = "xamlControllers",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub xaml_controllers: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildRetentionHistory {
    #[serde(
        rename = "buildRetentionSamples",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub build_retention_samples: Vec<BuildRetentionSample>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildRetentionSample {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub builds: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definitions: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub files: Option<String>,
    #[serde(
        rename = "sampleTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sample_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildsDeletedEvent {
    #[serde(flatten)]
    pub builds_deleted_event1: BuildsDeletedEvent1,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildsDeletedEvent1 {
    #[serde(rename = "buildIds", default, skip_serializing_if = "Vec::is_empty")]
    pub build_ids: Vec<i32>,
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<i32>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildServer {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub agents: Vec<BuildAgentReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller: Option<XamlBuildControllerReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "isVirtual", default, skip_serializing_if = "Option::is_none")]
    pub is_virtual: Option<bool>,
    #[serde(
        rename = "messageQueueUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub message_queue_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "requireClientCertificates",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub require_client_certificates: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<build_server::Status>,
    #[serde(
        rename = "statusChangedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub status_changed_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
}
pub mod build_server {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "online")]
        Online,
        #[serde(rename = "offline")]
        Offline,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildSettings {
    #[serde(
        rename = "daysToKeepDeletedBuildsBeforeDestroy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub days_to_keep_deleted_builds_before_destroy: Option<i32>,
    #[serde(
        rename = "defaultRetentionPolicy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_retention_policy: Option<RetentionPolicy>,
    #[serde(
        rename = "maximumRetentionPolicy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub maximum_retention_policy: Option<RetentionPolicy>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildSummary {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<XamlBuildReference>,
    #[serde(
        rename = "finishTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub finish_time: Option<String>,
    #[serde(
        rename = "keepForever",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub keep_forever: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quality: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<build_summary::Reason>,
    #[serde(
        rename = "requestedFor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_for: Option<IdentityRef>,
    #[serde(rename = "startTime", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<build_summary::Status>,
}
pub mod build_summary {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Reason {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "manual")]
        Manual,
        #[serde(rename = "individualCI")]
        IndividualCi,
        #[serde(rename = "batchedCI")]
        BatchedCi,
        #[serde(rename = "schedule")]
        Schedule,
        #[serde(rename = "scheduleForced")]
        ScheduleForced,
        #[serde(rename = "userCreated")]
        UserCreated,
        #[serde(rename = "validateShelveset")]
        ValidateShelveset,
        #[serde(rename = "checkInShelveset")]
        CheckInShelveset,
        #[serde(rename = "pullRequest")]
        PullRequest,
        #[serde(rename = "buildCompletion")]
        BuildCompletion,
        #[serde(rename = "resourceTrigger")]
        ResourceTrigger,
        #[serde(rename = "triggered")]
        Triggered,
        #[serde(rename = "all")]
        All,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "cancelling")]
        Cancelling,
        #[serde(rename = "postponed")]
        Postponed,
        #[serde(rename = "notStarted")]
        NotStarted,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildTagsAddedEvent {
    #[serde(flatten)]
    pub build_updated_event: BuildUpdatedEvent,
    #[serde(rename = "allTags", default, skip_serializing_if = "Vec::is_empty")]
    pub all_tags: Vec<String>,
    #[serde(rename = "newTags", default, skip_serializing_if = "Vec::is_empty")]
    pub new_tags: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildTrigger {
    #[serde(
        rename = "triggerType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub trigger_type: Option<build_trigger::TriggerType>,
}
pub mod build_trigger {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TriggerType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "continuousIntegration")]
        ContinuousIntegration,
        #[serde(rename = "batchedContinuousIntegration")]
        BatchedContinuousIntegration,
        #[serde(rename = "schedule")]
        Schedule,
        #[serde(rename = "gatedCheckIn")]
        GatedCheckIn,
        #[serde(rename = "batchedGatedCheckIn")]
        BatchedGatedCheckIn,
        #[serde(rename = "pullRequest")]
        PullRequest,
        #[serde(rename = "buildCompletion")]
        BuildCompletion,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildUpdatedEvent {
    #[serde(flatten)]
    pub realtime_build_event: RealtimeBuildEvent,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<Build>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildWorkspace {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub mappings: Vec<MappingDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Change {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<IdentityRef>,
    #[serde(
        rename = "displayUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(
        rename = "messageTruncated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub message_truncated: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pusher: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConsoleLogEvent {
    #[serde(flatten)]
    pub realtime_build_event: RealtimeBuildEvent,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub lines: Vec<String>,
    #[serde(
        rename = "stepRecordId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub step_record_id: Option<String>,
    #[serde(
        rename = "timelineId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub timeline_id: Option<String>,
    #[serde(
        rename = "timelineRecordId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub timeline_record_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContinuousDeploymentDefinition {
    #[serde(
        rename = "connectedService",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub connected_service: Option<WebApiConnectedServiceRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<XamlDefinitionReference>,
    #[serde(rename = "gitBranch", default, skip_serializing_if = "Option::is_none")]
    pub git_branch: Option<String>,
    #[serde(
        rename = "hostedServiceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub hosted_service_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
    #[serde(
        rename = "repositoryId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub repository_id: Option<String>,
    #[serde(
        rename = "storageAccountName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub storage_account_name: Option<String>,
    #[serde(
        rename = "subscriptionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub subscription_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub website: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webspace: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContinuousIntegrationTrigger {
    #[serde(flatten)]
    pub build_trigger: BuildTrigger,
    #[serde(
        rename = "batchChanges",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub batch_changes: Option<bool>,
    #[serde(
        rename = "branchFilters",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub branch_filters: Vec<String>,
    #[serde(
        rename = "maxConcurrentBuildsPerBranch",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_concurrent_builds_per_branch: Option<i32>,
    #[serde(rename = "pathFilters", default, skip_serializing_if = "Vec::is_empty")]
    pub path_filters: Vec<String>,
    #[serde(
        rename = "pollingInterval",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub polling_interval: Option<i32>,
    #[serde(
        rename = "pollingJobId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub polling_job_id: Option<String>,
    #[serde(
        rename = "settingsSourceType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub settings_source_type: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataSourceBindingBase {
    #[serde(
        rename = "callbackContextTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub callback_context_template: Option<String>,
    #[serde(
        rename = "callbackRequiredTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub callback_required_template: Option<String>,
    #[serde(
        rename = "dataSourceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub data_source_name: Option<String>,
    #[serde(
        rename = "endpointId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub endpoint_id: Option<String>,
    #[serde(
        rename = "endpointUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub endpoint_url: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub headers: Vec<AuthorizationHeader>,
    #[serde(
        rename = "initialContextTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub initial_context_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<serde_json::Value>,
    #[serde(
        rename = "requestContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_content: Option<String>,
    #[serde(
        rename = "requestVerb",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_verb: Option<String>,
    #[serde(
        rename = "resultSelector",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_selector: Option<String>,
    #[serde(
        rename = "resultTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DefinitionReference {
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
    #[serde(
        rename = "queueStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub queue_status: Option<definition_reference::QueueStatus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<definition_reference::Type>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod definition_reference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum QueueStatus {
        #[serde(rename = "enabled")]
        Enabled,
        #[serde(rename = "paused")]
        Paused,
        #[serde(rename = "disabled")]
        Disabled,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "xaml")]
        Xaml,
        #[serde(rename = "build")]
        Build,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DefinitionResourceReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorized: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Demand {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Dependency {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub event: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Deployment {
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentBuild {
    #[serde(flatten)]
    pub deployment: Deployment,
    #[serde(rename = "buildId", default, skip_serializing_if = "Option::is_none")]
    pub build_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentDeploy {
    #[serde(flatten)]
    pub deployment: Deployment,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentTest {
    #[serde(flatten)]
    pub deployment: Deployment,
    #[serde(rename = "runId", default, skip_serializing_if = "Option::is_none")]
    pub run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DesignerProcess {
    #[serde(flatten)]
    pub build_process: BuildProcess,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub phases: Vec<Phase>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<DesignerProcessTarget>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DesignerProcessTarget {
    #[serde(
        rename = "agentSpecification",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_specification: Option<AgentSpecification>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DockerProcess {
    #[serde(flatten)]
    pub build_process: BuildProcess,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<DockerProcessTarget>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DockerProcessTarget {
    #[serde(flatten)]
    pub designer_process_target: DesignerProcessTarget,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Folder {
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "lastChangedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_changed_by: Option<IdentityRef>,
    #[serde(
        rename = "lastChangedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_changed_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Forks {
    #[serde(
        rename = "allowFullAccessToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub allow_full_access_token: Option<bool>,
    #[serde(
        rename = "allowSecrets",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub allow_secrets: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GatedCheckInTrigger {
    #[serde(flatten)]
    pub build_trigger: BuildTrigger,
    #[serde(rename = "pathFilters", default, skip_serializing_if = "Vec::is_empty")]
    pub path_filters: Vec<String>,
    #[serde(
        rename = "runContinuousIntegration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_continuous_integration: Option<bool>,
    #[serde(
        rename = "useWorkspaceMappings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub use_workspace_mappings: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectBase {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityRef {
    #[serde(flatten)]
    pub graph_subject_base: GraphSubjectBase,
    #[serde(
        rename = "directoryAlias",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub directory_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inactive: Option<bool>,
    #[serde(
        rename = "isAadIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_aad_identity: Option<bool>,
    #[serde(
        rename = "isContainer",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_container: Option<bool>,
    #[serde(
        rename = "isDeletedInOrigin",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_deleted_in_origin: Option<bool>,
    #[serde(
        rename = "profileUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub profile_url: Option<String>,
    #[serde(
        rename = "uniqueName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InformationNode {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<serde_json::Value>,
    #[serde(
        rename = "lastModifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_by: Option<String>,
    #[serde(
        rename = "lastModifiedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_date: Option<String>,
    #[serde(rename = "nodeId", default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<i32>,
    #[serde(rename = "parentId", default, skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<i32>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Issue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<issue::Type>,
}
pub mod issue {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "error")]
        Error,
        #[serde(rename = "warning")]
        Warning,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(rename = "jobName", default, skip_serializing_if = "Option::is_none")]
    pub job_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonPatchDocument {
    #[serde(flatten)]
    pub vec_json_patch_operation: Vec<JsonPatchOperation>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsonPatchOperation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub op: Option<json_patch_operation::Op>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
}
pub mod json_patch_operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Op {
        #[serde(rename = "add")]
        Add,
        #[serde(rename = "remove")]
        Remove,
        #[serde(rename = "replace")]
        Replace,
        #[serde(rename = "move")]
        Move,
        #[serde(rename = "copy")]
        Copy,
        #[serde(rename = "test")]
        Test,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JustInTimeProcess {
    #[serde(flatten)]
    pub build_process: BuildProcess,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MappingDetails {
    #[serde(rename = "localPath", default, skip_serializing_if = "Option::is_none")]
    pub local_path: Option<String>,
    #[serde(
        rename = "mappingType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub mapping_type: Option<String>,
    #[serde(
        rename = "serverPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub server_path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MinimalRetentionLease {
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<i32>,
    #[serde(rename = "ownerId", default, skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<String>,
    #[serde(rename = "runId", default, skip_serializing_if = "Option::is_none")]
    pub run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MultipleAgentExecutionOptions {
    #[serde(flatten)]
    pub agent_target_execution_options: AgentTargetExecutionOptions,
    #[serde(
        rename = "continueOnError",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continue_on_error: Option<bool>,
    #[serde(
        rename = "maxConcurrency",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_concurrency: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NewRetentionLease {
    #[serde(rename = "daysValid", default, skip_serializing_if = "Option::is_none")]
    pub days_valid: Option<i32>,
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<i32>,
    #[serde(rename = "ownerId", default, skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<String>,
    #[serde(
        rename = "protectPipeline",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub protect_pipeline: Option<bool>,
    #[serde(rename = "runId", default, skip_serializing_if = "Option::is_none")]
    pub run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Phase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub dependencies: Vec<Dependency>,
    #[serde(
        rename = "jobAuthorizationScope",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_authorization_scope: Option<phase::JobAuthorizationScope>,
    #[serde(
        rename = "jobCancelTimeoutInMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_cancel_timeout_in_minutes: Option<i32>,
    #[serde(
        rename = "jobTimeoutInMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_timeout_in_minutes: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "refName", default, skip_serializing_if = "Option::is_none")]
    pub ref_name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub steps: Vec<BuildDefinitionStep>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<PhaseTarget>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
pub mod phase {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum JobAuthorizationScope {
        #[serde(rename = "projectCollection")]
        ProjectCollection,
        #[serde(rename = "project")]
        Project,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PhaseReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(rename = "phaseName", default, skip_serializing_if = "Option::is_none")]
    pub phase_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PhaseTarget {
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelineGeneralSettings {
    #[serde(
        rename = "enforceJobAuthScope",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub enforce_job_auth_scope: Option<bool>,
    #[serde(
        rename = "enforceJobAuthScopeForReleases",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub enforce_job_auth_scope_for_releases: Option<bool>,
    #[serde(
        rename = "enforceReferencedRepoScopedToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub enforce_referenced_repo_scoped_token: Option<bool>,
    #[serde(
        rename = "enforceSettableVar",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub enforce_settable_var: Option<bool>,
    #[serde(
        rename = "publishPipelineMetadata",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publish_pipeline_metadata: Option<bool>,
    #[serde(
        rename = "statusBadgesArePrivate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub status_badges_are_private: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelineReference {
    #[serde(
        rename = "jobReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_reference: Option<JobReference>,
    #[serde(
        rename = "phaseReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub phase_reference: Option<PhaseReference>,
    #[serde(
        rename = "pipelineId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pipeline_id: Option<i32>,
    #[serde(
        rename = "stageReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub stage_reference: Option<StageReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProcessParameters {
    #[serde(
        rename = "dataSourceBindings",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub data_source_bindings: Vec<DataSourceBindingBase>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub inputs: Vec<TaskInputDefinitionBase>,
    #[serde(
        rename = "sourceDefinitions",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub source_definitions: Vec<TaskSourceDefinitionBase>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectRetentionSetting {
    #[serde(
        rename = "purgeArtifacts",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub purge_artifacts: Option<RetentionSetting>,
    #[serde(
        rename = "purgePullRequestRuns",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub purge_pull_request_runs: Option<RetentionSetting>,
    #[serde(rename = "purgeRuns", default, skip_serializing_if = "Option::is_none")]
    pub purge_runs: Option<RetentionSetting>,
    #[serde(
        rename = "retainRunsPerProtectedBranch",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub retain_runs_per_protected_branch: Option<RetentionSetting>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PropertiesCollection {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub item: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub keys: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub values: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PullRequest {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<IdentityRef>,
    #[serde(
        rename = "currentState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub current_state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "providerName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub provider_name: Option<String>,
    #[serde(
        rename = "sourceBranchRef",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_branch_ref: Option<String>,
    #[serde(
        rename = "sourceRepositoryOwner",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_repository_owner: Option<String>,
    #[serde(
        rename = "targetBranchRef",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_branch_ref: Option<String>,
    #[serde(
        rename = "targetRepositoryOwner",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_repository_owner: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PullRequestTrigger {
    #[serde(flatten)]
    pub build_trigger: BuildTrigger,
    #[serde(
        rename = "autoCancel",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub auto_cancel: Option<bool>,
    #[serde(
        rename = "branchFilters",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub branch_filters: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub forks: Option<Forks>,
    #[serde(
        rename = "isCommentRequiredForPullRequest",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_comment_required_for_pull_request: Option<bool>,
    #[serde(rename = "pathFilters", default, skip_serializing_if = "Vec::is_empty")]
    pub path_filters: Vec<String>,
    #[serde(
        rename = "requireCommentsForNonTeamMemberAndNonContributors",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub require_comments_for_non_team_member_and_non_contributors: Option<bool>,
    #[serde(
        rename = "requireCommentsForNonTeamMembersOnly",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub require_comments_for_non_team_members_only: Option<bool>,
    #[serde(
        rename = "settingsSourceType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub settings_source_type: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RealtimeBuildEvent {
    #[serde(rename = "buildId", default, skip_serializing_if = "Option::is_none")]
    pub build_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<i32>,
    #[serde(
        rename = "environmentCreationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_creation_date: Option<String>,
    #[serde(
        rename = "environmentDefinitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_definition_id: Option<i32>,
    #[serde(
        rename = "environmentDefinitionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_definition_name: Option<String>,
    #[serde(
        rename = "environmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_id: Option<i32>,
    #[serde(
        rename = "environmentName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepositoryWebhook {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub types: Vec<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RetentionLease {
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<i32>,
    #[serde(rename = "leaseId", default, skip_serializing_if = "Option::is_none")]
    pub lease_id: Option<i32>,
    #[serde(rename = "ownerId", default, skip_serializing_if = "Option::is_none")]
    pub owner_id: Option<String>,
    #[serde(
        rename = "protectPipeline",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub protect_pipeline: Option<bool>,
    #[serde(rename = "runId", default, skip_serializing_if = "Option::is_none")]
    pub run_id: Option<i32>,
    #[serde(
        rename = "validUntil",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub valid_until: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RetentionLeaseUpdate {
    #[serde(rename = "daysValid", default, skip_serializing_if = "Option::is_none")]
    pub days_valid: Option<i32>,
    #[serde(
        rename = "protectPipeline",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub protect_pipeline: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RetentionPolicy {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub artifacts: Vec<String>,
    #[serde(
        rename = "artifactTypesToDelete",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub artifact_types_to_delete: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub branches: Vec<String>,
    #[serde(
        rename = "daysToKeep",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub days_to_keep: Option<i32>,
    #[serde(
        rename = "deleteBuildRecord",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub delete_build_record: Option<bool>,
    #[serde(
        rename = "deleteTestResults",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub delete_test_results: Option<bool>,
    #[serde(
        rename = "minimumToKeep",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub minimum_to_keep: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RetentionSetting {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Schedule {
    #[serde(
        rename = "branchFilters",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub branch_filters: Vec<String>,
    #[serde(
        rename = "daysToBuild",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub days_to_build: Option<schedule::DaysToBuild>,
    #[serde(
        rename = "scheduleJobId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub schedule_job_id: Option<String>,
    #[serde(
        rename = "scheduleOnlyWithChanges",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub schedule_only_with_changes: Option<bool>,
    #[serde(
        rename = "startHours",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub start_hours: Option<i32>,
    #[serde(
        rename = "startMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub start_minutes: Option<i32>,
    #[serde(
        rename = "timeZoneId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub time_zone_id: Option<String>,
}
pub mod schedule {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DaysToBuild {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "monday")]
        Monday,
        #[serde(rename = "tuesday")]
        Tuesday,
        #[serde(rename = "wednesday")]
        Wednesday,
        #[serde(rename = "thursday")]
        Thursday,
        #[serde(rename = "friday")]
        Friday,
        #[serde(rename = "saturday")]
        Saturday,
        #[serde(rename = "sunday")]
        Sunday,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduleTrigger {
    #[serde(flatten)]
    pub build_trigger: BuildTrigger,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub schedules: Vec<Schedule>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecureFileReference {
    #[serde(flatten)]
    pub resource_reference: ResourceReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServerTarget {
    #[serde(flatten)]
    pub phase_target: PhaseTarget,
    #[serde(
        rename = "executionOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub execution_options: Option<ServerTargetExecutionOptions>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServerTargetExecutionOptions {
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceEndpointReference {
    #[serde(flatten)]
    pub resource_reference: ResourceReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceProviderAttributes {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "supportedCapabilities",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub supported_capabilities: Option<serde_json::Value>,
    #[serde(
        rename = "supportedTriggers",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub supported_triggers: Vec<SupportedTrigger>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceRelatedWorkItem {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(
        rename = "assignedTo",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_to: Option<IdentityRef>,
    #[serde(
        rename = "currentState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub current_state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "providerName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub provider_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceRepositories {
    #[serde(
        rename = "continuationToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continuation_token: Option<String>,
    #[serde(
        rename = "pageLength",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub page_length: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub repositories: Vec<SourceRepository>,
    #[serde(
        rename = "totalPageCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_page_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceRepository {
    #[serde(
        rename = "defaultBranch",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_branch: Option<String>,
    #[serde(rename = "fullName", default, skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(
        rename = "sourceProviderName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_provider_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceRepositoryItem {
    #[serde(
        rename = "isContainer",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_container: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StageReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(rename = "stageName", default, skip_serializing_if = "Option::is_none")]
    pub stage_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SupportedTrigger {
    #[serde(
        rename = "defaultPollingInterval",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_polling_interval: Option<i32>,
    #[serde(
        rename = "notificationType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub notification_type: Option<String>,
    #[serde(
        rename = "supportedCapabilities",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub supported_capabilities: Option<serde_json::Value>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<supported_trigger::Type>,
}
pub mod supported_trigger {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "continuousIntegration")]
        ContinuousIntegration,
        #[serde(rename = "batchedContinuousIntegration")]
        BatchedContinuousIntegration,
        #[serde(rename = "schedule")]
        Schedule,
        #[serde(rename = "gatedCheckIn")]
        GatedCheckIn,
        #[serde(rename = "batchedGatedCheckIn")]
        BatchedGatedCheckIn,
        #[serde(rename = "pullRequest")]
        PullRequest,
        #[serde(rename = "buildCompletion")]
        BuildCompletion,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SvnMappingDetails {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub depth: Option<i32>,
    #[serde(
        rename = "ignoreExternals",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub ignore_externals: Option<bool>,
    #[serde(rename = "localPath", default, skip_serializing_if = "Option::is_none")]
    pub local_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
    #[serde(
        rename = "serverPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub server_path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SvnWorkspace {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub mappings: Vec<SvnMappingDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskAgentPoolReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "isHosted", default, skip_serializing_if = "Option::is_none")]
    pub is_hosted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskDefinitionReference {
    #[serde(
        rename = "definitionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "versionSpec",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub version_spec: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskInputDefinitionBase {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub aliases: Vec<String>,
    #[serde(
        rename = "defaultValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_value: Option<String>,
    #[serde(rename = "groupName", default, skip_serializing_if = "Option::is_none")]
    pub group_name: Option<String>,
    #[serde(
        rename = "helpMarkDown",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub help_mark_down: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation: Option<TaskInputValidation>,
    #[serde(
        rename = "visibleRule",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub visible_rule: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskInputValidation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskOrchestrationPlanGroupReference {
    #[serde(rename = "planGroup", default, skip_serializing_if = "Option::is_none")]
    pub plan_group: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskOrchestrationPlanGroupsStartedEvent {
    #[serde(rename = "planGroups", default, skip_serializing_if = "Vec::is_empty")]
    pub plan_groups: Vec<TaskOrchestrationPlanGroupReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskOrchestrationPlanReference {
    #[serde(
        rename = "orchestrationType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub orchestration_type: Option<i32>,
    #[serde(rename = "planId", default, skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskSourceDefinitionBase {
    #[serde(rename = "authKey", default, skip_serializing_if = "Option::is_none")]
    pub auth_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(
        rename = "keySelector",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub key_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamProjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub abbreviation: Option<String>,
    #[serde(
        rename = "defaultTeamImageUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_team_image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "lastUpdateTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_update_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<team_project_reference::State>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub visibility: Option<team_project_reference::Visibility>,
}
pub mod team_project_reference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "deleting")]
        Deleting,
        #[serde(rename = "new")]
        New,
        #[serde(rename = "wellFormed")]
        WellFormed,
        #[serde(rename = "createPending")]
        CreatePending,
        #[serde(rename = "all")]
        All,
        #[serde(rename = "unchanged")]
        Unchanged,
        #[serde(rename = "deleted")]
        Deleted,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Visibility {
        #[serde(rename = "private")]
        Private,
        #[serde(rename = "public")]
        Public,
        #[serde(rename = "organization")]
        Organization,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultsContext {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<BuildReference>,
    #[serde(
        rename = "contextType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub context_type: Option<test_results_context::ContextType>,
    #[serde(
        rename = "pipelineReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pipeline_reference: Option<PipelineReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<ReleaseReference>,
}
pub mod test_results_context {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ContextType {
        #[serde(rename = "build")]
        Build,
        #[serde(rename = "release")]
        Release,
        #[serde(rename = "pipeline")]
        Pipeline,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Timeline {
    #[serde(flatten)]
    pub timeline_reference: TimelineReference,
    #[serde(
        rename = "lastChangedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_changed_by: Option<String>,
    #[serde(
        rename = "lastChangedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_changed_on: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub records: Vec<TimelineRecord>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimelineAttempt {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(rename = "recordId", default, skip_serializing_if = "Option::is_none")]
    pub record_id: Option<String>,
    #[serde(
        rename = "timelineId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub timeline_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimelineRecord {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(rename = "changeId", default, skip_serializing_if = "Option::is_none")]
    pub change_id: Option<i32>,
    #[serde(
        rename = "currentOperation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub current_operation: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub details: Option<TimelineReference>,
    #[serde(
        rename = "errorCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_count: Option<i32>,
    #[serde(
        rename = "finishTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub finish_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub issues: Vec<Issue>,
    #[serde(
        rename = "lastModified",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log: Option<BuildLogReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<i32>,
    #[serde(rename = "parentId", default, skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    #[serde(
        rename = "percentComplete",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub percent_complete: Option<i32>,
    #[serde(
        rename = "previousAttempts",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub previous_attempts: Vec<TimelineAttempt>,
    #[serde(rename = "queueId", default, skip_serializing_if = "Option::is_none")]
    pub queue_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<timeline_record::Result>,
    #[serde(
        rename = "resultCode",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_code: Option<String>,
    #[serde(rename = "startTime", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<timeline_record::State>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub task: Option<TaskReference>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(
        rename = "warningCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub warning_count: Option<i32>,
    #[serde(
        rename = "workerName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub worker_name: Option<String>,
}
pub mod timeline_record {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "succeededWithIssues")]
        SucceededWithIssues,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "skipped")]
        Skipped,
        #[serde(rename = "abandoned")]
        Abandoned,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "completed")]
        Completed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimelineRecordsUpdatedEvent {
    #[serde(flatten)]
    pub realtime_build_event: RealtimeBuildEvent,
    #[serde(
        rename = "timelineRecords",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub timeline_records: Vec<TimelineRecord>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimelineReference {
    #[serde(rename = "changeId", default, skip_serializing_if = "Option::is_none")]
    pub change_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateProjectRetentionSettingModel {
    #[serde(
        rename = "artifactsRetention",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifacts_retention: Option<UpdateRetentionSettingModel>,
    #[serde(
        rename = "pullRequestRunRetention",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pull_request_run_retention: Option<UpdateRetentionSettingModel>,
    #[serde(
        rename = "retainRunsPerProtectedBranch",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub retain_runs_per_protected_branch: Option<UpdateRetentionSettingModel>,
    #[serde(
        rename = "runRetention",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_retention: Option<UpdateRetentionSettingModel>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateRetentionSettingModel {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateStageParameters {
    #[serde(
        rename = "forceRetryAllJobs",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub force_retry_all_jobs: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<update_stage_parameters::State>,
}
pub mod update_stage_parameters {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "cancel")]
        Cancel,
        #[serde(rename = "retry")]
        Retry,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateTagParameters {
    #[serde(rename = "tagsToAdd", default, skip_serializing_if = "Vec::is_empty")]
    pub tags_to_add: Vec<String>,
    #[serde(
        rename = "tagsToRemove",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub tags_to_remove: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VariableGroup {
    #[serde(flatten)]
    pub variable_group_reference: VariableGroupReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VariableGroupReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VariableMultipliersAgentExecutionOptions {
    #[serde(flatten)]
    pub agent_target_execution_options: AgentTargetExecutionOptions,
    #[serde(
        rename = "continueOnError",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continue_on_error: Option<bool>,
    #[serde(
        rename = "maxConcurrency",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_concurrency: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub multipliers: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VariableMultipliersServerExecutionOptions {
    #[serde(flatten)]
    pub server_target_execution_options: ServerTargetExecutionOptions,
    #[serde(
        rename = "continueOnError",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continue_on_error: Option<bool>,
    #[serde(
        rename = "maxConcurrency",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_concurrency: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub multipliers: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebApiConnectedServiceRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkspaceMapping {
    #[serde(
        rename = "definitionUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub depth: Option<i32>,
    #[serde(rename = "localItem", default, skip_serializing_if = "Option::is_none")]
    pub local_item: Option<String>,
    #[serde(
        rename = "mappingType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub mapping_type: Option<workspace_mapping::MappingType>,
    #[serde(
        rename = "serverItem",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub server_item: Option<String>,
    #[serde(
        rename = "workspaceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub workspace_id: Option<i32>,
}
pub mod workspace_mapping {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum MappingType {
        #[serde(rename = "map")]
        Map,
        #[serde(rename = "cloak")]
        Cloak,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkspaceTemplate {
    #[serde(
        rename = "definitionUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_uri: Option<String>,
    #[serde(
        rename = "lastModifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_by: Option<String>,
    #[serde(
        rename = "lastModifiedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_date: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub mappings: Vec<WorkspaceMapping>,
    #[serde(
        rename = "workspaceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub workspace_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct XamlBuildControllerReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct XamlBuildDefinition {
    #[serde(flatten)]
    pub definition_reference: DefinitionReference,
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(rename = "batchSize", default, skip_serializing_if = "Option::is_none")]
    pub batch_size: Option<i32>,
    #[serde(rename = "buildArgs", default, skip_serializing_if = "Option::is_none")]
    pub build_args: Option<String>,
    #[serde(
        rename = "continuousIntegrationQuietPeriod",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continuous_integration_quiet_period: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller: Option<BuildController>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(
        rename = "defaultDropLocation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_drop_location: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "lastBuild", default, skip_serializing_if = "Option::is_none")]
    pub last_build: Option<XamlBuildReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<BuildRepository>,
    #[serde(
        rename = "supportedReasons",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub supported_reasons: Option<xaml_build_definition::SupportedReasons>,
    #[serde(
        rename = "triggerType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub trigger_type: Option<xaml_build_definition::TriggerType>,
}
pub mod xaml_build_definition {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SupportedReasons {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "manual")]
        Manual,
        #[serde(rename = "individualCI")]
        IndividualCi,
        #[serde(rename = "batchedCI")]
        BatchedCi,
        #[serde(rename = "schedule")]
        Schedule,
        #[serde(rename = "scheduleForced")]
        ScheduleForced,
        #[serde(rename = "userCreated")]
        UserCreated,
        #[serde(rename = "validateShelveset")]
        ValidateShelveset,
        #[serde(rename = "checkInShelveset")]
        CheckInShelveset,
        #[serde(rename = "pullRequest")]
        PullRequest,
        #[serde(rename = "buildCompletion")]
        BuildCompletion,
        #[serde(rename = "resourceTrigger")]
        ResourceTrigger,
        #[serde(rename = "triggered")]
        Triggered,
        #[serde(rename = "all")]
        All,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TriggerType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "continuousIntegration")]
        ContinuousIntegration,
        #[serde(rename = "batchedContinuousIntegration")]
        BatchedContinuousIntegration,
        #[serde(rename = "schedule")]
        Schedule,
        #[serde(rename = "gatedCheckIn")]
        GatedCheckIn,
        #[serde(rename = "batchedGatedCheckIn")]
        BatchedGatedCheckIn,
        #[serde(rename = "pullRequest")]
        PullRequest,
        #[serde(rename = "buildCompletion")]
        BuildCompletion,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct XamlBuildReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct XamlBuildServerReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct XamlDefinitionReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct YamlBuild {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub yaml: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct YamlProcess {
    #[serde(flatten)]
    pub build_process: BuildProcess,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub errors: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<BuildProcessResources>,
    #[serde(
        rename = "yamlFilename",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub yaml_filename: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AttachmentList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Attachment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildArtifactList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BuildArtifact>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildControllerList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BuildController>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildDefinitionReferenceList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BuildDefinitionReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildDefinitionRevisionList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BuildDefinitionRevision>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildDefinitionTemplateList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BuildDefinitionTemplate>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Build>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildLogList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BuildLog>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildMetricList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BuildMetric>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildOptionDefinitionList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BuildOptionDefinition>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChangeList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Change>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DefinitionResourceReferenceList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<DefinitionResourceReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FolderList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Folder>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepositoryWebhookList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<RepositoryWebhook>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceRefList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ResourceRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RetentionLeaseList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<RetentionLease>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceProviderAttributesList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<SourceProviderAttributes>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceRepositoryItemList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<SourceRepositoryItem>,
}
