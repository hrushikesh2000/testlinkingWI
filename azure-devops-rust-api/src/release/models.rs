#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentArtifactDefinition {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[serde(
        rename = "artifactType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_type: Option<agent_artifact_definition::ArtifactType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub details: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
pub mod agent_artifact_definition {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ArtifactType {
        #[serde(rename = "xamlBuild")]
        XamlBuild,
        #[serde(rename = "build")]
        Build,
        #[serde(rename = "jenkins")]
        Jenkins,
        #[serde(rename = "fileShare")]
        FileShare,
        #[serde(rename = "nuget")]
        Nuget,
        #[serde(rename = "tfsOnPrem")]
        TfsOnPrem,
        #[serde(rename = "gitHub")]
        GitHub,
        #[serde(rename = "tfGit")]
        TfGit,
        #[serde(rename = "externalTfsBuild")]
        ExternalTfsBuild,
        #[serde(rename = "custom")]
        Custom,
        #[serde(rename = "tfvc")]
        Tfvc,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentBasedDeployPhase {
    #[serde(flatten)]
    pub deploy_phase: DeployPhase,
    #[serde(
        rename = "deploymentInput",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deployment_input: Option<AgentDeploymentInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentDeploymentInput {
    #[serde(flatten)]
    pub deployment_input: DeploymentInput,
    #[serde(
        rename = "agentSpecification",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub agent_specification: Option<AgentSpecification>,
    #[serde(rename = "imageId", default, skip_serializing_if = "Option::is_none")]
    pub image_id: Option<i32>,
    #[serde(
        rename = "parallelExecution",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub parallel_execution: Option<ExecutionInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentPoolQueueReference {
    #[serde(flatten)]
    pub resource_reference: ResourceReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentSpecification {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApprovalOptions {
    #[serde(
        rename = "autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub auto_triggered_and_previous_environment_approved_can_be_skipped: Option<bool>,
    #[serde(
        rename = "enforceIdentityRevalidation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub enforce_identity_revalidation: Option<bool>,
    #[serde(
        rename = "executionOrder",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub execution_order: Option<approval_options::ExecutionOrder>,
    #[serde(
        rename = "releaseCreatorCanBeApprover",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_creator_can_be_approver: Option<bool>,
    #[serde(
        rename = "requiredApproverCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub required_approver_count: Option<i32>,
    #[serde(
        rename = "timeoutInMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub timeout_in_minutes: Option<i32>,
}
pub mod approval_options {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ExecutionOrder {
        #[serde(rename = "beforeGates")]
        BeforeGates,
        #[serde(rename = "afterSuccessfulGates")]
        AfterSuccessfulGates,
        #[serde(rename = "afterGatesAlways")]
        AfterGatesAlways,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Artifact {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[serde(
        rename = "definitionReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_reference: Option<serde_json::Value>,
    #[serde(rename = "isPrimary", default, skip_serializing_if = "Option::is_none")]
    pub is_primary: Option<bool>,
    #[serde(
        rename = "isRetained",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_retained: Option<bool>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactContributionDefinition {
    #[serde(
        rename = "artifactTriggerConfiguration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_trigger_configuration: Option<ArtifactTriggerConfiguration>,
    #[serde(
        rename = "artifactType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_type: Option<String>,
    #[serde(
        rename = "artifactTypeStreamMapping",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_type_stream_mapping: Option<serde_json::Value>,
    #[serde(
        rename = "browsableArtifactTypeMapping",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub browsable_artifact_type_mapping: Option<serde_json::Value>,
    #[serde(
        rename = "dataSourceBindings",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub data_source_bindings: Vec<DataSourceBinding>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(
        rename = "downloadTaskId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub download_task_id: Option<String>,
    #[serde(
        rename = "endpointTypeId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub endpoint_type_id: Option<String>,
    #[serde(
        rename = "inputDescriptors",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub input_descriptors: Vec<InputDescriptor>,
    #[serde(
        rename = "isCommitsTraceabilitySupported",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_commits_traceability_supported: Option<bool>,
    #[serde(
        rename = "isWorkitemsTraceabilitySupported",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_workitems_traceability_supported: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "taskInputMapping",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub task_input_mapping: Option<serde_json::Value>,
    #[serde(
        rename = "uniqueSourceIdentifier",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_source_identifier: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactDownloadInputBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[serde(
        rename = "artifactDownloadMode",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_download_mode: Option<String>,
    #[serde(
        rename = "artifactItems",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub artifact_items: Vec<String>,
    #[serde(
        rename = "artifactType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactFilter {
    #[serde(
        rename = "createReleaseOnBuildTagging",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub create_release_on_build_tagging: Option<bool>,
    #[serde(
        rename = "sourceBranch",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_branch: Option<String>,
    #[serde(rename = "tagFilter", default, skip_serializing_if = "Option::is_none")]
    pub tag_filter: Option<TagFilter>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
    #[serde(
        rename = "useBuildDefinitionBranch",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub use_build_definition_branch: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactInstanceData {
    #[serde(
        rename = "accountName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub account_name: Option<String>,
    #[serde(
        rename = "authenticationToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub authentication_token: Option<String>,
    #[serde(rename = "tfsUrl", default, skip_serializing_if = "Option::is_none")]
    pub tfs_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[serde(
        rename = "instanceReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub instance_reference: Option<BuildVersion>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactProvider {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "sourceUri", default, skip_serializing_if = "Option::is_none")]
    pub source_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactsDownloadInput {
    #[serde(
        rename = "downloadInputs",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub download_inputs: Vec<ArtifactDownloadInputBase>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactSourceId {
    #[serde(
        rename = "artifactTypeId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_type_id: Option<String>,
    #[serde(
        rename = "sourceIdInputs",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub source_id_inputs: Vec<SourceIdInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactSourceIdsQueryResult {
    #[serde(
        rename = "artifactSourceIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub artifact_source_ids: Vec<ArtifactSourceId>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactSourceReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactSourceTrigger {
    #[serde(flatten)]
    pub release_trigger_base: ReleaseTriggerBase,
    #[serde(
        rename = "artifactAlias",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_alias: Option<String>,
    #[serde(
        rename = "triggerConditions",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub trigger_conditions: Vec<ArtifactFilter>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactTriggerConfiguration {
    #[serde(
        rename = "isTriggerSupported",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_trigger_supported: Option<bool>,
    #[serde(
        rename = "isTriggerSupportedOnlyInHosted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_trigger_supported_only_in_hosted: Option<bool>,
    #[serde(
        rename = "isWebhookSupportedAtServerLevel",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_webhook_supported_at_server_level: Option<bool>,
    #[serde(
        rename = "payloadHashHeaderName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub payload_hash_header_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<serde_json::Value>,
    #[serde(
        rename = "webhookPayloadMapping",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub webhook_payload_mapping: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactTypeDefinition {
    #[serde(
        rename = "artifactTriggerConfiguration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_trigger_configuration: Option<ArtifactTriggerConfiguration>,
    #[serde(
        rename = "artifactType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_type: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(
        rename = "endpointTypeId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub endpoint_type_id: Option<String>,
    #[serde(
        rename = "inputDescriptors",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub input_descriptors: Vec<InputDescriptor>,
    #[serde(
        rename = "isCommitsTraceabilitySupported",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_commits_traceability_supported: Option<bool>,
    #[serde(
        rename = "isWorkitemsTraceabilitySupported",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_workitems_traceability_supported: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "uniqueSourceIdentifier",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_source_identifier: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactVersion {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[serde(
        rename = "defaultVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_version: Option<BuildVersion>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub versions: Vec<BuildVersion>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ArtifactVersionQueryResult {
    #[serde(
        rename = "artifactVersions",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub artifact_versions: Vec<ArtifactVersion>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AuthorizationHeader {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AutoTriggerIssue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issue: Option<Issue>,
    #[serde(
        rename = "issueSource",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub issue_source: Option<auto_trigger_issue::IssueSource>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ProjectReference>,
    #[serde(
        rename = "releaseDefinitionReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_definition_reference: Option<ReleaseDefinitionShallowReference>,
    #[serde(
        rename = "releaseTriggerType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_trigger_type: Option<auto_trigger_issue::ReleaseTriggerType>,
}
pub mod auto_trigger_issue {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum IssueSource {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "user")]
        User,
        #[serde(rename = "system")]
        System,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ReleaseTriggerType {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "artifactSource")]
        ArtifactSource,
        #[serde(rename = "schedule")]
        Schedule,
        #[serde(rename = "sourceRepo")]
        SourceRepo,
        #[serde(rename = "containerImage")]
        ContainerImage,
        #[serde(rename = "package")]
        Package,
        #[serde(rename = "pullRequest")]
        PullRequest,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureKeyVaultVariableGroupProviderData {
    #[serde(flatten)]
    pub variable_group_provider_data: VariableGroupProviderData,
    #[serde(
        rename = "lastRefreshedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_refreshed_on: Option<String>,
    #[serde(
        rename = "serviceEndpointId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub service_endpoint_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vault: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AzureKeyVaultVariableValue {
    #[serde(flatten)]
    pub variable_value: VariableValue,
    #[serde(
        rename = "contentType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub content_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expires: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BaseDeploymentInput {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    #[serde(
        rename = "jobCancelTimeoutInMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_cancel_timeout_in_minutes: Option<i32>,
    #[serde(
        rename = "overrideInputs",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub override_inputs: Option<serde_json::Value>,
    #[serde(
        rename = "timeoutInMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub timeout_in_minutes: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildArtifactDownloadInput {
    #[serde(flatten)]
    pub artifact_download_input_base: ArtifactDownloadInputBase,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildVersion {
    #[serde(
        rename = "commitMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub commit_message: Option<String>,
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<String>,
    #[serde(
        rename = "definitionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "isMultiDefinitionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_multi_definition_type: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "sourceBranch",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_branch: Option<String>,
    #[serde(
        rename = "sourcePullRequestVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_pull_request_version: Option<SourcePullRequestVersion>,
    #[serde(
        rename = "sourceRepositoryId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_repository_id: Option<String>,
    #[serde(
        rename = "sourceRepositoryType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_repository_type: Option<String>,
    #[serde(
        rename = "sourceVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Change {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<IdentityRef>,
    #[serde(
        rename = "changeType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_type: Option<String>,
    #[serde(
        rename = "displayUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "pushedBy", default, skip_serializing_if = "Option::is_none")]
    pub pushed_by: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodeRepositoryReference {
    #[serde(
        rename = "repositoryReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub repository_reference: Option<serde_json::Value>,
    #[serde(
        rename = "systemType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub system_type: Option<code_repository_reference::SystemType>,
}
pub mod code_repository_reference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SystemType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "tfsGit")]
        TfsGit,
        #[serde(rename = "gitHub")]
        GitHub,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComplianceSettings {
    #[serde(
        rename = "checkForCredentialsAndOtherSecrets",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub check_for_credentials_and_other_secrets: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Condition {
    #[serde(
        rename = "conditionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub condition_type: Option<condition::ConditionType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
pub mod condition {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ConditionType {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "event")]
        Event,
        #[serde(rename = "environmentState")]
        EnvironmentState,
        #[serde(rename = "artifact")]
        Artifact,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConfigurationVariableValue {
    #[serde(
        rename = "allowOverride",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub allow_override: Option<bool>,
    #[serde(rename = "isSecret", default, skip_serializing_if = "Option::is_none")]
    pub is_secret: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Consumer {
    #[serde(
        rename = "consumerId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub consumer_id: Option<i32>,
    #[serde(
        rename = "consumerName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub consumer_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContainerImageTrigger {
    #[serde(flatten)]
    pub release_trigger_base: ReleaseTriggerBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[serde(rename = "tagFilters", default, skip_serializing_if = "Vec::is_empty")]
    pub tag_filters: Vec<TagFilter>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContinuousDeploymentTriggerIssue {
    #[serde(flatten)]
    pub auto_trigger_issue: AutoTriggerIssue,
    #[serde(
        rename = "artifactType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_type: Option<String>,
    #[serde(
        rename = "artifactVersionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_version_id: Option<String>,
    #[serde(rename = "sourceId", default, skip_serializing_if = "Option::is_none")]
    pub source_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ControlOptions {
    #[serde(rename = "alwaysRun", default, skip_serializing_if = "Option::is_none")]
    pub always_run: Option<bool>,
    #[serde(
        rename = "continueOnError",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continue_on_error: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomArtifactDownloadInput {
    #[serde(flatten)]
    pub artifact_download_input_base: ArtifactDownloadInputBase,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataSourceBinding {
    #[serde(
        rename = "callbackContextTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub callback_context_template: Option<String>,
    #[serde(
        rename = "callBackRequiredTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub call_back_required_template: Option<String>,
    #[serde(
        rename = "dataSourceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub data_source_name: Option<String>,
    #[serde(
        rename = "endpointId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub endpoint_id: Option<String>,
    #[serde(
        rename = "endpointUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub endpoint_url: Option<String>,
    #[serde(
        rename = "initialContextTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub initial_context_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<serde_json::Value>,
    #[serde(
        rename = "requestContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_content: Option<String>,
    #[serde(
        rename = "requestVerb",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_verb: Option<String>,
    #[serde(
        rename = "resultSelector",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_selector: Option<String>,
    #[serde(
        rename = "resultTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataSourceBindingBase {
    #[serde(
        rename = "callbackContextTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub callback_context_template: Option<String>,
    #[serde(
        rename = "callbackRequiredTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub callback_required_template: Option<String>,
    #[serde(
        rename = "dataSourceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub data_source_name: Option<String>,
    #[serde(
        rename = "endpointId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub endpoint_id: Option<String>,
    #[serde(
        rename = "endpointUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub endpoint_url: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub headers: Vec<AuthorizationHeader>,
    #[serde(
        rename = "initialContextTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub initial_context_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<serde_json::Value>,
    #[serde(
        rename = "requestContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_content: Option<String>,
    #[serde(
        rename = "requestVerb",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_verb: Option<String>,
    #[serde(
        rename = "resultSelector",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_selector: Option<String>,
    #[serde(
        rename = "resultTemplate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_template: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DefinitionEnvironmentReference {
    #[serde(
        rename = "definitionEnvironmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_environment_id: Option<i32>,
    #[serde(
        rename = "definitionEnvironmentName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_environment_name: Option<String>,
    #[serde(
        rename = "releaseDefinitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_definition_id: Option<i32>,
    #[serde(
        rename = "releaseDefinitionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_definition_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Demand {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Deployment {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(
        rename = "completedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completed_on: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub conditions: Vec<Condition>,
    #[serde(
        rename = "definitionEnvironmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_environment_id: Option<i32>,
    #[serde(
        rename = "deploymentStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deployment_status: Option<deployment::DeploymentStatus>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "lastModifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_by: Option<IdentityRef>,
    #[serde(
        rename = "lastModifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_on: Option<String>,
    #[serde(
        rename = "operationStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub operation_status: Option<deployment::OperationStatus>,
    #[serde(
        rename = "postDeployApprovals",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub post_deploy_approvals: Vec<ReleaseApproval>,
    #[serde(
        rename = "preDeployApprovals",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub pre_deploy_approvals: Vec<ReleaseApproval>,
    #[serde(
        rename = "projectReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_reference: Option<ProjectReference>,
    #[serde(rename = "queuedOn", default, skip_serializing_if = "Option::is_none")]
    pub queued_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<deployment::Reason>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<ReleaseReference>,
    #[serde(
        rename = "releaseDefinition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_definition: Option<ReleaseDefinitionShallowReference>,
    #[serde(
        rename = "releaseEnvironment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_environment: Option<ReleaseEnvironmentShallowReference>,
    #[serde(
        rename = "requestedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_by: Option<IdentityRef>,
    #[serde(
        rename = "requestedFor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_for: Option<IdentityRef>,
    #[serde(
        rename = "scheduledDeploymentTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub scheduled_deployment_time: Option<String>,
    #[serde(rename = "startedOn", default, skip_serializing_if = "Option::is_none")]
    pub started_on: Option<String>,
}
pub mod deployment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DeploymentStatus {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "notDeployed")]
        NotDeployed,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "partiallySucceeded")]
        PartiallySucceeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "all")]
        All,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OperationStatus {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "scheduled")]
        Scheduled,
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "approved")]
        Approved,
        #[serde(rename = "rejected")]
        Rejected,
        #[serde(rename = "deferred")]
        Deferred,
        #[serde(rename = "queuedForAgent")]
        QueuedForAgent,
        #[serde(rename = "phaseInProgress")]
        PhaseInProgress,
        #[serde(rename = "phaseSucceeded")]
        PhaseSucceeded,
        #[serde(rename = "phasePartiallySucceeded")]
        PhasePartiallySucceeded,
        #[serde(rename = "phaseFailed")]
        PhaseFailed,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "phaseCanceled")]
        PhaseCanceled,
        #[serde(rename = "manualInterventionPending")]
        ManualInterventionPending,
        #[serde(rename = "queuedForPipeline")]
        QueuedForPipeline,
        #[serde(rename = "cancelling")]
        Cancelling,
        #[serde(rename = "evaluatingGates")]
        EvaluatingGates,
        #[serde(rename = "gateFailed")]
        GateFailed,
        #[serde(rename = "all")]
        All,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Reason {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "manual")]
        Manual,
        #[serde(rename = "automated")]
        Automated,
        #[serde(rename = "scheduled")]
        Scheduled,
        #[serde(rename = "redeployTrigger")]
        RedeployTrigger,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentApprovalCompletedEvent {
    #[serde(flatten)]
    pub deployment_event: DeploymentEvent,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub approval: Option<ReleaseApproval>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ProjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<Release>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentApprovalPendingEvent {
    #[serde(flatten)]
    pub deployment_event: DeploymentEvent,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub approval: Option<ReleaseApproval>,
    #[serde(
        rename = "approvalOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub approval_options: Option<ApprovalOptions>,
    #[serde(
        rename = "completedApprovals",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub completed_approvals: Vec<ReleaseApproval>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<Deployment>,
    #[serde(
        rename = "isMultipleRankApproval",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_multiple_rank_approval: Option<bool>,
    #[serde(
        rename = "pendingApprovals",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub pending_approvals: Vec<ReleaseApproval>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ProjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<Release>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentAttempt {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(
        rename = "deploymentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deployment_id: Option<i32>,
    #[serde(
        rename = "hasStarted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub has_started: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub issues: Vec<Issue>,
    #[serde(
        rename = "lastModifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_by: Option<IdentityRef>,
    #[serde(
        rename = "lastModifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_on: Option<String>,
    #[serde(
        rename = "operationStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub operation_status: Option<deployment_attempt::OperationStatus>,
    #[serde(
        rename = "postDeploymentGates",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub post_deployment_gates: Option<ReleaseGates>,
    #[serde(
        rename = "preDeploymentGates",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pre_deployment_gates: Option<ReleaseGates>,
    #[serde(rename = "queuedOn", default, skip_serializing_if = "Option::is_none")]
    pub queued_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<deployment_attempt::Reason>,
    #[serde(
        rename = "releaseDeployPhases",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub release_deploy_phases: Vec<ReleaseDeployPhase>,
    #[serde(
        rename = "requestedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_by: Option<IdentityRef>,
    #[serde(
        rename = "requestedFor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_for: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<deployment_attempt::Status>,
}
pub mod deployment_attempt {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OperationStatus {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "scheduled")]
        Scheduled,
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "approved")]
        Approved,
        #[serde(rename = "rejected")]
        Rejected,
        #[serde(rename = "deferred")]
        Deferred,
        #[serde(rename = "queuedForAgent")]
        QueuedForAgent,
        #[serde(rename = "phaseInProgress")]
        PhaseInProgress,
        #[serde(rename = "phaseSucceeded")]
        PhaseSucceeded,
        #[serde(rename = "phasePartiallySucceeded")]
        PhasePartiallySucceeded,
        #[serde(rename = "phaseFailed")]
        PhaseFailed,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "phaseCanceled")]
        PhaseCanceled,
        #[serde(rename = "manualInterventionPending")]
        ManualInterventionPending,
        #[serde(rename = "queuedForPipeline")]
        QueuedForPipeline,
        #[serde(rename = "cancelling")]
        Cancelling,
        #[serde(rename = "evaluatingGates")]
        EvaluatingGates,
        #[serde(rename = "gateFailed")]
        GateFailed,
        #[serde(rename = "all")]
        All,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Reason {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "manual")]
        Manual,
        #[serde(rename = "automated")]
        Automated,
        #[serde(rename = "scheduled")]
        Scheduled,
        #[serde(rename = "redeployTrigger")]
        RedeployTrigger,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "notDeployed")]
        NotDeployed,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "partiallySucceeded")]
        PartiallySucceeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentAuthorizationInfo {
    #[serde(
        rename = "authorizationHeaderFor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub authorization_header_for: Option<deployment_authorization_info::AuthorizationHeaderFor>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub resources: Vec<String>,
    #[serde(rename = "tenantId", default, skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    #[serde(
        rename = "vstsAccessTokenKey",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub vsts_access_token_key: Option<String>,
}
pub mod deployment_authorization_info {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AuthorizationHeaderFor {
        #[serde(rename = "revalidateApproverIdentity")]
        RevalidateApproverIdentity,
        #[serde(rename = "onBehalfOf")]
        OnBehalfOf,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentCompletedEvent {
    #[serde(flatten)]
    pub deployment_event: DeploymentEvent,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<Deployment>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<ReleaseEnvironment>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ProjectReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentEvent {
    #[serde(flatten)]
    pub release_event: ReleaseEvent,
    #[serde(rename = "attemptId", default, skip_serializing_if = "Option::is_none")]
    pub attempt_id: Option<i32>,
    #[serde(rename = "stageName", default, skip_serializing_if = "Option::is_none")]
    pub stage_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentInput {
    #[serde(flatten)]
    pub base_deployment_input: BaseDeploymentInput,
    #[serde(
        rename = "artifactsDownloadInput",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifacts_download_input: Option<ArtifactsDownloadInput>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub demands: Vec<Demand>,
    #[serde(
        rename = "enableAccessToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub enable_access_token: Option<bool>,
    #[serde(rename = "queueId", default, skip_serializing_if = "Option::is_none")]
    pub queue_id: Option<i32>,
    #[serde(
        rename = "skipArtifactsDownload",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub skip_artifacts_download: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentJob {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub job: Option<ReleaseTask>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tasks: Vec<ReleaseTask>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentManualInterventionPendingEvent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<Deployment>,
    #[serde(
        rename = "emailRecipients",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub email_recipients: Vec<String>,
    #[serde(
        rename = "environmentOwner",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_owner: Option<IdentityRef>,
    #[serde(
        rename = "manualIntervention",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub manual_intervention: Option<ManualIntervention>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ProjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<Release>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentQueryParameters {
    #[serde(
        rename = "artifactSourceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_source_id: Option<String>,
    #[serde(
        rename = "artifactTypeId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_type_id: Option<String>,
    #[serde(
        rename = "artifactVersions",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub artifact_versions: Vec<String>,
    #[serde(
        rename = "deploymentsPerEnvironment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deployments_per_environment: Option<i32>,
    #[serde(
        rename = "deploymentStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deployment_status: Option<deployment_query_parameters::DeploymentStatus>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub environments: Vec<DefinitionEnvironmentReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expands: Option<deployment_query_parameters::Expands>,
    #[serde(rename = "isDeleted", default, skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    #[serde(
        rename = "operationStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub operation_status: Option<deployment_query_parameters::OperationStatus>,
    #[serde(rename = "queryType", default, skip_serializing_if = "Option::is_none")]
    pub query_type: Option<deployment_query_parameters::QueryType>,
    #[serde(
        rename = "sourceBranch",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_branch: Option<String>,
}
pub mod deployment_query_parameters {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DeploymentStatus {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "notDeployed")]
        NotDeployed,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "partiallySucceeded")]
        PartiallySucceeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "all")]
        All,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Expands {
        #[serde(rename = "all")]
        All,
        #[serde(rename = "deploymentOnly")]
        DeploymentOnly,
        #[serde(rename = "approvals")]
        Approvals,
        #[serde(rename = "artifacts")]
        Artifacts,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OperationStatus {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "scheduled")]
        Scheduled,
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "approved")]
        Approved,
        #[serde(rename = "rejected")]
        Rejected,
        #[serde(rename = "deferred")]
        Deferred,
        #[serde(rename = "queuedForAgent")]
        QueuedForAgent,
        #[serde(rename = "phaseInProgress")]
        PhaseInProgress,
        #[serde(rename = "phaseSucceeded")]
        PhaseSucceeded,
        #[serde(rename = "phasePartiallySucceeded")]
        PhasePartiallySucceeded,
        #[serde(rename = "phaseFailed")]
        PhaseFailed,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "phaseCanceled")]
        PhaseCanceled,
        #[serde(rename = "manualInterventionPending")]
        ManualInterventionPending,
        #[serde(rename = "queuedForPipeline")]
        QueuedForPipeline,
        #[serde(rename = "cancelling")]
        Cancelling,
        #[serde(rename = "evaluatingGates")]
        EvaluatingGates,
        #[serde(rename = "gateFailed")]
        GateFailed,
        #[serde(rename = "all")]
        All,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum QueryType {
        #[serde(rename = "regular")]
        Regular,
        #[serde(rename = "failingSince")]
        FailingSince,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentStartedEvent {
    #[serde(flatten)]
    pub deployment_event: DeploymentEvent,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<ReleaseEnvironment>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ProjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<Release>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeployPhase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "phaseType", default, skip_serializing_if = "Option::is_none")]
    pub phase_type: Option<deploy_phase::PhaseType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rank: Option<i32>,
    #[serde(rename = "refName", default, skip_serializing_if = "Option::is_none")]
    pub ref_name: Option<String>,
    #[serde(
        rename = "workflowTasks",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub workflow_tasks: Vec<WorkflowTask>,
}
pub mod deploy_phase {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PhaseType {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "agentBasedDeployment")]
        AgentBasedDeployment,
        #[serde(rename = "runOnServer")]
        RunOnServer,
        #[serde(rename = "machineGroupBasedDeployment")]
        MachineGroupBasedDeployment,
        #[serde(rename = "deploymentGates")]
        DeploymentGates,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EmailRecipients {
    #[serde(
        rename = "emailAddresses",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub email_addresses: Vec<String>,
    #[serde(rename = "tfsIds", default, skip_serializing_if = "Vec::is_empty")]
    pub tfs_ids: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentExecutionPolicy {
    #[serde(
        rename = "concurrencyCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub concurrency_count: Option<i32>,
    #[serde(
        rename = "queueDepthCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub queue_depth_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentOptions {
    #[serde(
        rename = "autoLinkWorkItems",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub auto_link_work_items: Option<bool>,
    #[serde(
        rename = "badgeEnabled",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub badge_enabled: Option<bool>,
    #[serde(
        rename = "publishDeploymentStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publish_deployment_status: Option<bool>,
    #[serde(
        rename = "pullRequestDeploymentEnabled",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pull_request_deployment_enabled: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentRetentionPolicy {
    #[serde(
        rename = "daysToKeep",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub days_to_keep: Option<i32>,
    #[serde(
        rename = "releasesToKeep",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub releases_to_keep: Option<i32>,
    #[serde(
        rename = "retainBuild",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub retain_build: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentTrigger {
    #[serde(
        rename = "definitionEnvironmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_environment_id: Option<i32>,
    #[serde(
        rename = "releaseDefinitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_definition_id: Option<i32>,
    #[serde(
        rename = "triggerContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub trigger_content: Option<String>,
    #[serde(
        rename = "triggerType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub trigger_type: Option<environment_trigger::TriggerType>,
}
pub mod environment_trigger {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TriggerType {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "deploymentGroupRedeploy")]
        DeploymentGroupRedeploy,
        #[serde(rename = "rollbackRedeploy")]
        RollbackRedeploy,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EnvironmentTriggerContent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(rename = "eventTypes", default, skip_serializing_if = "Vec::is_empty")]
    pub event_types: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExecutionInput {
    #[serde(
        rename = "parallelExecutionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub parallel_execution_type: Option<execution_input::ParallelExecutionType>,
}
pub mod execution_input {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ParallelExecutionType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "multiConfiguration")]
        MultiConfiguration,
        #[serde(rename = "multiMachine")]
        MultiMachine,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FavoriteItem {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Folder {
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "lastChangedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_changed_by: Option<IdentityRef>,
    #[serde(
        rename = "lastChangedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_changed_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GatesDeploymentInput {
    #[serde(flatten)]
    pub base_deployment_input: BaseDeploymentInput,
    #[serde(
        rename = "minimumSuccessDuration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub minimum_success_duration: Option<i32>,
    #[serde(
        rename = "samplingInterval",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sampling_interval: Option<i32>,
    #[serde(
        rename = "stabilizationTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub stabilization_time: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GatesDeployPhase {
    #[serde(flatten)]
    pub deploy_phase: DeployPhase,
    #[serde(
        rename = "deploymentInput",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deployment_input: Option<GatesDeploymentInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GateUpdateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "gatesToIgnore",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub gates_to_ignore: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitArtifactDownloadInput {
    #[serde(flatten)]
    pub artifact_download_input_base: ArtifactDownloadInputBase,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitHubArtifactDownloadInput {
    #[serde(flatten)]
    pub artifact_download_input_base: ArtifactDownloadInputBase,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectBase {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityRef {
    #[serde(flatten)]
    pub graph_subject_base: GraphSubjectBase,
    #[serde(
        rename = "directoryAlias",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub directory_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inactive: Option<bool>,
    #[serde(
        rename = "isAadIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_aad_identity: Option<bool>,
    #[serde(
        rename = "isContainer",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_container: Option<bool>,
    #[serde(
        rename = "isDeletedInOrigin",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_deleted_in_origin: Option<bool>,
    #[serde(
        rename = "profileUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub profile_url: Option<String>,
    #[serde(
        rename = "uniqueName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IgnoredGate {
    #[serde(
        rename = "lastModifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputDescriptor {
    #[serde(
        rename = "dependencyInputIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub dependency_input_ids: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "groupName", default, skip_serializing_if = "Option::is_none")]
    pub group_name: Option<String>,
    #[serde(
        rename = "hasDynamicValueInformation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub has_dynamic_value_information: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "inputMode", default, skip_serializing_if = "Option::is_none")]
    pub input_mode: Option<input_descriptor::InputMode>,
    #[serde(
        rename = "isConfidential",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_confidential: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(
        rename = "useInDefaultDescription",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub use_in_default_description: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation: Option<InputValidation>,
    #[serde(rename = "valueHint", default, skip_serializing_if = "Option::is_none")]
    pub value_hint: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<InputValues>,
}
pub mod input_descriptor {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum InputMode {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "textBox")]
        TextBox,
        #[serde(rename = "passwordBox")]
        PasswordBox,
        #[serde(rename = "combo")]
        Combo,
        #[serde(rename = "radioButtons")]
        RadioButtons,
        #[serde(rename = "checkBox")]
        CheckBox,
        #[serde(rename = "textArea")]
        TextArea,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValidation {
    #[serde(rename = "dataType", default, skip_serializing_if = "Option::is_none")]
    pub data_type: Option<input_validation::DataType>,
    #[serde(
        rename = "isRequired",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_required: Option<bool>,
    #[serde(rename = "maxLength", default, skip_serializing_if = "Option::is_none")]
    pub max_length: Option<i32>,
    #[serde(rename = "maxValue", default, skip_serializing_if = "Option::is_none")]
    pub max_value: Option<String>,
    #[serde(rename = "minLength", default, skip_serializing_if = "Option::is_none")]
    pub min_length: Option<i32>,
    #[serde(rename = "minValue", default, skip_serializing_if = "Option::is_none")]
    pub min_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
    #[serde(
        rename = "patternMismatchErrorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pattern_mismatch_error_message: Option<String>,
}
pub mod input_validation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DataType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "string")]
        String,
        #[serde(rename = "number")]
        Number,
        #[serde(rename = "boolean")]
        Boolean,
        #[serde(rename = "guid")]
        Guid,
        #[serde(rename = "uri")]
        Uri,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(
        rename = "displayValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValues {
    #[serde(
        rename = "defaultValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<InputValuesError>,
    #[serde(rename = "inputId", default, skip_serializing_if = "Option::is_none")]
    pub input_id: Option<String>,
    #[serde(
        rename = "isDisabled",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_disabled: Option<bool>,
    #[serde(
        rename = "isLimitedToPossibleValues",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_limited_to_possible_values: Option<bool>,
    #[serde(
        rename = "isReadOnly",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_read_only: Option<bool>,
    #[serde(
        rename = "possibleValues",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub possible_values: Vec<InputValue>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValuesError {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputValuesQuery {
    #[serde(
        rename = "currentValues",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub current_values: Option<serde_json::Value>,
    #[serde(rename = "inputValues", default, skip_serializing_if = "Vec::is_empty")]
    pub input_values: Vec<InputValues>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Issue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(rename = "issueType", default, skip_serializing_if = "Option::is_none")]
    pub issue_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JenkinsArtifactDownloadInput {
    #[serde(flatten)]
    pub artifact_download_input_base: ArtifactDownloadInputBase,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MachineGroupBasedDeployPhase {
    #[serde(flatten)]
    pub deploy_phase: DeployPhase,
    #[serde(
        rename = "deploymentInput",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deployment_input: Option<MachineGroupDeploymentInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MachineGroupDeploymentInput {
    #[serde(flatten)]
    pub deployment_input: DeploymentInput,
    #[serde(
        rename = "deploymentHealthOption",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deployment_health_option: Option<String>,
    #[serde(
        rename = "healthPercent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub health_percent: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MailMessage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cc: Option<EmailRecipients>,
    #[serde(rename = "inReplyTo", default, skip_serializing_if = "Option::is_none")]
    pub in_reply_to: Option<String>,
    #[serde(rename = "messageId", default, skip_serializing_if = "Option::is_none")]
    pub message_id: Option<String>,
    #[serde(rename = "replyBy", default, skip_serializing_if = "Option::is_none")]
    pub reply_by: Option<String>,
    #[serde(rename = "replyTo", default, skip_serializing_if = "Option::is_none")]
    pub reply_to: Option<EmailRecipients>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub sections: Vec<serde_json::Value>,
    #[serde(
        rename = "senderType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sender_type: Option<mail_message::SenderType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<EmailRecipients>,
}
pub mod mail_message {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SenderType {
        #[serde(rename = "serviceAccount")]
        ServiceAccount,
        #[serde(rename = "requestingUser")]
        RequestingUser,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManualIntervention {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub approver: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instructions: Option<String>,
    #[serde(
        rename = "modifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<ReleaseShallowReference>,
    #[serde(
        rename = "releaseDefinition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_definition: Option<ReleaseDefinitionShallowReference>,
    #[serde(
        rename = "releaseEnvironment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_environment: Option<ReleaseEnvironmentShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<manual_intervention::Status>,
    #[serde(
        rename = "taskInstanceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub task_instance_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod manual_intervention {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "rejected")]
        Rejected,
        #[serde(rename = "approved")]
        Approved,
        #[serde(rename = "canceled")]
        Canceled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManualInterventionUpdateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<manual_intervention_update_metadata::Status>,
}
pub mod manual_intervention_update_metadata {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "rejected")]
        Rejected,
        #[serde(rename = "approved")]
        Approved,
        #[serde(rename = "canceled")]
        Canceled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MappingDetails {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mappings: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Metric {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MultiConfigInput {
    #[serde(flatten)]
    pub parallel_execution_input_base: ParallelExecutionInputBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multipliers: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MultiMachineInput {
    #[serde(flatten)]
    pub parallel_execution_input_base: ParallelExecutionInputBase,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrgPipelineReleaseSettings {
    #[serde(
        rename = "hasManagePipelinePoliciesPermission",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub has_manage_pipeline_policies_permission: Option<bool>,
    #[serde(
        rename = "orgEnforceJobAuthScope",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub org_enforce_job_auth_scope: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrgPipelineReleaseSettingsUpdateParameters {
    #[serde(
        rename = "orgEnforceJobAuthScope",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub org_enforce_job_auth_scope: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageTrigger {
    #[serde(flatten)]
    pub release_trigger_base: ReleaseTriggerBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ParallelExecutionInputBase {
    #[serde(flatten)]
    pub execution_input: ExecutionInput,
    #[serde(
        rename = "continueOnError",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continue_on_error: Option<bool>,
    #[serde(
        rename = "maxNumberOfAgents",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_number_of_agents: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelineProcess {
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<pipeline_process::Type>,
}
pub mod pipeline_process {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "designer")]
        Designer,
        #[serde(rename = "yaml")]
        Yaml,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProcessParameters {
    #[serde(
        rename = "dataSourceBindings",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub data_source_bindings: Vec<DataSourceBindingBase>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub inputs: Vec<TaskInputDefinitionBase>,
    #[serde(
        rename = "sourceDefinitions",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub source_definitions: Vec<TaskSourceDefinitionBase>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectPipelineReleaseSettings {
    #[serde(
        rename = "enforceJobAuthScope",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub enforce_job_auth_scope: Option<bool>,
    #[serde(
        rename = "hasManageSettingsPermission",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub has_manage_settings_permission: Option<bool>,
    #[serde(
        rename = "orgEnforceJobAuthScope",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub org_enforce_job_auth_scope: Option<bool>,
    #[serde(
        rename = "publicProject",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub public_project: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectPipelineReleaseSettingsUpdateParameters {
    #[serde(
        rename = "enforceJobAuthScope",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub enforce_job_auth_scope: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PropertiesCollection {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub item: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub keys: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub values: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PropertySelector {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub properties: Vec<String>,
    #[serde(
        rename = "selectorType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub selector_type: Option<property_selector::SelectorType>,
}
pub mod property_selector {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SelectorType {
        #[serde(rename = "inclusion")]
        Inclusion,
        #[serde(rename = "exclusion")]
        Exclusion,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PullRequestConfiguration {
    #[serde(
        rename = "codeRepositoryReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub code_repository_reference: Option<CodeRepositoryReference>,
    #[serde(
        rename = "useArtifactReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub use_artifact_reference: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PullRequestFilter {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
    #[serde(
        rename = "targetBranch",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_branch: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PullRequestTrigger {
    #[serde(flatten)]
    pub release_trigger_base: ReleaseTriggerBase,
    #[serde(
        rename = "artifactAlias",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_alias: Option<String>,
    #[serde(
        rename = "pullRequestConfiguration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pull_request_configuration: Option<PullRequestConfiguration>,
    #[serde(
        rename = "statusPolicyName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub status_policy_name: Option<String>,
    #[serde(
        rename = "triggerConditions",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub trigger_conditions: Vec<PullRequestFilter>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueuedReleaseData {
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(
        rename = "queuePosition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub queue_position: Option<i32>,
    #[serde(rename = "releaseId", default, skip_serializing_if = "Option::is_none")]
    pub release_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RealtimeReleaseDefinitionEvent {
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<i32>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RealtimeReleaseEvent {
    #[serde(
        rename = "environmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_id: Option<i32>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(rename = "releaseId", default, skip_serializing_if = "Option::is_none")]
    pub release_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Release {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub artifacts: Vec<Artifact>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(
        rename = "createdFor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_for: Option<IdentityRef>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(
        rename = "definitionSnapshotRevision",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_snapshot_revision: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub environments: Vec<ReleaseEnvironment>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "keepForever",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub keep_forever: Option<bool>,
    #[serde(
        rename = "logsContainerUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub logs_container_url: Option<String>,
    #[serde(
        rename = "modifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_by: Option<IdentityRef>,
    #[serde(
        rename = "modifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "poolName", default, skip_serializing_if = "Option::is_none")]
    pub pool_name: Option<String>,
    #[serde(
        rename = "projectReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_reference: Option<ProjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<PropertiesCollection>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<release::Reason>,
    #[serde(
        rename = "releaseDefinition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_definition: Option<ReleaseDefinitionShallowReference>,
    #[serde(
        rename = "releaseDefinitionRevision",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_definition_revision: Option<i32>,
    #[serde(
        rename = "releaseNameFormat",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_name_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<release::Status>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
    #[serde(
        rename = "triggeringArtifactAlias",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub triggering_artifact_alias: Option<String>,
    #[serde(
        rename = "variableGroups",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub variable_groups: Vec<VariableGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
pub mod release {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Reason {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "manual")]
        Manual,
        #[serde(rename = "continuousIntegration")]
        ContinuousIntegration,
        #[serde(rename = "schedule")]
        Schedule,
        #[serde(rename = "pullRequest")]
        PullRequest,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "draft")]
        Draft,
        #[serde(rename = "active")]
        Active,
        #[serde(rename = "abandoned")]
        Abandoned,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseAbandonedEvent {
    #[serde(flatten)]
    pub release_event: ReleaseEvent,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ProjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<Release>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseApproval {
    #[serde(
        rename = "approvalType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub approval_type: Option<release_approval::ApprovalType>,
    #[serde(
        rename = "approvedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub approved_by: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub approver: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub history: Vec<ReleaseApprovalHistory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "isAutomated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_automated: Option<bool>,
    #[serde(
        rename = "modifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rank: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<ReleaseShallowReference>,
    #[serde(
        rename = "releaseDefinition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_definition: Option<ReleaseDefinitionShallowReference>,
    #[serde(
        rename = "releaseEnvironment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_environment: Option<ReleaseEnvironmentShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<release_approval::Status>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod release_approval {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ApprovalType {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "preDeploy")]
        PreDeploy,
        #[serde(rename = "postDeploy")]
        PostDeploy,
        #[serde(rename = "all")]
        All,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "approved")]
        Approved,
        #[serde(rename = "rejected")]
        Rejected,
        #[serde(rename = "reassigned")]
        Reassigned,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "skipped")]
        Skipped,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseApprovalHistory {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub approver: Option<IdentityRef>,
    #[serde(rename = "changedBy", default, skip_serializing_if = "Option::is_none")]
    pub changed_by: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(
        rename = "modifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseApprovalPendingEvent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub approval: Option<ReleaseApproval>,
    #[serde(
        rename = "approvalOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub approval_options: Option<ApprovalOptions>,
    #[serde(
        rename = "completedApprovals",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub completed_approvals: Vec<ReleaseApproval>,
    #[serde(
        rename = "definitionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<Deployment>,
    #[serde(
        rename = "environmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_id: Option<i32>,
    #[serde(
        rename = "environmentName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub environments: Vec<ReleaseEnvironment>,
    #[serde(
        rename = "isMultipleRankApproval",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_multiple_rank_approval: Option<bool>,
    #[serde(
        rename = "pendingApprovals",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub pending_approvals: Vec<ReleaseApproval>,
    #[serde(
        rename = "releaseCreator",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_creator: Option<String>,
    #[serde(
        rename = "releaseName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(
        rename = "webAccessUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub web_access_uri: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseArtifact {
    #[serde(
        rename = "artifactProvider",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_provider: Option<ArtifactProvider>,
    #[serde(
        rename = "artifactType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_type: Option<String>,
    #[serde(
        rename = "definitionData",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_data: Option<String>,
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "releaseId", default, skip_serializing_if = "Option::is_none")]
    pub release_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseCondition {
    #[serde(flatten)]
    pub condition: Condition,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseCreatedEvent {
    #[serde(flatten)]
    pub release_event: ReleaseEvent,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ProjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<Release>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinition {
    #[serde(flatten)]
    pub release_definition_shallow_reference: ReleaseDefinitionShallowReference,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub artifacts: Vec<Artifact>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub environments: Vec<ReleaseDefinitionEnvironment>,
    #[serde(rename = "isDeleted", default, skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    #[serde(
        rename = "lastRelease",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_release: Option<ReleaseReference>,
    #[serde(
        rename = "modifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_by: Option<IdentityRef>,
    #[serde(
        rename = "modifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<PropertiesCollection>,
    #[serde(
        rename = "releaseNameFormat",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_name_format: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<release_definition::Source>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub triggers: Vec<ReleaseTriggerBase>,
    #[serde(
        rename = "variableGroups",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub variable_groups: Vec<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
pub mod release_definition {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Source {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "restApi")]
        RestApi,
        #[serde(rename = "userInterface")]
        UserInterface,
        #[serde(rename = "ibiza")]
        Ibiza,
        #[serde(rename = "portalExtensionApi")]
        PortalExtensionApi,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinitionApprovals {
    #[serde(
        rename = "approvalOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub approval_options: Option<ApprovalOptions>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub approvals: Vec<ReleaseDefinitionApprovalStep>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinitionApprovalStep {
    #[serde(flatten)]
    pub release_definition_environment_step: ReleaseDefinitionEnvironmentStep,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub approver: Option<IdentityRef>,
    #[serde(
        rename = "isAutomated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_automated: Option<bool>,
    #[serde(
        rename = "isNotificationOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_notification_on: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rank: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinitionDeployStep {
    #[serde(flatten)]
    pub release_definition_environment_step: ReleaseDefinitionEnvironmentStep,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tasks: Vec<WorkflowTask>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinitionEnvironment {
    #[serde(rename = "badgeUrl", default, skip_serializing_if = "Option::is_none")]
    pub badge_url: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub conditions: Vec<Condition>,
    #[serde(
        rename = "currentRelease",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub current_release: Option<ReleaseShallowReference>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub demands: Vec<Demand>,
    #[serde(
        rename = "deployPhases",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub deploy_phases: Vec<DeployPhase>,
    #[serde(
        rename = "deployStep",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deploy_step: Option<ReleaseDefinitionDeployStep>,
    #[serde(
        rename = "environmentOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_options: Option<EnvironmentOptions>,
    #[serde(
        rename = "environmentTriggers",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub environment_triggers: Vec<EnvironmentTrigger>,
    #[serde(
        rename = "executionPolicy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub execution_policy: Option<EnvironmentExecutionPolicy>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IdentityRef>,
    #[serde(
        rename = "postDeployApprovals",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub post_deploy_approvals: Option<ReleaseDefinitionApprovals>,
    #[serde(
        rename = "postDeploymentGates",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub post_deployment_gates: Option<ReleaseDefinitionGatesStep>,
    #[serde(
        rename = "preDeployApprovals",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pre_deploy_approvals: Option<ReleaseDefinitionApprovals>,
    #[serde(
        rename = "preDeploymentGates",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pre_deployment_gates: Option<ReleaseDefinitionGatesStep>,
    #[serde(
        rename = "processParameters",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub process_parameters: Option<ProcessParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<PropertiesCollection>,
    #[serde(rename = "queueId", default, skip_serializing_if = "Option::is_none")]
    pub queue_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rank: Option<i32>,
    #[serde(
        rename = "retentionPolicy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub retention_policy: Option<EnvironmentRetentionPolicy>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub schedules: Vec<ReleaseSchedule>,
    #[serde(
        rename = "variableGroups",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub variable_groups: Vec<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinitionEnvironmentStep {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinitionEnvironmentSummary {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "lastReleases",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub last_releases: Vec<ReleaseShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinitionEnvironmentTemplate {
    #[serde(rename = "canDelete", default, skip_serializing_if = "Option::is_none")]
    pub can_delete: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<ReleaseDefinitionEnvironment>,
    #[serde(
        rename = "iconTaskId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub icon_task_id: Option<String>,
    #[serde(rename = "iconUri", default, skip_serializing_if = "Option::is_none")]
    pub icon_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "isDeleted", default, skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinitionGate {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tasks: Vec<WorkflowTask>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinitionGatesOptions {
    #[serde(rename = "isEnabled", default, skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<bool>,
    #[serde(
        rename = "minimumSuccessDuration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub minimum_success_duration: Option<i32>,
    #[serde(
        rename = "samplingInterval",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sampling_interval: Option<i32>,
    #[serde(
        rename = "stabilizationTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub stabilization_time: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinitionGatesStep {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub gates: Vec<ReleaseDefinitionGate>,
    #[serde(
        rename = "gatesOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub gates_options: Option<ReleaseDefinitionGatesOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinitionRevision {
    #[serde(
        rename = "apiVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub api_version: Option<String>,
    #[serde(rename = "changedBy", default, skip_serializing_if = "Option::is_none")]
    pub changed_by: Option<IdentityRef>,
    #[serde(
        rename = "changedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub changed_date: Option<String>,
    #[serde(
        rename = "changeType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_type: Option<release_definition_revision::ChangeType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<i32>,
    #[serde(
        rename = "definitionUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
}
pub mod release_definition_revision {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ChangeType {
        #[serde(rename = "add")]
        Add,
        #[serde(rename = "update")]
        Update,
        #[serde(rename = "delete")]
        Delete,
        #[serde(rename = "undelete")]
        Undelete,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinitionShallowReference {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(
        rename = "projectReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_reference: Option<ProjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinitionSummary {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub environments: Vec<ReleaseDefinitionEnvironmentSummary>,
    #[serde(
        rename = "releaseDefinition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_definition: Option<ReleaseDefinitionShallowReference>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub releases: Vec<Release>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinitionUndeleteParameter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDeployPhase {
    #[serde(
        rename = "deploymentJobs",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub deployment_jobs: Vec<DeploymentJob>,
    #[serde(rename = "errorLog", default, skip_serializing_if = "Option::is_none")]
    pub error_log: Option<String>,
    #[serde(
        rename = "manualInterventions",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub manual_interventions: Vec<ManualIntervention>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "phaseId", default, skip_serializing_if = "Option::is_none")]
    pub phase_id: Option<String>,
    #[serde(rename = "phaseType", default, skip_serializing_if = "Option::is_none")]
    pub phase_type: Option<release_deploy_phase::PhaseType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rank: Option<i32>,
    #[serde(rename = "runPlanId", default, skip_serializing_if = "Option::is_none")]
    pub run_plan_id: Option<String>,
    #[serde(rename = "startedOn", default, skip_serializing_if = "Option::is_none")]
    pub started_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<release_deploy_phase::Status>,
}
pub mod release_deploy_phase {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum PhaseType {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "agentBasedDeployment")]
        AgentBasedDeployment,
        #[serde(rename = "runOnServer")]
        RunOnServer,
        #[serde(rename = "machineGroupBasedDeployment")]
        MachineGroupBasedDeployment,
        #[serde(rename = "deploymentGates")]
        DeploymentGates,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "notStarted")]
        NotStarted,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "partiallySucceeded")]
        PartiallySucceeded,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "skipped")]
        Skipped,
        #[serde(rename = "cancelling")]
        Cancelling,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseEnvironment {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub conditions: Vec<ReleaseCondition>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(
        rename = "definitionEnvironmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_environment_id: Option<i32>,
    #[serde(
        rename = "deployPhasesSnapshot",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub deploy_phases_snapshot: Vec<DeployPhase>,
    #[serde(rename = "deploySteps", default, skip_serializing_if = "Vec::is_empty")]
    pub deploy_steps: Vec<DeploymentAttempt>,
    #[serde(
        rename = "environmentOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_options: Option<EnvironmentOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "modifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "nextScheduledUtcTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub next_scheduled_utc_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IdentityRef>,
    #[serde(
        rename = "postApprovalsSnapshot",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub post_approvals_snapshot: Option<ReleaseDefinitionApprovals>,
    #[serde(
        rename = "postDeployApprovals",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub post_deploy_approvals: Vec<ReleaseApproval>,
    #[serde(
        rename = "postDeploymentGatesSnapshot",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub post_deployment_gates_snapshot: Option<ReleaseDefinitionGatesStep>,
    #[serde(
        rename = "preApprovalsSnapshot",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pre_approvals_snapshot: Option<ReleaseDefinitionApprovals>,
    #[serde(
        rename = "preDeployApprovals",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub pre_deploy_approvals: Vec<ReleaseApproval>,
    #[serde(
        rename = "preDeploymentGatesSnapshot",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pre_deployment_gates_snapshot: Option<ReleaseDefinitionGatesStep>,
    #[serde(
        rename = "processParameters",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub process_parameters: Option<ProcessParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rank: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<ReleaseShallowReference>,
    #[serde(
        rename = "releaseCreatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_created_by: Option<IdentityRef>,
    #[serde(
        rename = "releaseDefinition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_definition: Option<ReleaseDefinitionShallowReference>,
    #[serde(rename = "releaseId", default, skip_serializing_if = "Option::is_none")]
    pub release_id: Option<i32>,
    #[serde(
        rename = "scheduledDeploymentTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub scheduled_deployment_time: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub schedules: Vec<ReleaseSchedule>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<release_environment::Status>,
    #[serde(
        rename = "timeToDeploy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub time_to_deploy: Option<f64>,
    #[serde(
        rename = "triggerReason",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub trigger_reason: Option<String>,
    #[serde(
        rename = "variableGroups",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub variable_groups: Vec<VariableGroup>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
pub mod release_environment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "notStarted")]
        NotStarted,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "rejected")]
        Rejected,
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "scheduled")]
        Scheduled,
        #[serde(rename = "partiallySucceeded")]
        PartiallySucceeded,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseEnvironmentCompletedEvent {
    #[serde(
        rename = "createdByName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_by_name: Option<String>,
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<i32>,
    #[serde(
        rename = "definitionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<ReleaseEnvironment>,
    #[serde(
        rename = "environmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_id: Option<i32>,
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<release_environment_completed_event::Reason>,
    #[serde(
        rename = "releaseCreatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_created_by: Option<IdentityRef>,
    #[serde(
        rename = "releaseLogsUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_logs_uri: Option<String>,
    #[serde(
        rename = "releaseName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(
        rename = "webAccessUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub web_access_uri: Option<String>,
}
pub mod release_environment_completed_event {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Reason {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "manual")]
        Manual,
        #[serde(rename = "automated")]
        Automated,
        #[serde(rename = "scheduled")]
        Scheduled,
        #[serde(rename = "redeployTrigger")]
        RedeployTrigger,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseEnvironmentShallowReference {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseEnvironmentStatusUpdatedEvent {
    #[serde(flatten)]
    pub realtime_release_definition_event: RealtimeReleaseDefinitionEvent,
    #[serde(
        rename = "environmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_id: Option<i32>,
    #[serde(
        rename = "environmentStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_status: Option<release_environment_status_updated_event::EnvironmentStatus>,
    #[serde(
        rename = "latestDeploymentOperationStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub latest_deployment_operation_status:
        Option<release_environment_status_updated_event::LatestDeploymentOperationStatus>,
    #[serde(
        rename = "latestDeploymentStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub latest_deployment_status:
        Option<release_environment_status_updated_event::LatestDeploymentStatus>,
    #[serde(rename = "releaseId", default, skip_serializing_if = "Option::is_none")]
    pub release_id: Option<i32>,
}
pub mod release_environment_status_updated_event {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EnvironmentStatus {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "notStarted")]
        NotStarted,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "rejected")]
        Rejected,
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "scheduled")]
        Scheduled,
        #[serde(rename = "partiallySucceeded")]
        PartiallySucceeded,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LatestDeploymentOperationStatus {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "scheduled")]
        Scheduled,
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "approved")]
        Approved,
        #[serde(rename = "rejected")]
        Rejected,
        #[serde(rename = "deferred")]
        Deferred,
        #[serde(rename = "queuedForAgent")]
        QueuedForAgent,
        #[serde(rename = "phaseInProgress")]
        PhaseInProgress,
        #[serde(rename = "phaseSucceeded")]
        PhaseSucceeded,
        #[serde(rename = "phasePartiallySucceeded")]
        PhasePartiallySucceeded,
        #[serde(rename = "phaseFailed")]
        PhaseFailed,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "phaseCanceled")]
        PhaseCanceled,
        #[serde(rename = "manualInterventionPending")]
        ManualInterventionPending,
        #[serde(rename = "queuedForPipeline")]
        QueuedForPipeline,
        #[serde(rename = "cancelling")]
        Cancelling,
        #[serde(rename = "evaluatingGates")]
        EvaluatingGates,
        #[serde(rename = "gateFailed")]
        GateFailed,
        #[serde(rename = "all")]
        All,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LatestDeploymentStatus {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "notDeployed")]
        NotDeployed,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "partiallySucceeded")]
        PartiallySucceeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseEnvironmentUpdateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "scheduledDeploymentTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub scheduled_deployment_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<release_environment_update_metadata::Status>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
pub mod release_environment_update_metadata {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "notStarted")]
        NotStarted,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "rejected")]
        Rejected,
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "scheduled")]
        Scheduled,
        #[serde(rename = "partiallySucceeded")]
        PartiallySucceeded,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseEvent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseGates {
    #[serde(
        rename = "deploymentJobs",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub deployment_jobs: Vec<DeploymentJob>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "ignoredGates",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub ignored_gates: Vec<IgnoredGate>,
    #[serde(
        rename = "lastModifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_modified_on: Option<String>,
    #[serde(rename = "runPlanId", default, skip_serializing_if = "Option::is_none")]
    pub run_plan_id: Option<String>,
    #[serde(
        rename = "stabilizationCompletedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub stabilization_completed_on: Option<String>,
    #[serde(rename = "startedOn", default, skip_serializing_if = "Option::is_none")]
    pub started_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<release_gates::Status>,
    #[serde(
        rename = "succeedingSince",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub succeeding_since: Option<String>,
}
pub mod release_gates {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "canceled")]
        Canceled,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseGatesPhase {
    #[serde(flatten)]
    pub release_deploy_phase: ReleaseDeployPhase,
    #[serde(
        rename = "ignoredGates",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub ignored_gates: Vec<IgnoredGate>,
    #[serde(
        rename = "stabilizationCompletedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub stabilization_completed_on: Option<String>,
    #[serde(
        rename = "succeedingSince",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub succeeding_since: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseManagementInputValue {
    #[serde(
        rename = "displayValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseNotCreatedEvent {
    #[serde(
        rename = "definitionReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_reference: Option<ReleaseDefinitionShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(
        rename = "releaseReason",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_reason: Option<release_not_created_event::ReleaseReason>,
    #[serde(
        rename = "requestedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_by: Option<IdentityRef>,
}
pub mod release_not_created_event {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ReleaseReason {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "manual")]
        Manual,
        #[serde(rename = "continuousIntegration")]
        ContinuousIntegration,
        #[serde(rename = "schedule")]
        Schedule,
        #[serde(rename = "pullRequest")]
        PullRequest,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseReference {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub artifacts: Vec<Artifact>,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "modifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_by: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<release_reference::Reason>,
    #[serde(
        rename = "releaseDefinition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_definition: Option<ReleaseDefinitionShallowReference>,
}
pub mod release_reference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Reason {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "manual")]
        Manual,
        #[serde(rename = "continuousIntegration")]
        ContinuousIntegration,
        #[serde(rename = "schedule")]
        Schedule,
        #[serde(rename = "pullRequest")]
        PullRequest,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseRevision {
    #[serde(rename = "changedBy", default, skip_serializing_if = "Option::is_none")]
    pub changed_by: Option<IdentityRef>,
    #[serde(
        rename = "changedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub changed_date: Option<String>,
    #[serde(
        rename = "changeDetails",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_details: Option<String>,
    #[serde(
        rename = "changeType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "definitionSnapshotRevision",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_snapshot_revision: Option<i32>,
    #[serde(rename = "releaseId", default, skip_serializing_if = "Option::is_none")]
    pub release_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseSchedule {
    #[serde(
        rename = "daysToRelease",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub days_to_release: Option<release_schedule::DaysToRelease>,
    #[serde(rename = "jobId", default, skip_serializing_if = "Option::is_none")]
    pub job_id: Option<String>,
    #[serde(
        rename = "scheduleOnlyWithChanges",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub schedule_only_with_changes: Option<bool>,
    #[serde(
        rename = "startHours",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub start_hours: Option<i32>,
    #[serde(
        rename = "startMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub start_minutes: Option<i32>,
    #[serde(
        rename = "timeZoneId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub time_zone_id: Option<String>,
}
pub mod release_schedule {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DaysToRelease {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "monday")]
        Monday,
        #[serde(rename = "tuesday")]
        Tuesday,
        #[serde(rename = "wednesday")]
        Wednesday,
        #[serde(rename = "thursday")]
        Thursday,
        #[serde(rename = "friday")]
        Friday,
        #[serde(rename = "saturday")]
        Saturday,
        #[serde(rename = "sunday")]
        Sunday,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseSettings {
    #[serde(
        rename = "complianceSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub compliance_settings: Option<ComplianceSettings>,
    #[serde(
        rename = "retentionSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub retention_settings: Option<RetentionSettings>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseShallowReference {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseStartEnvironmentMetadata {
    #[serde(
        rename = "definitionEnvironmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_environment_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseStartMetadata {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub artifacts: Vec<ArtifactMetadata>,
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "environmentsMetadata",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub environments_metadata: Vec<ReleaseStartEnvironmentMetadata>,
    #[serde(rename = "isDraft", default, skip_serializing_if = "Option::is_none")]
    pub is_draft: Option<bool>,
    #[serde(
        rename = "manualEnvironments",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub manual_environments: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<PropertiesCollection>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<release_start_metadata::Reason>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
pub mod release_start_metadata {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Reason {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "manual")]
        Manual,
        #[serde(rename = "continuousIntegration")]
        ContinuousIntegration,
        #[serde(rename = "schedule")]
        Schedule,
        #[serde(rename = "pullRequest")]
        PullRequest,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseTask {
    #[serde(rename = "agentName", default, skip_serializing_if = "Option::is_none")]
    pub agent_name: Option<String>,
    #[serde(
        rename = "finishTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub finish_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub issues: Vec<Issue>,
    #[serde(rename = "lineCount", default, skip_serializing_if = "Option::is_none")]
    pub line_count: Option<i64>,
    #[serde(rename = "logUrl", default, skip_serializing_if = "Option::is_none")]
    pub log_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "percentComplete",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub percent_complete: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rank: Option<i32>,
    #[serde(
        rename = "resultCode",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_code: Option<String>,
    #[serde(rename = "startTime", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<release_task::Status>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub task: Option<WorkflowTaskReference>,
    #[serde(
        rename = "timelineRecordId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub timeline_record_id: Option<String>,
}
pub mod release_task {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "success")]
        Success,
        #[serde(rename = "failure")]
        Failure,
        #[serde(rename = "canceled")]
        Canceled,
        #[serde(rename = "skipped")]
        Skipped,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "partiallySucceeded")]
        PartiallySucceeded,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseTaskAttachment {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(
        rename = "modifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_by: Option<IdentityRef>,
    #[serde(
        rename = "modifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "recordId", default, skip_serializing_if = "Option::is_none")]
    pub record_id: Option<String>,
    #[serde(
        rename = "timelineId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub timeline_id: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseTaskLogUpdatedEvent {
    #[serde(flatten)]
    pub realtime_release_event: RealtimeReleaseEvent,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub lines: Vec<String>,
    #[serde(
        rename = "stepRecordId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub step_record_id: Option<String>,
    #[serde(
        rename = "timelineRecordId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub timeline_record_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseTasksUpdatedEvent {
    #[serde(flatten)]
    pub realtime_release_event: RealtimeReleaseEvent,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub job: Option<ReleaseTask>,
    #[serde(rename = "planId", default, skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<String>,
    #[serde(
        rename = "releaseStepId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_step_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tasks: Vec<ReleaseTask>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseTriggerBase {
    #[serde(
        rename = "triggerType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub trigger_type: Option<release_trigger_base::TriggerType>,
}
pub mod release_trigger_base {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TriggerType {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "artifactSource")]
        ArtifactSource,
        #[serde(rename = "schedule")]
        Schedule,
        #[serde(rename = "sourceRepo")]
        SourceRepo,
        #[serde(rename = "containerImage")]
        ContainerImage,
        #[serde(rename = "package")]
        Package,
        #[serde(rename = "pullRequest")]
        PullRequest,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseUpdatedEvent {
    #[serde(flatten)]
    pub realtime_release_event: RealtimeReleaseEvent,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<Release>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseUpdateMetadata {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "keepForever",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub keep_forever: Option<bool>,
    #[serde(
        rename = "manualEnvironments",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub manual_environments: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<release_update_metadata::Status>,
}
pub mod release_update_metadata {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "undefined")]
        Undefined,
        #[serde(rename = "draft")]
        Draft,
        #[serde(rename = "active")]
        Active,
        #[serde(rename = "abandoned")]
        Abandoned,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseWorkItemRef {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourceReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RetentionPolicy {
    #[serde(
        rename = "daysToKeep",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub days_to_keep: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RetentionSettings {
    #[serde(
        rename = "daysToKeepDeletedReleases",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub days_to_keep_deleted_releases: Option<i32>,
    #[serde(
        rename = "defaultEnvironmentRetentionPolicy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_environment_retention_policy: Option<EnvironmentRetentionPolicy>,
    #[serde(
        rename = "maximumEnvironmentRetentionPolicy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub maximum_environment_retention_policy: Option<EnvironmentRetentionPolicy>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunOnServerDeployPhase {
    #[serde(flatten)]
    pub deploy_phase: DeployPhase,
    #[serde(
        rename = "deploymentInput",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deployment_input: Option<ServerDeploymentInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScheduledReleaseTrigger {
    #[serde(flatten)]
    pub release_trigger_base: ReleaseTriggerBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<ReleaseSchedule>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServerDeploymentInput {
    #[serde(flatten)]
    pub base_deployment_input: BaseDeploymentInput,
    #[serde(
        rename = "parallelExecution",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub parallel_execution: Option<ExecutionInput>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceEndpointReference {
    #[serde(flatten)]
    pub resource_reference: ResourceReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceIdInput {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourcePullRequestVersion {
    #[serde(
        rename = "iterationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub iteration_id: Option<String>,
    #[serde(
        rename = "pullRequestId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pull_request_id: Option<String>,
    #[serde(
        rename = "pullRequestMergedAt",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pull_request_merged_at: Option<String>,
    #[serde(
        rename = "sourceBranch",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_branch: Option<String>,
    #[serde(
        rename = "sourceBranchCommitId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_branch_commit_id: Option<String>,
    #[serde(
        rename = "targetBranch",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_branch: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceRepoTrigger {
    #[serde(flatten)]
    pub release_trigger_base: ReleaseTriggerBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
    #[serde(
        rename = "branchFilters",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub branch_filters: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SummaryMailSection {
    #[serde(
        rename = "htmlContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub html_content: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rank: Option<i32>,
    #[serde(
        rename = "sectionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub section_type: Option<summary_mail_section::SectionType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}
pub mod summary_mail_section {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SectionType {
        #[serde(rename = "details")]
        Details,
        #[serde(rename = "environments")]
        Environments,
        #[serde(rename = "issues")]
        Issues,
        #[serde(rename = "testResults")]
        TestResults,
        #[serde(rename = "workItems")]
        WorkItems,
        #[serde(rename = "releaseInfo")]
        ReleaseInfo,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TagFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskInputDefinitionBase {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub aliases: Vec<String>,
    #[serde(
        rename = "defaultValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_value: Option<String>,
    #[serde(rename = "groupName", default, skip_serializing_if = "Option::is_none")]
    pub group_name: Option<String>,
    #[serde(
        rename = "helpMarkDown",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub help_mark_down: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation: Option<TaskInputValidation>,
    #[serde(
        rename = "visibleRule",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub visible_rule: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskInputValidation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskOrchestrationPlanGroupReference {
    #[serde(rename = "planGroup", default, skip_serializing_if = "Option::is_none")]
    pub plan_group: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskOrchestrationPlanGroupsStartedEvent {
    #[serde(rename = "planGroups", default, skip_serializing_if = "Vec::is_empty")]
    pub plan_groups: Vec<TaskOrchestrationPlanGroupReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskSourceDefinitionBase {
    #[serde(rename = "authKey", default, skip_serializing_if = "Option::is_none")]
    pub auth_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    #[serde(
        rename = "keySelector",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub key_selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub selector: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TfvcArtifactDownloadInput {
    #[serde(flatten)]
    pub artifact_download_input_base: ArtifactDownloadInputBase,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimeZone {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimeZoneList {
    #[serde(
        rename = "utcTimeZone",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub utc_time_zone: Option<TimeZone>,
    #[serde(
        rename = "validTimeZones",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub valid_time_zones: Vec<TimeZone>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VariableGroup {
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "isShared", default, skip_serializing_if = "Option::is_none")]
    pub is_shared: Option<bool>,
    #[serde(
        rename = "modifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_by: Option<IdentityRef>,
    #[serde(
        rename = "modifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "providerData",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub provider_data: Option<VariableGroupProviderData>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(
        rename = "variableGroupProjectReferences",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub variable_group_project_references: Vec<VariableGroupProjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VariableGroupProjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "projectReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_reference: Option<ProjectReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VariableGroupProviderData {}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VariableValue {
    #[serde(
        rename = "isReadOnly",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_read_only: Option<bool>,
    #[serde(rename = "isSecret", default, skip_serializing_if = "Option::is_none")]
    pub is_secret: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowTask {
    #[serde(rename = "alwaysRun", default, skip_serializing_if = "Option::is_none")]
    pub always_run: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    #[serde(
        rename = "continueOnError",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continue_on_error: Option<bool>,
    #[serde(
        rename = "definitionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inputs: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "overrideInputs",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub override_inputs: Option<serde_json::Value>,
    #[serde(rename = "refName", default, skip_serializing_if = "Option::is_none")]
    pub ref_name: Option<String>,
    #[serde(
        rename = "retryCountOnTaskFailure",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub retry_count_on_task_failure: Option<i32>,
    #[serde(rename = "taskId", default, skip_serializing_if = "Option::is_none")]
    pub task_id: Option<String>,
    #[serde(
        rename = "timeoutInMinutes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub timeout_in_minutes: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowTaskReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct YamlFileSource {
    #[serde(
        rename = "sourceReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_reference: Option<serde_json::Value>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<yaml_file_source::Type>,
}
pub mod yaml_file_source {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "tfsGit")]
        TfsGit,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct YamlPipelineProcess {
    #[serde(flatten)]
    pub pipeline_process: PipelineProcess,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub errors: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filename: Option<String>,
    #[serde(
        rename = "fileSource",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub file_source: Option<YamlFileSource>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<YamlPipelineProcessResources>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct YamlPipelineProcessResources {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub endpoints: Vec<ServiceEndpointReference>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub queues: Vec<AgentPoolQueueReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct YamlSourceReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Deployment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FolderList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Folder>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManualInterventionList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ManualIntervention>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseApprovalList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ReleaseApproval>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinitionList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ReleaseDefinition>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseDefinitionRevisionList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ReleaseDefinitionRevision>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Release>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseTaskAttachmentList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ReleaseTaskAttachment>,
}
