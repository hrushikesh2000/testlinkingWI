#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Artifact {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "signedContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub signed_content: Option<SignedUrl>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildResourceParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContainerResourceParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreatePipelineConfigurationParameters {
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<create_pipeline_configuration_parameters::Type>,
}
pub mod create_pipeline_configuration_parameters {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "yaml")]
        Yaml,
        #[serde(rename = "designerJson")]
        DesignerJson,
        #[serde(rename = "justInTime")]
        JustInTime,
        #[serde(rename = "designerHyphenJson")]
        DesignerHyphenJson,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreatePipelineParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<CreatePipelineConfigurationParameters>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub folder: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Log {
    #[serde(rename = "createdOn", default, skip_serializing_if = "Option::is_none")]
    pub created_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "lastChangedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_changed_on: Option<String>,
    #[serde(rename = "lineCount", default, skip_serializing_if = "Option::is_none")]
    pub line_count: Option<i64>,
    #[serde(
        rename = "signedContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub signed_content: Option<SignedUrl>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LogCollection {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub logs: Vec<Log>,
    #[serde(
        rename = "signedContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub signed_content: Option<SignedUrl>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PackageResourceParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Pipeline {
    #[serde(rename = "_links")]
    pub links: ReferenceLinks,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<PipelineConfiguration>,
    pub url: String,
    pub folder: String,
    pub id: i32,
    pub name: String,
    pub revision: i32,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelineBase {
    pub folder: String,
    pub id: i32,
    pub name: String,
    pub revision: i32,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelineConfiguration {
    #[serde(rename = "type")]
    pub type_: pipeline_configuration::Type,
    pub path: String,
    pub repository: pipeline_configuration::Repository,
}
pub mod pipeline_configuration {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "yaml")]
        Yaml,
        #[serde(rename = "designerJson")]
        DesignerJson,
        #[serde(rename = "justInTime")]
        JustInTime,
        #[serde(rename = "designerHyphenJson")]
        DesignerHyphenJson,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub struct Repository {
        pub id: String,
        #[serde(rename = "type")]
        pub type_: String,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelineReference {
    #[serde(flatten)]
    pub pipeline_base: PipelineBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelineResourceParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PreviewRun {
    #[serde(rename = "finalYaml", default, skip_serializing_if = "Option::is_none")]
    pub final_yaml: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceLinks {
    #[serde(rename = "self", default, skip_serializing_if = "Option::is_none")]
    pub self_: Option<Link>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub web: Option<Link>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Repository {
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<repository::Type>,
}
pub mod repository {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "gitHub")]
        GitHub,
        #[serde(rename = "azureReposGit")]
        AzureReposGit,
        #[serde(rename = "gitHubEnterprise")]
        GitHubEnterprise,
        #[serde(rename = "azureReposGitHyphenated")]
        AzureReposGitHyphenated,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepositoryResource {
    #[serde(rename = "refName", default, skip_serializing_if = "Option::is_none")]
    pub ref_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<Repository>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepositoryResourceParameters {
    #[serde(rename = "refName", default, skip_serializing_if = "Option::is_none")]
    pub ref_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
    #[serde(rename = "tokenType", default, skip_serializing_if = "Option::is_none")]
    pub token_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Run {
    #[serde(flatten)]
    pub run_reference: RunReference,
    #[serde(rename = "_links")]
    pub links: ReferenceLinks,
    #[serde(rename = "createdDate")]
    pub created_date: String,
    #[serde(rename = "finalYaml", default, skip_serializing_if = "Option::is_none")]
    pub final_yaml: Option<String>,
    #[serde(rename = "finishedDate")]
    pub finished_date: String,
    pub pipeline: PipelineReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<RunResources>,
    pub result: run::Result,
    pub state: run::State,
    pub url: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
}
pub mod run {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Result {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "succeeded")]
        Succeeded,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "canceled")]
        Canceled,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "canceling")]
        Canceling,
        #[serde(rename = "completed")]
        Completed,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunPipelineParameters {
    #[serde(
        rename = "previewRun",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub preview_run: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<RunResourcesParameters>,
    #[serde(
        rename = "stagesToSkip",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub stages_to_skip: Vec<String>,
    #[serde(
        rename = "templateParameters",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub template_parameters: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variables: Option<serde_json::Value>,
    #[serde(
        rename = "yamlOverride",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub yaml_override: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunReference {
    pub id: i32,
    pub name: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repositories: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunResourcesParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub builds: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub packages: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pipelines: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repositories: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SignalRConnection {
    #[serde(
        rename = "signedContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub signed_content: Option<SignedUrl>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SignedUrl {
    #[serde(
        rename = "signatureExpires",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub signature_expires: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Variable {
    #[serde(rename = "isSecret", default, skip_serializing_if = "Option::is_none")]
    pub is_secret: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Link {
    pub href: String,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelineList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Pipeline>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Run>,
}
