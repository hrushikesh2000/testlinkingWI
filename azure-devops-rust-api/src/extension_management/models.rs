#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AcquisitionOperation {
    #[serde(
        rename = "operationState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub operation_state: Option<acquisition_operation::OperationState>,
    #[serde(
        rename = "operationType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub operation_type: Option<acquisition_operation::OperationType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub reasons: Vec<AcquisitionOperationDisallowReason>,
}
pub mod acquisition_operation {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OperationState {
        #[serde(rename = "disallow")]
        Disallow,
        #[serde(rename = "allow")]
        Allow,
        #[serde(rename = "completed")]
        Completed,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OperationType {
        #[serde(rename = "get")]
        Get,
        #[serde(rename = "install")]
        Install,
        #[serde(rename = "buy")]
        Buy,
        #[serde(rename = "try")]
        Try,
        #[serde(rename = "request")]
        Request,
        #[serde(rename = "none")]
        None,
        #[serde(rename = "purchaseRequest")]
        PurchaseRequest,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AcquisitionOperationDisallowReason {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AcquisitionOptions {
    #[serde(
        rename = "defaultOperation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_operation: Option<AcquisitionOperation>,
    #[serde(rename = "itemId", default, skip_serializing_if = "Option::is_none")]
    pub item_id: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub operations: Vec<AcquisitionOperation>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<JObject>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientContribution {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub includes: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<JObject>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub targets: Vec<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientContributionNode {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub children: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub contribution: Option<ClientContribution>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub parents: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientContributionProviderDetails {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientDataProviderQuery {
    #[serde(flatten)]
    pub data_provider_query: DataProviderQuery,
    #[serde(
        rename = "queryServiceInstanceType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub query_service_instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Contribution {
    #[serde(flatten)]
    pub contribution_base: ContributionBase,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub constraints: Vec<ContributionConstraint>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub includes: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<JObject>,
    #[serde(
        rename = "restrictedTo",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub restricted_to: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub targets: Vec<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContributionBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "visibleTo", default, skip_serializing_if = "Vec::is_empty")]
    pub visible_to: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContributionConstraint {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inverse: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<JObject>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub relationships: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContributionNodeQuery {
    #[serde(
        rename = "contributionIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub contribution_ids: Vec<String>,
    #[serde(
        rename = "dataProviderContext",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub data_provider_context: Option<DataProviderContext>,
    #[serde(
        rename = "includeProviderDetails",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_provider_details: Option<bool>,
    #[serde(
        rename = "queryOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub query_options: Option<contribution_node_query::QueryOptions>,
}
pub mod contribution_node_query {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum QueryOptions {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "includeSelf")]
        IncludeSelf,
        #[serde(rename = "includeChildren")]
        IncludeChildren,
        #[serde(rename = "includeSubTree")]
        IncludeSubTree,
        #[serde(rename = "includeAll")]
        IncludeAll,
        #[serde(rename = "ignoreConstraints")]
        IgnoreConstraints,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContributionNodeQueryResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<serde_json::Value>,
    #[serde(
        rename = "providerDetails",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub provider_details: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContributionPropertyDescription {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<contribution_property_description::Type>,
}
pub mod contribution_property_description {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "string")]
        String,
        #[serde(rename = "uri")]
        Uri,
        #[serde(rename = "guid")]
        Guid,
        #[serde(rename = "boolean")]
        Boolean,
        #[serde(rename = "integer")]
        Integer,
        #[serde(rename = "double")]
        Double,
        #[serde(rename = "dateTime")]
        DateTime,
        #[serde(rename = "dictionary")]
        Dictionary,
        #[serde(rename = "array")]
        Array,
        #[serde(rename = "object")]
        Object,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContributionProviderDetails {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContributionType {
    #[serde(flatten)]
    pub contribution_base: ContributionBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub indexed: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataProviderContext {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataProviderExceptionDetails {
    #[serde(
        rename = "exceptionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub exception_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(
        rename = "stackTrace",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub stack_trace: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataProviderQuery {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub context: Option<DataProviderContext>,
    #[serde(
        rename = "contributionIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub contribution_ids: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataProviderResult {
    #[serde(
        rename = "clientProviders",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub client_providers: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exceptions: Option<serde_json::Value>,
    #[serde(
        rename = "resolvedProviders",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub resolved_providers: Vec<ResolvedDataProvider>,
    #[serde(rename = "scopeName", default, skip_serializing_if = "Option::is_none")]
    pub scope_name: Option<String>,
    #[serde(
        rename = "scopeValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub scope_value: Option<String>,
    #[serde(
        rename = "sharedData",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub shared_data: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataProviderSharedData {
    #[serde(flatten)]
    pub serde_json_value: serde_json::Value,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionAcquisitionRequest {
    #[serde(
        rename = "assignmentType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assignment_type: Option<extension_acquisition_request::AssignmentType>,
    #[serde(rename = "billingId", default, skip_serializing_if = "Option::is_none")]
    pub billing_id: Option<String>,
    #[serde(rename = "itemId", default, skip_serializing_if = "Option::is_none")]
    pub item_id: Option<String>,
    #[serde(
        rename = "operationType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub operation_type: Option<extension_acquisition_request::OperationType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<JObject>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub quantity: Option<i32>,
}
pub mod extension_acquisition_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AssignmentType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "me")]
        Me,
        #[serde(rename = "all")]
        All,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum OperationType {
        #[serde(rename = "get")]
        Get,
        #[serde(rename = "install")]
        Install,
        #[serde(rename = "buy")]
        Buy,
        #[serde(rename = "try")]
        Try,
        #[serde(rename = "request")]
        Request,
        #[serde(rename = "none")]
        None,
        #[serde(rename = "purchaseRequest")]
        PurchaseRequest,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionAuditLog {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub entries: Vec<ExtensionAuditLogEntry>,
    #[serde(
        rename = "extensionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub extension_name: Option<String>,
    #[serde(
        rename = "publisherName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionAuditLogEntry {
    #[serde(
        rename = "auditAction",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub audit_action: Option<String>,
    #[serde(rename = "auditDate", default, skip_serializing_if = "Option::is_none")]
    pub audit_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "updatedBy", default, skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<IdentityRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionAuthorization {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub scopes: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionBadge {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "imgUri", default, skip_serializing_if = "Option::is_none")]
    pub img_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub link: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionDataCollection {
    #[serde(
        rename = "collectionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub collection_name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub documents: Vec<JObject>,
    #[serde(rename = "scopeType", default, skip_serializing_if = "Option::is_none")]
    pub scope_type: Option<String>,
    #[serde(
        rename = "scopeValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub scope_value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionDataCollectionQuery {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub collections: Vec<ExtensionDataCollection>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionEvent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extension: Option<PublishedExtension>,
    #[serde(
        rename = "extensionVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub extension_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<ExtensionHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ExtensionEventUrls>,
    #[serde(
        rename = "modifiedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_by: Option<IdentityRef>,
    #[serde(
        rename = "updateType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub update_type: Option<extension_event::UpdateType>,
}
pub mod extension_event {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum UpdateType {
        #[serde(rename = "installed")]
        Installed,
        #[serde(rename = "uninstalled")]
        Uninstalled,
        #[serde(rename = "enabled")]
        Enabled,
        #[serde(rename = "disabled")]
        Disabled,
        #[serde(rename = "versionUpdated")]
        VersionUpdated,
        #[serde(rename = "actionRequired")]
        ActionRequired,
        #[serde(rename = "actionResolved")]
        ActionResolved,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionEventCallback {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionEventCallbackCollection {
    #[serde(
        rename = "postDisable",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub post_disable: Option<ExtensionEventCallback>,
    #[serde(
        rename = "postEnable",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub post_enable: Option<ExtensionEventCallback>,
    #[serde(
        rename = "postInstall",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub post_install: Option<ExtensionEventCallback>,
    #[serde(
        rename = "postUninstall",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub post_uninstall: Option<ExtensionEventCallback>,
    #[serde(
        rename = "postUpdate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub post_update: Option<ExtensionEventCallback>,
    #[serde(
        rename = "preInstall",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pre_install: Option<ExtensionEventCallback>,
    #[serde(
        rename = "versionCheck",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub version_check: Option<ExtensionEventCallback>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionEventUrls {
    #[serde(flatten)]
    pub extension_urls: ExtensionUrls,
    #[serde(
        rename = "manageExtensionsPage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub manage_extensions_page: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionFile {
    #[serde(rename = "assetType", default, skip_serializing_if = "Option::is_none")]
    pub asset_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionHost {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionIdentifier {
    #[serde(
        rename = "extensionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub extension_name: Option<String>,
    #[serde(
        rename = "publisherName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionLicensing {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub overrides: Vec<LicensingOverride>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionManifest {
    #[serde(rename = "baseUri", default, skip_serializing_if = "Option::is_none")]
    pub base_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub constraints: Vec<ContributionConstraint>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub contributions: Vec<Contribution>,
    #[serde(
        rename = "contributionTypes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub contribution_types: Vec<ContributionType>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub demands: Vec<String>,
    #[serde(
        rename = "eventCallbacks",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub event_callbacks: Option<ExtensionEventCallbackCollection>,
    #[serde(
        rename = "fallbackBaseUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub fallback_base_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub licensing: Option<ExtensionLicensing>,
    #[serde(
        rename = "manifestVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub manifest_version: Option<f64>,
    #[serde(
        rename = "restrictedTo",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub restricted_to: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub scopes: Vec<String>,
    #[serde(
        rename = "serviceInstanceType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub service_instance_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionPolicy {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub install: Option<extension_policy::Install>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<extension_policy::Request>,
}
pub mod extension_policy {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Install {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "private")]
        Private,
        #[serde(rename = "public")]
        Public,
        #[serde(rename = "preview")]
        Preview,
        #[serde(rename = "released")]
        Released,
        #[serde(rename = "firstParty")]
        FirstParty,
        #[serde(rename = "all")]
        All,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Request {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "private")]
        Private,
        #[serde(rename = "public")]
        Public,
        #[serde(rename = "preview")]
        Preview,
        #[serde(rename = "released")]
        Released,
        #[serde(rename = "firstParty")]
        FirstParty,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionRequest {
    #[serde(
        rename = "rejectMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reject_message: Option<String>,
    #[serde(
        rename = "requestDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_date: Option<String>,
    #[serde(
        rename = "requestedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_by: Option<IdentityRef>,
    #[serde(
        rename = "requestMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_message: Option<String>,
    #[serde(
        rename = "requestState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_state: Option<extension_request::RequestState>,
    #[serde(
        rename = "resolveDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resolve_date: Option<String>,
    #[serde(
        rename = "resolvedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resolved_by: Option<IdentityRef>,
}
pub mod extension_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum RequestState {
        #[serde(rename = "open")]
        Open,
        #[serde(rename = "accepted")]
        Accepted,
        #[serde(rename = "rejected")]
        Rejected,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionRequestEvent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extension: Option<PublishedExtension>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<ExtensionHost>,
    #[serde(rename = "hostName", default, skip_serializing_if = "Option::is_none")]
    pub host_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ExtensionRequestUrls>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request: Option<ExtensionRequest>,
    #[serde(
        rename = "updateType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub update_type: Option<extension_request_event::UpdateType>,
}
pub mod extension_request_event {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum UpdateType {
        #[serde(rename = "created")]
        Created,
        #[serde(rename = "approved")]
        Approved,
        #[serde(rename = "rejected")]
        Rejected,
        #[serde(rename = "deleted")]
        Deleted,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionRequestsEvent {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extension: Option<PublishedExtension>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<ExtensionHost>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ExtensionRequestUrls>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub requests: Vec<ExtensionRequest>,
    #[serde(
        rename = "updateType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub update_type: Option<extension_requests_event::UpdateType>,
}
pub mod extension_requests_event {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum UpdateType {
        #[serde(rename = "created")]
        Created,
        #[serde(rename = "approved")]
        Approved,
        #[serde(rename = "rejected")]
        Rejected,
        #[serde(rename = "deleted")]
        Deleted,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionRequestUrls {
    #[serde(flatten)]
    pub extension_urls: ExtensionUrls,
    #[serde(
        rename = "requestPage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_page: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionShare {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "isOrg", default, skip_serializing_if = "Option::is_none")]
    pub is_org: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionState {
    #[serde(flatten)]
    pub installed_extension_state: InstalledExtensionState,
    #[serde(
        rename = "extensionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub extension_name: Option<String>,
    #[serde(
        rename = "lastVersionCheck",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_version_check: Option<String>,
    #[serde(
        rename = "publisherName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionStatistic {
    #[serde(
        rename = "statisticName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub statistic_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionUrls {
    #[serde(
        rename = "extensionIcon",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub extension_icon: Option<String>,
    #[serde(
        rename = "extensionPage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub extension_page: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExtensionVersion {
    #[serde(rename = "assetUri", default, skip_serializing_if = "Option::is_none")]
    pub asset_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub badges: Vec<ExtensionBadge>,
    #[serde(
        rename = "fallbackAssetUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub fallback_asset_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub files: Vec<ExtensionFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<extension_version::Flags>,
    #[serde(
        rename = "lastUpdated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub properties: Vec<serde_json::Value>,
    #[serde(
        rename = "targetPlatform",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_platform: Option<String>,
    #[serde(
        rename = "validationResultMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub validation_result_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(
        rename = "versionDescription",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub version_description: Option<String>,
}
pub mod extension_version {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Flags {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "validated")]
        Validated,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectBase {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityRef {
    #[serde(flatten)]
    pub graph_subject_base: GraphSubjectBase,
    #[serde(
        rename = "directoryAlias",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub directory_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inactive: Option<bool>,
    #[serde(
        rename = "isAadIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_aad_identity: Option<bool>,
    #[serde(
        rename = "isContainer",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_container: Option<bool>,
    #[serde(
        rename = "isDeletedInOrigin",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_deleted_in_origin: Option<bool>,
    #[serde(
        rename = "profileUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub profile_url: Option<String>,
    #[serde(
        rename = "uniqueName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InstallationTarget {
    #[serde(
        rename = "productArchitecture",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub product_architecture: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    #[serde(
        rename = "targetVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InstalledExtension {
    #[serde(flatten)]
    pub extension_manifest: ExtensionManifest,
    #[serde(
        rename = "extensionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub extension_id: Option<String>,
    #[serde(
        rename = "extensionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub extension_name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub files: Vec<ExtensionFile>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<installed_extension::Flags>,
    #[serde(
        rename = "installState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub install_state: Option<InstalledExtensionState>,
    #[serde(
        rename = "lastPublished",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_published: Option<String>,
    #[serde(
        rename = "publisherId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_id: Option<String>,
    #[serde(
        rename = "publisherName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_name: Option<String>,
    #[serde(
        rename = "registrationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub registration_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
pub mod installed_extension {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Flags {
        #[serde(rename = "builtIn")]
        BuiltIn,
        #[serde(rename = "trusted")]
        Trusted,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InstalledExtensionQuery {
    #[serde(rename = "assetTypes", default, skip_serializing_if = "Vec::is_empty")]
    pub asset_types: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub monikers: Vec<ExtensionIdentifier>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InstalledExtensionState {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<installed_extension_state::Flags>,
    #[serde(
        rename = "installationIssues",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub installation_issues: Vec<InstalledExtensionStateIssue>,
    #[serde(
        rename = "lastUpdated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated: Option<String>,
}
pub mod installed_extension_state {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Flags {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "disabled")]
        Disabled,
        #[serde(rename = "builtIn")]
        BuiltIn,
        #[serde(rename = "multiVersion")]
        MultiVersion,
        #[serde(rename = "unInstalled")]
        UnInstalled,
        #[serde(rename = "versionCheckError")]
        VersionCheckError,
        #[serde(rename = "trusted")]
        Trusted,
        #[serde(rename = "error")]
        Error,
        #[serde(rename = "needsReauthorization")]
        NeedsReauthorization,
        #[serde(rename = "autoUpgradeError")]
        AutoUpgradeError,
        #[serde(rename = "warning")]
        Warning,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InstalledExtensionStateIssue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<installed_extension_state_issue::Type>,
}
pub mod installed_extension_state_issue {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "warning")]
        Warning,
        #[serde(rename = "error")]
        Error,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JObject {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub item: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LicensingOverride {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub behavior: Option<licensing_override::Behavior>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}
pub mod licensing_override {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Behavior {
        #[serde(rename = "onlyIfLicensed")]
        OnlyIfLicensed,
        #[serde(rename = "onlyIfUnlicensed")]
        OnlyIfUnlicensed,
        #[serde(rename = "alwaysInclude")]
        AlwaysInclude,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PublishedExtension {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub categories: Vec<String>,
    #[serde(
        rename = "deploymentType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deployment_type: Option<published_extension::DeploymentType>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(
        rename = "extensionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub extension_id: Option<String>,
    #[serde(
        rename = "extensionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub extension_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<published_extension::Flags>,
    #[serde(
        rename = "installationTargets",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub installation_targets: Vec<InstallationTarget>,
    #[serde(
        rename = "lastUpdated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated: Option<String>,
    #[serde(
        rename = "longDescription",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub long_description: Option<String>,
    #[serde(
        rename = "publishedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub published_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub publisher: Option<PublisherFacts>,
    #[serde(
        rename = "releaseDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_date: Option<String>,
    #[serde(rename = "sharedWith", default, skip_serializing_if = "Vec::is_empty")]
    pub shared_with: Vec<ExtensionShare>,
    #[serde(
        rename = "shortDescription",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub short_description: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub statistics: Vec<ExtensionStatistic>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub versions: Vec<ExtensionVersion>,
}
pub mod published_extension {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum DeploymentType {
        #[serde(rename = "exe")]
        Exe,
        #[serde(rename = "msi")]
        Msi,
        #[serde(rename = "vsix")]
        Vsix,
        #[serde(rename = "referralLink")]
        ReferralLink,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Flags {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "disabled")]
        Disabled,
        #[serde(rename = "builtIn")]
        BuiltIn,
        #[serde(rename = "validated")]
        Validated,
        #[serde(rename = "trusted")]
        Trusted,
        #[serde(rename = "paid")]
        Paid,
        #[serde(rename = "public")]
        Public,
        #[serde(rename = "multiVersion")]
        MultiVersion,
        #[serde(rename = "system")]
        System,
        #[serde(rename = "preview")]
        Preview,
        #[serde(rename = "unpublished")]
        Unpublished,
        #[serde(rename = "trial")]
        Trial,
        #[serde(rename = "locked")]
        Locked,
        #[serde(rename = "hidden")]
        Hidden,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PublisherFacts {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flags: Option<publisher_facts::Flags>,
    #[serde(
        rename = "isDomainVerified",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_domain_verified: Option<bool>,
    #[serde(
        rename = "publisherId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_id: Option<String>,
    #[serde(
        rename = "publisherName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_name: Option<String>,
}
pub mod publisher_facts {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Flags {
        #[serde(rename = "unChanged")]
        UnChanged,
        #[serde(rename = "none")]
        None,
        #[serde(rename = "disabled")]
        Disabled,
        #[serde(rename = "verified")]
        Verified,
        #[serde(rename = "certified")]
        Certified,
        #[serde(rename = "serviceFlags")]
        ServiceFlags,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RequestedExtension {
    #[serde(
        rename = "extensionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub extension_name: Option<String>,
    #[serde(
        rename = "extensionRequests",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub extension_requests: Vec<ExtensionRequest>,
    #[serde(
        rename = "publisherDisplayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_display_name: Option<String>,
    #[serde(
        rename = "publisherName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher_name: Option<String>,
    #[serde(
        rename = "requestCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResolvedDataProvider {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<f32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Scope {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SupportedExtension {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub extension: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserExtensionPolicy {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<ExtensionPolicy>,
    #[serde(rename = "userId", default, skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InstalledExtensionList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<InstalledExtension>,
}
