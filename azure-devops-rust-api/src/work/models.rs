#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Activity {
    #[serde(
        rename = "capacityPerDay",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub capacity_per_day: Option<f32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Attribute {
    #[serde(flatten)]
    pub serde_json_value: serde_json::Value,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BacklogColumn {
    #[serde(
        rename = "columnFieldReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub column_field_reference: Option<WorkItemFieldReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub width: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BacklogConfiguration {
    #[serde(
        rename = "backlogFields",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub backlog_fields: Option<BacklogFields>,
    #[serde(
        rename = "bugsBehavior",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub bugs_behavior: Option<backlog_configuration::BugsBehavior>,
    #[serde(
        rename = "hiddenBacklogs",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub hidden_backlogs: Vec<String>,
    #[serde(
        rename = "isBugsBehaviorConfigured",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_bugs_behavior_configured: Option<bool>,
    #[serde(
        rename = "portfolioBacklogs",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub portfolio_backlogs: Vec<BacklogLevelConfiguration>,
    #[serde(
        rename = "requirementBacklog",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requirement_backlog: Option<BacklogLevelConfiguration>,
    #[serde(
        rename = "taskBacklog",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub task_backlog: Option<BacklogLevelConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(
        rename = "workItemTypeMappedStates",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub work_item_type_mapped_states: Vec<WorkItemTypeStateInfo>,
}
pub mod backlog_configuration {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum BugsBehavior {
        #[serde(rename = "off")]
        Off,
        #[serde(rename = "asRequirements")]
        AsRequirements,
        #[serde(rename = "asTasks")]
        AsTasks,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BacklogFields {
    #[serde(
        rename = "typeFields",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub type_fields: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BacklogLevel {
    #[serde(
        rename = "categoryReferenceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub category_reference_name: Option<String>,
    #[serde(
        rename = "pluralName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub plural_name: Option<String>,
    #[serde(
        rename = "workItemStates",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub work_item_states: Vec<String>,
    #[serde(
        rename = "workItemTypes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub work_item_types: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BacklogLevelConfiguration {
    #[serde(
        rename = "addPanelFields",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub add_panel_fields: Vec<WorkItemFieldReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(
        rename = "columnFields",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub column_fields: Vec<BacklogColumn>,
    #[serde(
        rename = "defaultWorkItemType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_work_item_type: Option<WorkItemTypeReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "isHidden", default, skip_serializing_if = "Option::is_none")]
    pub is_hidden: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rank: Option<i32>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<backlog_level_configuration::Type>,
    #[serde(
        rename = "workItemCountLimit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_count_limit: Option<i32>,
    #[serde(
        rename = "workItemTypes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub work_item_types: Vec<WorkItemTypeReference>,
}
pub mod backlog_level_configuration {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "portfolio")]
        Portfolio,
        #[serde(rename = "requirement")]
        Requirement,
        #[serde(rename = "task")]
        Task,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BacklogLevelWorkItems {
    #[serde(rename = "workItems", default, skip_serializing_if = "Vec::is_empty")]
    pub work_items: Vec<WorkItemLink>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Board {
    #[serde(flatten)]
    pub board_reference: BoardReference,
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(
        rename = "allowedMappings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub allowed_mappings: Option<serde_json::Value>,
    #[serde(rename = "canEdit", default, skip_serializing_if = "Option::is_none")]
    pub can_edit: Option<bool>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub columns: Vec<BoardColumn>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<BoardFields>,
    #[serde(rename = "isValid", default, skip_serializing_if = "Option::is_none")]
    pub is_valid: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub rows: Vec<BoardRow>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardBadge {
    #[serde(rename = "boardId", default, skip_serializing_if = "Option::is_none")]
    pub board_id: Option<String>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardCardRuleSettings {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rules: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardCardSettings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cards: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardChart {
    #[serde(flatten)]
    pub board_chart_reference: BoardChartReference,
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardChartReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardColumn {
    #[serde(
        rename = "columnType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub column_type: Option<board_column::ColumnType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "isSplit", default, skip_serializing_if = "Option::is_none")]
    pub is_split: Option<bool>,
    #[serde(rename = "itemLimit", default, skip_serializing_if = "Option::is_none")]
    pub item_limit: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "stateMappings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub state_mappings: Option<serde_json::Value>,
}
pub mod board_column {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ColumnType {
        #[serde(rename = "incoming")]
        Incoming,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "outgoing")]
        Outgoing,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardFields {
    #[serde(
        rename = "columnField",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub column_field: Option<FieldReference>,
    #[serde(rename = "doneField", default, skip_serializing_if = "Option::is_none")]
    pub done_field: Option<FieldReference>,
    #[serde(rename = "rowField", default, skip_serializing_if = "Option::is_none")]
    pub row_field: Option<FieldReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardRow {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardSuggestedValue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardUserSettings {
    #[serde(
        rename = "autoRefreshState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub auto_refresh_state: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CapacityContractBase {
    #[serde(flatten)]
    pub team_settings_data_contract_base: TeamSettingsDataContractBase,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub activities: Vec<Activity>,
    #[serde(rename = "daysOff", default, skip_serializing_if = "Vec::is_empty")]
    pub days_off: Vec<DateRange>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CapacityPatch {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub activities: Vec<Activity>,
    #[serde(rename = "daysOff", default, skip_serializing_if = "Vec::is_empty")]
    pub days_off: Vec<DateRange>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CardFieldSettings {
    #[serde(
        rename = "additionalFields",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub additional_fields: Vec<FieldInfo>,
    #[serde(
        rename = "assignedToDisplayFormat",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_to_display_format: Option<card_field_settings::AssignedToDisplayFormat>,
    #[serde(rename = "coreFields", default, skip_serializing_if = "Vec::is_empty")]
    pub core_fields: Vec<FieldInfo>,
    #[serde(
        rename = "showAssignedTo",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub show_assigned_to: Option<bool>,
    #[serde(
        rename = "showChildRollup",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub show_child_rollup: Option<bool>,
    #[serde(
        rename = "showEmptyFields",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub show_empty_fields: Option<bool>,
    #[serde(rename = "showId", default, skip_serializing_if = "Option::is_none")]
    pub show_id: Option<bool>,
    #[serde(
        rename = "showParent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub show_parent: Option<bool>,
    #[serde(rename = "showState", default, skip_serializing_if = "Option::is_none")]
    pub show_state: Option<bool>,
    #[serde(rename = "showTags", default, skip_serializing_if = "Option::is_none")]
    pub show_tags: Option<bool>,
}
pub mod card_field_settings {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AssignedToDisplayFormat {
        #[serde(rename = "avatarOnly")]
        AvatarOnly,
        #[serde(rename = "fullName")]
        FullName,
        #[serde(rename = "avatarAndFullName")]
        AvatarAndFullName,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CardSettings {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<CardFieldSettings>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CategoryConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "referenceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reference_name: Option<String>,
    #[serde(
        rename = "workItemTypes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub work_item_types: Vec<WorkItemTypeReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreatePlan {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<create_plan::Type>,
}
pub mod create_plan {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "deliveryTimelineView")]
        DeliveryTimelineView,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DateRange {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeliveryViewData {
    #[serde(flatten)]
    pub plan_view_data: PlanViewData,
    #[serde(
        rename = "childIdToParentIdMap",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub child_id_to_parent_id_map: Option<serde_json::Value>,
    #[serde(
        rename = "criteriaStatus",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub criteria_status: Option<TimelineCriteriaStatus>,
    #[serde(rename = "endDate", default, skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(
        rename = "maxExpandedTeams",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_expanded_teams: Option<i32>,
    #[serde(
        rename = "parentItemMaps",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub parent_item_maps: Vec<ParentChildWiMap>,
    #[serde(rename = "startDate", default, skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub teams: Vec<TimelineTeamData>,
    #[serde(
        rename = "workItemDependencies",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub work_item_dependencies: Vec<i32>,
    #[serde(
        rename = "workItemViolations",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub work_item_violations: Vec<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeliveryViewPropertyCollection {
    #[serde(
        rename = "cardSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub card_settings: Option<CardSettings>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub criteria: Vec<FilterClause>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub markers: Vec<Marker>,
    #[serde(
        rename = "styleSettings",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub style_settings: Vec<Rule>,
    #[serde(
        rename = "tagStyleSettings",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub tag_style_settings: Vec<Rule>,
    #[serde(
        rename = "teamBacklogMappings",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub team_backlog_mappings: Vec<TeamBacklogMapping>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FieldInfo {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(rename = "fieldType", default, skip_serializing_if = "Option::is_none")]
    pub field_type: Option<field_info::FieldType>,
    #[serde(
        rename = "isIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_identity: Option<bool>,
    #[serde(
        rename = "referenceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reference_name: Option<String>,
}
pub mod field_info {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FieldType {
        #[serde(rename = "string")]
        String,
        #[serde(rename = "plainText")]
        PlainText,
        #[serde(rename = "integer")]
        Integer,
        #[serde(rename = "dateTime")]
        DateTime,
        #[serde(rename = "treePath")]
        TreePath,
        #[serde(rename = "boolean")]
        Boolean,
        #[serde(rename = "double")]
        Double,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FieldReference {
    #[serde(
        rename = "referenceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reference_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FieldSetting {
    #[serde(flatten)]
    pub serde_json_value: serde_json::Value,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FilterClause {
    #[serde(rename = "fieldName", default, skip_serializing_if = "Option::is_none")]
    pub field_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index: Option<i32>,
    #[serde(
        rename = "logicalOperator",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub logical_operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FilterGroup {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub level: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectBase {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityRef {
    #[serde(flatten)]
    pub graph_subject_base: GraphSubjectBase,
    #[serde(
        rename = "directoryAlias",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub directory_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inactive: Option<bool>,
    #[serde(
        rename = "isAadIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_aad_identity: Option<bool>,
    #[serde(
        rename = "isContainer",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_container: Option<bool>,
    #[serde(
        rename = "isDeletedInOrigin",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_deleted_in_origin: Option<bool>,
    #[serde(
        rename = "profileUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub profile_url: Option<String>,
    #[serde(
        rename = "uniqueName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ITaskboardColumnMapping {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(
        rename = "workItemType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IterationCapacity {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub teams: Vec<TeamCapacityTotals>,
    #[serde(
        rename = "totalIterationCapacityPerDay",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_iteration_capacity_per_day: Option<f64>,
    #[serde(
        rename = "totalIterationDaysOff",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_iteration_days_off: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IterationWorkItems {
    #[serde(flatten)]
    pub team_settings_data_contract_base: TeamSettingsDataContractBase,
    #[serde(
        rename = "workItemRelations",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub work_item_relations: Vec<WorkItemLink>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Link {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rel: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Marker {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Member {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(
        rename = "uniqueName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ParentChildWiMap {
    #[serde(
        rename = "childWorkItemIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub child_work_item_ids: Vec<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(
        rename = "workItemTypeName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_type_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Plan {
    #[serde(
        rename = "createdByIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_by_identity: Option<IdentityRef>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "modifiedByIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_by_identity: Option<IdentityRef>,
    #[serde(
        rename = "modifiedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<plan::Type>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(
        rename = "userPermissions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub user_permissions: Option<plan::UserPermissions>,
}
pub mod plan {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "deliveryTimelineView")]
        DeliveryTimelineView,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum UserPermissions {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "view")]
        View,
        #[serde(rename = "edit")]
        Edit,
        #[serde(rename = "delete")]
        Delete,
        #[serde(rename = "manage")]
        Manage,
        #[serde(rename = "allPermissions")]
        AllPermissions,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlanMetadata {
    #[serde(
        rename = "createdByIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_by_identity: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(
        rename = "modifiedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_date: Option<String>,
    #[serde(
        rename = "userPermissions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub user_permissions: Option<plan_metadata::UserPermissions>,
}
pub mod plan_metadata {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum UserPermissions {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "view")]
        View,
        #[serde(rename = "edit")]
        Edit,
        #[serde(rename = "delete")]
        Delete,
        #[serde(rename = "manage")]
        Manage,
        #[serde(rename = "allPermissions")]
        AllPermissions,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlanViewData {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PredefinedQuery {
    #[serde(rename = "hasMore", default, skip_serializing_if = "Option::is_none")]
    pub has_more: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<WorkItem>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "webUrl", default, skip_serializing_if = "Option::is_none")]
    pub web_url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProcessConfiguration {
    #[serde(
        rename = "bugWorkItems",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub bug_work_items: Option<CategoryConfiguration>,
    #[serde(
        rename = "portfolioBacklogs",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub portfolio_backlogs: Vec<CategoryConfiguration>,
    #[serde(
        rename = "requirementBacklog",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requirement_backlog: Option<CategoryConfiguration>,
    #[serde(
        rename = "taskBacklog",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub task_backlog: Option<CategoryConfiguration>,
    #[serde(
        rename = "typeFields",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub type_fields: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReorderOperation {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub ids: Vec<i32>,
    #[serde(
        rename = "iterationPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub iteration_path: Option<String>,
    #[serde(rename = "nextId", default, skip_serializing_if = "Option::is_none")]
    pub next_id: Option<i32>,
    #[serde(rename = "parentId", default, skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<i32>,
    #[serde(
        rename = "previousId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub previous_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReorderResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<f64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Rule {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub clauses: Vec<FilterClause>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    #[serde(rename = "isEnabled", default, skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<Attribute>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskboardColumn {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub mappings: Vec<ITaskboardColumnMapping>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskboardColumnMapping {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(
        rename = "workItemType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskboardColumns {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub columns: Vec<TaskboardColumn>,
    #[serde(
        rename = "isCustomized",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_customized: Option<bool>,
    #[serde(rename = "isValid", default, skip_serializing_if = "Option::is_none")]
    pub is_valid: Option<bool>,
    #[serde(
        rename = "validationMesssage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub validation_messsage: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskboardWorkItemColumn {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub column: Option<String>,
    #[serde(rename = "columnId", default, skip_serializing_if = "Option::is_none")]
    pub column_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(
        rename = "workItemId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamBacklogMapping {
    #[serde(
        rename = "categoryReferenceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub category_reference_name: Option<String>,
    #[serde(rename = "teamId", default, skip_serializing_if = "Option::is_none")]
    pub team_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamCapacity {
    #[serde(rename = "teamMembers", default, skip_serializing_if = "Vec::is_empty")]
    pub team_members: Vec<TeamMemberCapacityIdentityRef>,
    #[serde(
        rename = "totalCapacityPerDay",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_capacity_per_day: Option<f64>,
    #[serde(
        rename = "totalDaysOff",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_days_off: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamCapacityTotals {
    #[serde(
        rename = "teamCapacityPerDay",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_capacity_per_day: Option<f64>,
    #[serde(rename = "teamId", default, skip_serializing_if = "Option::is_none")]
    pub team_id: Option<String>,
    #[serde(
        rename = "teamTotalDaysOff",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_total_days_off: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamContext {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub team: Option<String>,
    #[serde(rename = "teamId", default, skip_serializing_if = "Option::is_none")]
    pub team_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamFieldValue {
    #[serde(
        rename = "includeChildren",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_children: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamFieldValues {
    #[serde(flatten)]
    pub team_settings_data_contract_base: TeamSettingsDataContractBase,
    #[serde(
        rename = "defaultValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub field: Option<FieldReference>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub values: Vec<TeamFieldValue>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamFieldValuesPatch {
    #[serde(
        rename = "defaultValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_value: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub values: Vec<TeamFieldValue>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamIterationAttributes {
    #[serde(
        rename = "finishDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub finish_date: Option<String>,
    #[serde(rename = "startDate", default, skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "timeFrame", default, skip_serializing_if = "Option::is_none")]
    pub time_frame: Option<team_iteration_attributes::TimeFrame>,
}
pub mod team_iteration_attributes {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TimeFrame {
        #[serde(rename = "past")]
        Past,
        #[serde(rename = "current")]
        Current,
        #[serde(rename = "future")]
        Future,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamMemberCapacity {
    #[serde(flatten)]
    pub capacity_contract_base: CapacityContractBase,
    #[serde(
        rename = "teamMember",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_member: Option<Member>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamMemberCapacityIdentityRef {
    #[serde(flatten)]
    pub capacity_contract_base: CapacityContractBase,
    #[serde(
        rename = "teamMember",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_member: Option<IdentityRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamSetting {
    #[serde(flatten)]
    pub team_settings_data_contract_base: TeamSettingsDataContractBase,
    #[serde(
        rename = "backlogIteration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub backlog_iteration: Option<TeamSettingsIteration>,
    #[serde(
        rename = "backlogVisibilities",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub backlog_visibilities: Option<serde_json::Value>,
    #[serde(
        rename = "bugsBehavior",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub bugs_behavior: Option<team_setting::BugsBehavior>,
    #[serde(
        rename = "defaultIteration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_iteration: Option<TeamSettingsIteration>,
    #[serde(
        rename = "defaultIterationMacro",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_iteration_macro: Option<String>,
    #[serde(rename = "workingDays", default, skip_serializing_if = "Vec::is_empty")]
    pub working_days: Vec<serde_json::Value>,
}
pub mod team_setting {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum BugsBehavior {
        #[serde(rename = "off")]
        Off,
        #[serde(rename = "asRequirements")]
        AsRequirements,
        #[serde(rename = "asTasks")]
        AsTasks,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamSettingsDataContractBase {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamSettingsDaysOff {
    #[serde(flatten)]
    pub team_settings_data_contract_base: TeamSettingsDataContractBase,
    #[serde(rename = "daysOff", default, skip_serializing_if = "Vec::is_empty")]
    pub days_off: Vec<DateRange>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamSettingsDaysOffPatch {
    #[serde(rename = "daysOff", default, skip_serializing_if = "Vec::is_empty")]
    pub days_off: Vec<DateRange>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamSettingsIteration {
    #[serde(flatten)]
    pub team_settings_data_contract_base: TeamSettingsDataContractBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attributes: Option<TeamIterationAttributes>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamSettingsPatch {
    #[serde(
        rename = "backlogIteration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub backlog_iteration: Option<String>,
    #[serde(
        rename = "backlogVisibilities",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub backlog_visibilities: Option<serde_json::Value>,
    #[serde(
        rename = "bugsBehavior",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub bugs_behavior: Option<team_settings_patch::BugsBehavior>,
    #[serde(
        rename = "defaultIteration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_iteration: Option<String>,
    #[serde(
        rename = "defaultIterationMacro",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_iteration_macro: Option<String>,
    #[serde(rename = "workingDays", default, skip_serializing_if = "Vec::is_empty")]
    pub working_days: Vec<serde_json::Value>,
}
pub mod team_settings_patch {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum BugsBehavior {
        #[serde(rename = "off")]
        Off,
        #[serde(rename = "asRequirements")]
        AsRequirements,
        #[serde(rename = "asTasks")]
        AsTasks,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimelineCriteriaStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<timeline_criteria_status::Type>,
}
pub mod timeline_criteria_status {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "ok")]
        Ok,
        #[serde(rename = "invalidFilterClause")]
        InvalidFilterClause,
        #[serde(rename = "unknown")]
        Unknown,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimelineIterationStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<timeline_iteration_status::Type>,
}
pub mod timeline_iteration_status {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "ok")]
        Ok,
        #[serde(rename = "isOverlapping")]
        IsOverlapping,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimelineTeamData {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backlog: Option<BacklogLevel>,
    #[serde(
        rename = "fieldReferenceNames",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub field_reference_names: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "isExpanded",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_expanded: Option<bool>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub iterations: Vec<TimelineTeamIteration>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "orderByField",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub order_by_field: Option<String>,
    #[serde(
        rename = "partiallyPagedFieldReferenceNames",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub partially_paged_field_reference_names: Vec<String>,
    #[serde(
        rename = "partiallyPagedWorkItems",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub partially_paged_work_items: Vec<Vec<serde_json::Value>>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(
        rename = "rollupWorkItemTypes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub rollup_work_item_types: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<TimelineTeamStatus>,
    #[serde(
        rename = "teamFieldDefaultValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_field_default_value: Option<String>,
    #[serde(
        rename = "teamFieldName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_field_name: Option<String>,
    #[serde(
        rename = "teamFieldValues",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub team_field_values: Vec<TeamFieldValue>,
    #[serde(rename = "workItems", default, skip_serializing_if = "Vec::is_empty")]
    pub work_items: Vec<Vec<serde_json::Value>>,
    #[serde(
        rename = "workItemTypeColors",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub work_item_type_colors: Vec<WorkItemColor>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimelineTeamIteration {
    #[serde(rename = "cssNodeId", default, skip_serializing_if = "Option::is_none")]
    pub css_node_id: Option<String>,
    #[serde(
        rename = "finishDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub finish_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "partiallyPagedWorkItems",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub partially_paged_work_items: Vec<Vec<serde_json::Value>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(rename = "startDate", default, skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<TimelineIterationStatus>,
    #[serde(rename = "workItems", default, skip_serializing_if = "Vec::is_empty")]
    pub work_items: Vec<Vec<serde_json::Value>>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimelineTeamStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<timeline_team_status::Type>,
}
pub mod timeline_team_status {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "ok")]
        Ok,
        #[serde(rename = "doesntExistOrAccessDenied")]
        DoesntExistOrAccessDenied,
        #[serde(rename = "maxTeamsExceeded")]
        MaxTeamsExceeded,
        #[serde(rename = "maxTeamFieldsExceeded")]
        MaxTeamFieldsExceeded,
        #[serde(rename = "backlogInError")]
        BacklogInError,
        #[serde(rename = "missingTeamFieldValue")]
        MissingTeamFieldValue,
        #[serde(rename = "noIterationsExist")]
        NoIterationsExist,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdatePlan {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<update_plan::Type>,
}
pub mod update_plan {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "deliveryTimelineView")]
        DeliveryTimelineView,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateTaskboardColumn {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub mappings: Vec<TaskboardColumnMapping>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateTaskboardWorkItemColumn {
    #[serde(rename = "newColumn", default, skip_serializing_if = "Option::is_none")]
    pub new_column: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItem {
    #[serde(flatten)]
    pub work_item_tracking_resource: WorkItemTrackingResource,
    #[serde(
        rename = "commentVersionRef",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub comment_version_ref: Option<WorkItemCommentVersionRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub relations: Vec<WorkItemRelation>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rev: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemColor {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    #[serde(
        rename = "primaryColor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub primary_color: Option<String>,
    #[serde(
        rename = "workItemTypeName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_type_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemCommentVersionRef {
    #[serde(flatten)]
    pub work_item_tracking_resource_reference: WorkItemTrackingResourceReference,
    #[serde(rename = "commentId", default, skip_serializing_if = "Option::is_none")]
    pub comment_id: Option<i32>,
    #[serde(
        rename = "createdInRevision",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_in_revision: Option<i32>,
    #[serde(rename = "isDeleted", default, skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemFieldReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "referenceName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reference_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemLink {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rel: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<WorkItemReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<WorkItemReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemRelation {
    #[serde(flatten)]
    pub link: Link,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTrackingResource {
    #[serde(flatten)]
    pub work_item_tracking_resource_reference: WorkItemTrackingResourceReference,
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTrackingResourceReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTypeReference {
    #[serde(flatten)]
    pub work_item_tracking_resource_reference: WorkItemTrackingResourceReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemTypeStateInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub states: Option<serde_json::Value>,
    #[serde(
        rename = "workItemTypeName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_type_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BacklogLevelConfigurationList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BacklogLevelConfiguration>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardChartReferenceList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BoardChartReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardColumnList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BoardColumn>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardReferenceList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BoardReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardRowList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BoardRow>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BoardSuggestedValueList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BoardSuggestedValue>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ParentChildWiMapList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ParentChildWiMap>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlanList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<Plan>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReorderResultList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<ReorderResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskboardWorkItemColumnList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TaskboardWorkItemColumn>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamMemberCapacityIdentityRefList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TeamMemberCapacityIdentityRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamSettingsIterationList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TeamSettingsIteration>,
}
