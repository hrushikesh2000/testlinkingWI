#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildDefinitionReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloneOperationCommonResponse {
    #[serde(
        rename = "cloneStatistics",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub clone_statistics: Option<CloneStatistics>,
    #[serde(
        rename = "completionDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completion_date: Option<String>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "opId", default, skip_serializing_if = "Option::is_none")]
    pub op_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<clone_operation_common_response::State>,
}
pub mod clone_operation_common_response {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "succeeded")]
        Succeeded,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloneOptions {
    #[serde(
        rename = "cloneRequirements",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub clone_requirements: Option<bool>,
    #[serde(
        rename = "copyAllSuites",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub copy_all_suites: Option<bool>,
    #[serde(
        rename = "copyAncestorHierarchy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub copy_ancestor_hierarchy: Option<bool>,
    #[serde(
        rename = "destinationWorkItemType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_work_item_type: Option<String>,
    #[serde(
        rename = "overrideParameters",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub override_parameters: Option<serde_json::Value>,
    #[serde(
        rename = "relatedLinkComment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub related_link_comment: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloneStatistics {
    #[serde(
        rename = "clonedRequirementsCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub cloned_requirements_count: Option<i32>,
    #[serde(
        rename = "clonedSharedStepsCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub cloned_shared_steps_count: Option<i32>,
    #[serde(
        rename = "clonedTestCasesCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub cloned_test_cases_count: Option<i32>,
    #[serde(
        rename = "totalRequirementsCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_requirements_count: Option<i32>,
    #[serde(
        rename = "totalTestCasesCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_test_cases_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloneTestCaseOperationInformation {
    #[serde(
        rename = "cloneOperationResponse",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub clone_operation_response: Option<CloneOperationCommonResponse>,
    #[serde(
        rename = "cloneOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub clone_options: Option<CloneTestCaseOptions>,
    #[serde(
        rename = "destinationTestSuite",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_test_suite: Option<TestSuiteReferenceWithProject>,
    #[serde(
        rename = "sourceTestSuite",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_test_suite: Option<SourceTestSuiteResponse>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloneTestCaseOptions {
    #[serde(
        rename = "includeAttachments",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_attachments: Option<bool>,
    #[serde(
        rename = "includeLinks",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_links: Option<bool>,
    #[serde(
        rename = "relatedLinkComment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub related_link_comment: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloneTestCaseParams {
    #[serde(
        rename = "cloneOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub clone_options: Option<CloneTestCaseOptions>,
    #[serde(
        rename = "destinationTestPlan",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_test_plan: Option<TestPlanReference>,
    #[serde(
        rename = "destinationTestSuite",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_test_suite: Option<DestinationTestSuiteInfo>,
    #[serde(
        rename = "sourceTestPlan",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_test_plan: Option<TestPlanReference>,
    #[serde(
        rename = "sourceTestSuite",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_test_suite: Option<SourceTestSuiteInfo>,
    #[serde(rename = "testCaseIds", default, skip_serializing_if = "Vec::is_empty")]
    pub test_case_ids: Vec<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloneTestPlanOperationInformation {
    #[serde(
        rename = "cloneOperationResponse",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub clone_operation_response: Option<CloneOperationCommonResponse>,
    #[serde(
        rename = "cloneOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub clone_options: Option<CloneOptions>,
    #[serde(
        rename = "destinationTestPlan",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_test_plan: Option<TestPlan>,
    #[serde(
        rename = "sourceTestPlan",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_test_plan: Option<SourceTestplanResponse>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloneTestPlanParams {
    #[serde(
        rename = "cloneOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub clone_options: Option<CloneOptions>,
    #[serde(
        rename = "destinationTestPlan",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_test_plan: Option<DestinationTestPlanCloneParams>,
    #[serde(
        rename = "sourceTestPlan",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_test_plan: Option<SourceTestPlanInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloneTestSuiteOperationInformation {
    #[serde(
        rename = "clonedTestSuite",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub cloned_test_suite: Option<TestSuiteReferenceWithProject>,
    #[serde(
        rename = "cloneOperationResponse",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub clone_operation_response: Option<CloneOperationCommonResponse>,
    #[serde(
        rename = "cloneOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub clone_options: Option<CloneOptions>,
    #[serde(
        rename = "destinationTestSuite",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_test_suite: Option<TestSuiteReferenceWithProject>,
    #[serde(
        rename = "sourceTestSuite",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_test_suite: Option<TestSuiteReferenceWithProject>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloneTestSuiteParams {
    #[serde(
        rename = "cloneOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub clone_options: Option<CloneOptions>,
    #[serde(
        rename = "destinationTestSuite",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_test_suite: Option<DestinationTestSuiteInfo>,
    #[serde(
        rename = "sourceTestSuite",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_test_suite: Option<SourceTestSuiteInfo>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Configuration {
    #[serde(
        rename = "configurationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub configuration_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DestinationTestPlanCloneParams {
    #[serde(flatten)]
    pub test_plan_create_params: TestPlanCreateParams,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DestinationTestSuiteInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectBase {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityRef {
    #[serde(flatten)]
    pub graph_subject_base: GraphSubjectBase,
    #[serde(
        rename = "directoryAlias",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub directory_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inactive: Option<bool>,
    #[serde(
        rename = "isAadIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_aad_identity: Option<bool>,
    #[serde(
        rename = "isContainer",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_container: Option<bool>,
    #[serde(
        rename = "isDeletedInOrigin",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_deleted_in_origin: Option<bool>,
    #[serde(
        rename = "profileUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub profile_url: Option<String>,
    #[serde(
        rename = "uniqueName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LastResultDetails {
    #[serde(
        rename = "dateCompleted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_completed: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<i64>,
    #[serde(rename = "runBy", default, skip_serializing_if = "Option::is_none")]
    pub run_by: Option<IdentityRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LibraryWorkItemsData {
    #[serde(
        rename = "columnOptions",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub column_options: Vec<String>,
    #[serde(
        rename = "continuationToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continuation_token: Option<String>,
    #[serde(
        rename = "exceededWorkItemQueryLimit",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub exceeded_work_item_query_limit: Option<bool>,
    #[serde(
        rename = "hasMoreElements",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub has_more_elements: Option<bool>,
    #[serde(
        rename = "returnCode",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub return_code: Option<library_work_items_data::ReturnCode>,
    #[serde(rename = "workItemIds", default, skip_serializing_if = "Vec::is_empty")]
    pub work_item_ids: Vec<i32>,
    #[serde(rename = "workItems", default, skip_serializing_if = "Vec::is_empty")]
    pub work_items: Vec<WorkItemDetails>,
}
pub mod library_work_items_data {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ReturnCode {
        #[serde(rename = "success")]
        Success,
        #[serde(rename = "error")]
        Error,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LibraryWorkItemsDataProviderRequest {
    #[serde(
        rename = "columnOptions",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub column_options: Vec<String>,
    #[serde(
        rename = "continuationToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continuation_token: Option<String>,
    #[serde(
        rename = "filterValues",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub filter_values: Vec<TestPlansLibraryWorkItemFilter>,
    #[serde(
        rename = "isAscending",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_ascending: Option<bool>,
    #[serde(
        rename = "libraryQueryType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub library_query_type: Option<library_work_items_data_provider_request::LibraryQueryType>,
    #[serde(
        rename = "orderByField",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub order_by_field: Option<String>,
    #[serde(rename = "workItemIds", default, skip_serializing_if = "Vec::is_empty")]
    pub work_item_ids: Vec<i32>,
}
pub mod library_work_items_data_provider_request {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LibraryQueryType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "allTestCases")]
        AllTestCases,
        #[serde(rename = "testCasesWithActiveBugs")]
        TestCasesWithActiveBugs,
        #[serde(rename = "testCasesNotLinkedToRequirements")]
        TestCasesNotLinkedToRequirements,
        #[serde(rename = "testCasesLinkedToRequirements")]
        TestCasesLinkedToRequirements,
        #[serde(rename = "allSharedSteps")]
        AllSharedSteps,
        #[serde(rename = "sharedStepsNotLinkedToRequirement")]
        SharedStepsNotLinkedToRequirement,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NameValuePair {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PointAssignment {
    #[serde(flatten)]
    pub configuration: Configuration,
    #[serde(
        rename = "configurationName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub configuration_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tester: Option<IdentityRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseEnvironmentDefinitionReference {
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<i32>,
    #[serde(
        rename = "environmentDefinitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_definition_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Results {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<results::Outcome>,
}
pub mod results {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Outcome {
        #[serde(rename = "unspecified")]
        Unspecified,
        #[serde(rename = "none")]
        None,
        #[serde(rename = "passed")]
        Passed,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "inconclusive")]
        Inconclusive,
        #[serde(rename = "timeout")]
        Timeout,
        #[serde(rename = "aborted")]
        Aborted,
        #[serde(rename = "blocked")]
        Blocked,
        #[serde(rename = "notExecuted")]
        NotExecuted,
        #[serde(rename = "warning")]
        Warning,
        #[serde(rename = "error")]
        Error,
        #[serde(rename = "notApplicable")]
        NotApplicable,
        #[serde(rename = "paused")]
        Paused,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "notImpacted")]
        NotImpacted,
        #[serde(rename = "maxValue")]
        MaxValue,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceTestPlanInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "suiteIds", default, skip_serializing_if = "Vec::is_empty")]
    pub suite_ids: Vec<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceTestplanResponse {
    #[serde(flatten)]
    pub test_plan_reference: TestPlanReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
    #[serde(rename = "suiteIds", default, skip_serializing_if = "Vec::is_empty")]
    pub suite_ids: Vec<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceTestSuiteInfo {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceTestSuiteResponse {
    #[serde(flatten)]
    pub test_suite_reference: TestSuiteReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
    #[serde(rename = "testCaseIds", default, skip_serializing_if = "Vec::is_empty")]
    pub test_case_ids: Vec<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SuiteEntry {
    #[serde(flatten)]
    pub suite_entry_update_params: SuiteEntryUpdateParams,
    #[serde(rename = "suiteId", default, skip_serializing_if = "Option::is_none")]
    pub suite_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SuiteEntryUpdateParams {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "sequenceNumber",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sequence_number: Option<i32>,
    #[serde(
        rename = "suiteEntryType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub suite_entry_type: Option<suite_entry_update_params::SuiteEntryType>,
}
pub mod suite_entry_update_params {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SuiteEntryType {
        #[serde(rename = "testCase")]
        TestCase,
        #[serde(rename = "suite")]
        Suite,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SuiteTestCaseCreateUpdateParameters {
    #[serde(
        rename = "pointAssignments",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub point_assignments: Vec<Configuration>,
    #[serde(rename = "workItem", default, skip_serializing_if = "Option::is_none")]
    pub work_item: Option<WorkItem>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamProjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub abbreviation: Option<String>,
    #[serde(
        rename = "defaultTeamImageUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_team_image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "lastUpdateTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_update_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<team_project_reference::State>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub visibility: Option<team_project_reference::Visibility>,
}
pub mod team_project_reference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "deleting")]
        Deleting,
        #[serde(rename = "new")]
        New,
        #[serde(rename = "wellFormed")]
        WellFormed,
        #[serde(rename = "createPending")]
        CreatePending,
        #[serde(rename = "all")]
        All,
        #[serde(rename = "unchanged")]
        Unchanged,
        #[serde(rename = "deleted")]
        Deleted,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Visibility {
        #[serde(rename = "private")]
        Private,
        #[serde(rename = "public")]
        Public,
        #[serde(rename = "organization")]
        Organization,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestCase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<i32>,
    #[serde(
        rename = "pointAssignments",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub point_assignments: Vec<PointAssignment>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
    #[serde(rename = "testPlan", default, skip_serializing_if = "Option::is_none")]
    pub test_plan: Option<TestPlanReference>,
    #[serde(rename = "testSuite", default, skip_serializing_if = "Option::is_none")]
    pub test_suite: Option<TestSuiteReference>,
    #[serde(rename = "workItem", default, skip_serializing_if = "Option::is_none")]
    pub work_item: Option<WorkItemDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestCaseAssociatedResult {
    #[serde(
        rename = "completedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completed_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<TestConfigurationReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<test_case_associated_result::Outcome>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan: Option<TestPlanReference>,
    #[serde(rename = "pointId", default, skip_serializing_if = "Option::is_none")]
    pub point_id: Option<i32>,
    #[serde(rename = "resultId", default, skip_serializing_if = "Option::is_none")]
    pub result_id: Option<i32>,
    #[serde(rename = "runBy", default, skip_serializing_if = "Option::is_none")]
    pub run_by: Option<IdentityRef>,
    #[serde(rename = "runId", default, skip_serializing_if = "Option::is_none")]
    pub run_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suite: Option<TestSuiteReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tester: Option<IdentityRef>,
}
pub mod test_case_associated_result {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Outcome {
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "blocked")]
        Blocked,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "passed")]
        Passed,
        #[serde(rename = "ready")]
        Ready,
        #[serde(rename = "notApplicable")]
        NotApplicable,
        #[serde(rename = "paused")]
        Paused,
        #[serde(rename = "timeout")]
        Timeout,
        #[serde(rename = "warning")]
        Warning,
        #[serde(rename = "error")]
        Error,
        #[serde(rename = "notExecuted")]
        NotExecuted,
        #[serde(rename = "inconclusive")]
        Inconclusive,
        #[serde(rename = "aborted")]
        Aborted,
        #[serde(rename = "none")]
        None,
        #[serde(rename = "notImpacted")]
        NotImpacted,
        #[serde(rename = "unspecified")]
        Unspecified,
        #[serde(rename = "maxValue")]
        MaxValue,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestCaseReference {
    #[serde(
        rename = "assignedTo",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_to: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestCaseResultsData {
    #[serde(
        rename = "contextPoint",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub context_point: Option<TestPointDetailedReference>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<TestCaseAssociatedResult>,
    #[serde(
        rename = "testCaseName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestConfiguration {
    #[serde(flatten)]
    pub test_configuration_create_update_parameters: TestConfigurationCreateUpdateParameters,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestConfigurationCreateUpdateParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "isDefault", default, skip_serializing_if = "Option::is_none")]
    pub is_default: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<test_configuration_create_update_parameters::State>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub values: Vec<NameValuePair>,
}
pub mod test_configuration_create_update_parameters {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "active")]
        Active,
        #[serde(rename = "inactive")]
        Inactive,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestConfigurationReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestEntityCount {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(
        rename = "testPlanId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_plan_id: Option<i32>,
    #[serde(
        rename = "testSuiteId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_suite_id: Option<i32>,
    #[serde(
        rename = "totalCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestEnvironment {
    #[serde(
        rename = "environmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_id: Option<String>,
    #[serde(
        rename = "environmentName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestOutcomeSettings {
    #[serde(
        rename = "syncOutcomeAcrossSuites",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sync_outcome_across_suites: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPlan {
    #[serde(flatten)]
    pub test_plan_update_params: TestPlanUpdateParams,
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "previousBuildId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub previous_build_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
    #[serde(rename = "rootSuite", default, skip_serializing_if = "Option::is_none")]
    pub root_suite: Option<TestSuiteReference>,
    #[serde(rename = "updatedBy", default, skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<IdentityRef>,
    #[serde(
        rename = "updatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub updated_date: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPlanCreateParams {
    #[serde(rename = "areaPath", default, skip_serializing_if = "Option::is_none")]
    pub area_path: Option<String>,
    #[serde(
        rename = "buildDefinition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_definition: Option<BuildDefinitionReference>,
    #[serde(rename = "buildId", default, skip_serializing_if = "Option::is_none")]
    pub build_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "endDate", default, skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iteration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IdentityRef>,
    #[serde(
        rename = "releaseEnvironmentDefinition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_environment_definition: Option<ReleaseEnvironmentDefinitionReference>,
    #[serde(rename = "startDate", default, skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(
        rename = "testOutcomeSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_outcome_settings: Option<TestOutcomeSettings>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPlanDetailedReference {
    #[serde(flatten)]
    pub test_plan_reference: TestPlanReference,
    #[serde(rename = "areaPath", default, skip_serializing_if = "Option::is_none")]
    pub area_path: Option<String>,
    #[serde(rename = "endDate", default, skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iteration: Option<String>,
    #[serde(
        rename = "rootSuiteId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub root_suite_id: Option<i32>,
    #[serde(rename = "startDate", default, skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPlanReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPlansHubRefreshData {
    #[serde(
        rename = "defineColumnOptionFields",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub define_column_option_fields: Vec<String>,
    #[serde(
        rename = "defineTabCustomColumnFieldMap",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub define_tab_custom_column_field_map: Option<serde_json::Value>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(
        rename = "executeColumnOptionFields",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub execute_column_option_fields: Vec<String>,
    #[serde(
        rename = "executeTabCustomColumnFieldMap",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub execute_tab_custom_column_field_map: Option<serde_json::Value>,
    #[serde(
        rename = "isAdvancedExtensionEnabled",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_advanced_extension_enabled: Option<bool>,
    #[serde(
        rename = "selectedPivotId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub selected_pivot_id: Option<String>,
    #[serde(
        rename = "selectedSuiteId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub selected_suite_id: Option<i32>,
    #[serde(
        rename = "testCasePageSize",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_page_size: Option<i32>,
    #[serde(rename = "testCases", default, skip_serializing_if = "Vec::is_empty")]
    pub test_cases: Vec<TestCase>,
    #[serde(
        rename = "testCasesContinuationToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_cases_continuation_token: Option<String>,
    #[serde(rename = "testPlan", default, skip_serializing_if = "Option::is_none")]
    pub test_plan: Option<TestPlanDetailedReference>,
    #[serde(
        rename = "testPointPageSize",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_point_page_size: Option<i32>,
    #[serde(rename = "testPoints", default, skip_serializing_if = "Vec::is_empty")]
    pub test_points: Vec<TestPoint>,
    #[serde(
        rename = "testPointsContinuationToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_points_continuation_token: Option<String>,
    #[serde(rename = "testSuites", default, skip_serializing_if = "Vec::is_empty")]
    pub test_suites: Vec<TestSuite>,
    #[serde(
        rename = "testSuitesContinuationToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_suites_continuation_token: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPlansLibraryWorkItemFilter {
    #[serde(rename = "fieldName", default, skip_serializing_if = "Option::is_none")]
    pub field_name: Option<String>,
    #[serde(rename = "fieldValues", default, skip_serializing_if = "Vec::is_empty")]
    pub field_values: Vec<String>,
    #[serde(
        rename = "filterMode",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub filter_mode: Option<test_plans_library_work_item_filter::FilterMode>,
}
pub mod test_plans_library_work_item_filter {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FilterMode {
        #[serde(rename = "or")]
        Or,
        #[serde(rename = "and")]
        And,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPlanUpdateParams {
    #[serde(flatten)]
    pub test_plan_create_params: TestPlanCreateParams,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPoint {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<TestConfigurationReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "isActive", default, skip_serializing_if = "Option::is_none")]
    pub is_active: Option<bool>,
    #[serde(
        rename = "isAutomated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_automated: Option<bool>,
    #[serde(
        rename = "lastResetToActive",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_reset_to_active: Option<String>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<IdentityRef>,
    #[serde(
        rename = "lastUpdatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub results: Option<TestPointResults>,
    #[serde(
        rename = "testCaseReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_reference: Option<TestCaseReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tester: Option<IdentityRef>,
    #[serde(rename = "testPlan", default, skip_serializing_if = "Option::is_none")]
    pub test_plan: Option<TestPlanReference>,
    #[serde(rename = "testSuite", default, skip_serializing_if = "Option::is_none")]
    pub test_suite: Option<TestSuiteReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPointDetailedReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<TestConfigurationReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan: Option<TestPlanReference>,
    #[serde(rename = "pointId", default, skip_serializing_if = "Option::is_none")]
    pub point_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suite: Option<TestSuiteReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tester: Option<IdentityRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPointResults {
    #[serde(
        rename = "failureType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub failure_type: Option<test_point_results::FailureType>,
    #[serde(
        rename = "lastResolutionState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_resolution_state: Option<test_point_results::LastResolutionState>,
    #[serde(
        rename = "lastResultDetails",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_result_details: Option<LastResultDetails>,
    #[serde(
        rename = "lastResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_result_id: Option<i32>,
    #[serde(
        rename = "lastResultState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_result_state: Option<test_point_results::LastResultState>,
    #[serde(
        rename = "lastRunBuildNumber",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_run_build_number: Option<String>,
    #[serde(
        rename = "lastTestRunId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_test_run_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<test_point_results::Outcome>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<test_point_results::State>,
}
pub mod test_point_results {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FailureType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "regression")]
        Regression,
        #[serde(rename = "new_Issue")]
        NewIssue,
        #[serde(rename = "known_Issue")]
        KnownIssue,
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "null_Value")]
        NullValue,
        #[serde(rename = "maxValue")]
        MaxValue,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LastResolutionState {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "needsInvestigation")]
        NeedsInvestigation,
        #[serde(rename = "testIssue")]
        TestIssue,
        #[serde(rename = "productIssue")]
        ProductIssue,
        #[serde(rename = "configurationIssue")]
        ConfigurationIssue,
        #[serde(rename = "nullValue")]
        NullValue,
        #[serde(rename = "maxValue")]
        MaxValue,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum LastResultState {
        #[serde(rename = "unspecified")]
        Unspecified,
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "paused")]
        Paused,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "maxValue")]
        MaxValue,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Outcome {
        #[serde(rename = "unspecified")]
        Unspecified,
        #[serde(rename = "none")]
        None,
        #[serde(rename = "passed")]
        Passed,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "inconclusive")]
        Inconclusive,
        #[serde(rename = "timeout")]
        Timeout,
        #[serde(rename = "aborted")]
        Aborted,
        #[serde(rename = "blocked")]
        Blocked,
        #[serde(rename = "notExecuted")]
        NotExecuted,
        #[serde(rename = "warning")]
        Warning,
        #[serde(rename = "error")]
        Error,
        #[serde(rename = "notApplicable")]
        NotApplicable,
        #[serde(rename = "paused")]
        Paused,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "notImpacted")]
        NotImpacted,
        #[serde(rename = "maxValue")]
        MaxValue,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "ready")]
        Ready,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "notReady")]
        NotReady,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "maxValue")]
        MaxValue,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPointUpdateParams {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "isActive", default, skip_serializing_if = "Option::is_none")]
    pub is_active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub results: Option<Results>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tester: Option<IdentityRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSettings {
    #[serde(rename = "areaPath", default, skip_serializing_if = "Option::is_none")]
    pub area_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "isPublic", default, skip_serializing_if = "Option::is_none")]
    pub is_public: Option<bool>,
    #[serde(
        rename = "machineRoles",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub machine_roles: Option<String>,
    #[serde(
        rename = "testSettingsContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_settings_content: Option<String>,
    #[serde(
        rename = "testSettingsId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_settings_id: Option<i32>,
    #[serde(
        rename = "testSettingsName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_settings_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSuite {
    #[serde(flatten)]
    pub test_suite_create_params: TestSuiteCreateParams,
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub children: Vec<TestSuite>,
    #[serde(
        rename = "hasChildren",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub has_children: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "lastError", default, skip_serializing_if = "Option::is_none")]
    pub last_error: Option<String>,
    #[serde(
        rename = "lastPopulatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_populated_date: Option<String>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<IdentityRef>,
    #[serde(
        rename = "lastUpdatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan: Option<TestPlanReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSuiteCreateParams {
    #[serde(flatten)]
    pub test_suite_create_update_common_params: TestSuiteCreateUpdateCommonParams,
    #[serde(
        rename = "requirementId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requirement_id: Option<i32>,
    #[serde(rename = "suiteType", default, skip_serializing_if = "Option::is_none")]
    pub suite_type: Option<test_suite_create_params::SuiteType>,
}
pub mod test_suite_create_params {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum SuiteType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "dynamicTestSuite")]
        DynamicTestSuite,
        #[serde(rename = "staticTestSuite")]
        StaticTestSuite,
        #[serde(rename = "requirementTestSuite")]
        RequirementTestSuite,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSuiteCreateUpdateCommonParams {
    #[serde(
        rename = "defaultConfigurations",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub default_configurations: Vec<TestConfigurationReference>,
    #[serde(
        rename = "defaultTesters",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub default_testers: Vec<IdentityRef>,
    #[serde(
        rename = "inheritDefaultConfigurations",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub inherit_default_configurations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "parentSuite",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub parent_suite: Option<TestSuiteReference>,
    #[serde(
        rename = "queryString",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub query_string: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSuiteReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSuiteReferenceWithProject {
    #[serde(flatten)]
    pub test_suite_reference: TestSuiteReference,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSuiteUpdateParams {
    #[serde(flatten)]
    pub test_suite_create_update_common_params: TestSuiteCreateUpdateCommonParams,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestVariable {
    #[serde(flatten)]
    pub test_variable_create_update_parameters: TestVariableCreateUpdateParameters,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<TeamProjectReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestVariableCreateUpdateParameters {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub values: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItem {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemDetails {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "workItemFields",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub work_item_fields: Vec<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SuiteEntryList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<SuiteEntry>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestCaseList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestCase>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestConfigurationList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestConfiguration>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPlanList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestPlan>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPointList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestPoint>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSuiteList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestSuite>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestVariableList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestVariable>,
}
