#![doc = "generated by AutoRust 0.1.0"]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AbortTestRunRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<i32>,
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AfnStrip {
    #[serde(
        rename = "auxiliaryUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub auxiliary_url: Option<String>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(rename = "fileName", default, skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    #[serde(rename = "storedIn", default, skip_serializing_if = "Option::is_none")]
    pub stored_in: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stream: Option<String>,
    #[serde(
        rename = "testCaseId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_id: Option<i32>,
    #[serde(
        rename = "testResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
    #[serde(
        rename = "unCompressedStreamLength",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub un_compressed_stream_length: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AggregatedDataForResultTrend {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(
        rename = "resultsByOutcome",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub results_by_outcome: Option<serde_json::Value>,
    #[serde(
        rename = "runSummaryByState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_summary_by_state: Option<serde_json::Value>,
    #[serde(
        rename = "testResultsContext",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_results_context: Option<TestResultsContext>,
    #[serde(
        rename = "totalTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_tests: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AggregatedResultDetailsByOutcome {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<aggregated_result_details_by_outcome::Outcome>,
    #[serde(
        rename = "rerunResultCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub rerun_result_count: Option<i32>,
}
pub mod aggregated_result_details_by_outcome {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Outcome {
        #[serde(rename = "unspecified")]
        Unspecified,
        #[serde(rename = "none")]
        None,
        #[serde(rename = "passed")]
        Passed,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "inconclusive")]
        Inconclusive,
        #[serde(rename = "timeout")]
        Timeout,
        #[serde(rename = "aborted")]
        Aborted,
        #[serde(rename = "blocked")]
        Blocked,
        #[serde(rename = "notExecuted")]
        NotExecuted,
        #[serde(rename = "warning")]
        Warning,
        #[serde(rename = "error")]
        Error,
        #[serde(rename = "notApplicable")]
        NotApplicable,
        #[serde(rename = "paused")]
        Paused,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "notImpacted")]
        NotImpacted,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AggregatedResultsAnalysis {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(
        rename = "notReportedResultsByOutcome",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub not_reported_results_by_outcome: Option<serde_json::Value>,
    #[serde(
        rename = "previousContext",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub previous_context: Option<TestResultsContext>,
    #[serde(
        rename = "resultsByOutcome",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub results_by_outcome: Option<serde_json::Value>,
    #[serde(
        rename = "resultsDifference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub results_difference: Option<AggregatedResultsDifference>,
    #[serde(
        rename = "runSummaryByOutcome",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_summary_by_outcome: Option<serde_json::Value>,
    #[serde(
        rename = "runSummaryByState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_summary_by_state: Option<serde_json::Value>,
    #[serde(
        rename = "totalTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_tests: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AggregatedResultsByOutcome {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(
        rename = "groupByField",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub group_by_field: Option<String>,
    #[serde(
        rename = "groupByValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub group_by_value: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<aggregated_results_by_outcome::Outcome>,
    #[serde(
        rename = "rerunResultCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub rerun_result_count: Option<i32>,
}
pub mod aggregated_results_by_outcome {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Outcome {
        #[serde(rename = "unspecified")]
        Unspecified,
        #[serde(rename = "none")]
        None,
        #[serde(rename = "passed")]
        Passed,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "inconclusive")]
        Inconclusive,
        #[serde(rename = "timeout")]
        Timeout,
        #[serde(rename = "aborted")]
        Aborted,
        #[serde(rename = "blocked")]
        Blocked,
        #[serde(rename = "notExecuted")]
        NotExecuted,
        #[serde(rename = "warning")]
        Warning,
        #[serde(rename = "error")]
        Error,
        #[serde(rename = "notApplicable")]
        NotApplicable,
        #[serde(rename = "paused")]
        Paused,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "notImpacted")]
        NotImpacted,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AggregatedResultsDifference {
    #[serde(
        rename = "increaseInDuration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub increase_in_duration: Option<String>,
    #[serde(
        rename = "increaseInFailures",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub increase_in_failures: Option<i32>,
    #[serde(
        rename = "increaseInNonImpactedTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub increase_in_non_impacted_tests: Option<i32>,
    #[serde(
        rename = "increaseInOtherTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub increase_in_other_tests: Option<i32>,
    #[serde(
        rename = "increaseInPassedTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub increase_in_passed_tests: Option<i32>,
    #[serde(
        rename = "increaseInTotalTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub increase_in_total_tests: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AggregatedRunsByOutcome {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<aggregated_runs_by_outcome::Outcome>,
    #[serde(rename = "runsCount", default, skip_serializing_if = "Option::is_none")]
    pub runs_count: Option<i32>,
}
pub mod aggregated_runs_by_outcome {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Outcome {
        #[serde(rename = "passed")]
        Passed,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "notImpacted")]
        NotImpacted,
        #[serde(rename = "others")]
        Others,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AggregatedRunsByState {
    #[serde(
        rename = "resultsByOutcome",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub results_by_outcome: Option<serde_json::Value>,
    #[serde(rename = "runsCount", default, skip_serializing_if = "Option::is_none")]
    pub runs_count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<aggregated_runs_by_state::State>,
}
pub mod aggregated_runs_by_state {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "unspecified")]
        Unspecified,
        #[serde(rename = "notStarted")]
        NotStarted,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "aborted")]
        Aborted,
        #[serde(rename = "waiting")]
        Waiting,
        #[serde(rename = "needsInvestigation")]
        NeedsInvestigation,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BatchResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub responses: Vec<Response>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<batch_response::Status>,
}
pub mod batch_response {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "continue")]
        Continue,
        #[serde(rename = "switchingProtocols")]
        SwitchingProtocols,
        #[serde(rename = "ok")]
        Ok,
        #[serde(rename = "created")]
        Created,
        #[serde(rename = "accepted")]
        Accepted,
        #[serde(rename = "nonAuthoritativeInformation")]
        NonAuthoritativeInformation,
        #[serde(rename = "noContent")]
        NoContent,
        #[serde(rename = "resetContent")]
        ResetContent,
        #[serde(rename = "partialContent")]
        PartialContent,
        #[serde(rename = "multipleChoices")]
        MultipleChoices,
        #[serde(rename = "ambiguous")]
        Ambiguous,
        #[serde(rename = "movedPermanently")]
        MovedPermanently,
        #[serde(rename = "moved")]
        Moved,
        #[serde(rename = "found")]
        Found,
        #[serde(rename = "redirect")]
        Redirect,
        #[serde(rename = "seeOther")]
        SeeOther,
        #[serde(rename = "redirectMethod")]
        RedirectMethod,
        #[serde(rename = "notModified")]
        NotModified,
        #[serde(rename = "useProxy")]
        UseProxy,
        #[serde(rename = "unused")]
        Unused,
        #[serde(rename = "temporaryRedirect")]
        TemporaryRedirect,
        #[serde(rename = "redirectKeepVerb")]
        RedirectKeepVerb,
        #[serde(rename = "badRequest")]
        BadRequest,
        #[serde(rename = "unauthorized")]
        Unauthorized,
        #[serde(rename = "paymentRequired")]
        PaymentRequired,
        #[serde(rename = "forbidden")]
        Forbidden,
        #[serde(rename = "notFound")]
        NotFound,
        #[serde(rename = "methodNotAllowed")]
        MethodNotAllowed,
        #[serde(rename = "notAcceptable")]
        NotAcceptable,
        #[serde(rename = "proxyAuthenticationRequired")]
        ProxyAuthenticationRequired,
        #[serde(rename = "requestTimeout")]
        RequestTimeout,
        #[serde(rename = "conflict")]
        Conflict,
        #[serde(rename = "gone")]
        Gone,
        #[serde(rename = "lengthRequired")]
        LengthRequired,
        #[serde(rename = "preconditionFailed")]
        PreconditionFailed,
        #[serde(rename = "requestEntityTooLarge")]
        RequestEntityTooLarge,
        #[serde(rename = "requestUriTooLong")]
        RequestUriTooLong,
        #[serde(rename = "unsupportedMediaType")]
        UnsupportedMediaType,
        #[serde(rename = "requestedRangeNotSatisfiable")]
        RequestedRangeNotSatisfiable,
        #[serde(rename = "expectationFailed")]
        ExpectationFailed,
        #[serde(rename = "upgradeRequired")]
        UpgradeRequired,
        #[serde(rename = "internalServerError")]
        InternalServerError,
        #[serde(rename = "notImplemented")]
        NotImplemented,
        #[serde(rename = "badGateway")]
        BadGateway,
        #[serde(rename = "serviceUnavailable")]
        ServiceUnavailable,
        #[serde(rename = "gatewayTimeout")]
        GatewayTimeout,
        #[serde(rename = "httpVersionNotSupported")]
        HttpVersionNotSupported,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildConfiguration {
    #[serde(
        rename = "branchName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub branch_name: Option<String>,
    #[serde(
        rename = "buildDefinitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_definition_id: Option<i32>,
    #[serde(
        rename = "buildSystem",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_system: Option<String>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub flavor: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub number: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ShallowReference>,
    #[serde(
        rename = "repositoryGuid",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub repository_guid: Option<String>,
    #[serde(
        rename = "repositoryType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub repository_type: Option<String>,
    #[serde(
        rename = "sourceVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_version: Option<String>,
    #[serde(
        rename = "targetBranchName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub target_branch_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildCoverage {
    #[serde(
        rename = "codeCoverageFileUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub code_coverage_file_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<BuildConfiguration>,
    #[serde(rename = "lastError", default, skip_serializing_if = "Option::is_none")]
    pub last_error: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub modules: Vec<ModuleCoverage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildReference {
    #[serde(
        rename = "branchName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub branch_name: Option<String>,
    #[serde(
        rename = "buildSystem",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_system: Option<String>,
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub number: Option<String>,
    #[serde(
        rename = "repositoryId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub repository_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildReference2 {
    #[serde(
        rename = "branchName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub branch_name: Option<String>,
    #[serde(
        rename = "buildConfigurationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_configuration_id: Option<i32>,
    #[serde(
        rename = "buildDefinitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_definition_id: Option<i32>,
    #[serde(
        rename = "buildDeleted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_deleted: Option<bool>,
    #[serde(
        rename = "buildFlavor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_flavor: Option<String>,
    #[serde(rename = "buildId", default, skip_serializing_if = "Option::is_none")]
    pub build_id: Option<i32>,
    #[serde(
        rename = "buildNumber",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_number: Option<String>,
    #[serde(
        rename = "buildPlatform",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_platform: Option<String>,
    #[serde(
        rename = "buildSystem",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_system: Option<String>,
    #[serde(rename = "buildUri", default, skip_serializing_if = "Option::is_none")]
    pub build_uri: Option<String>,
    #[serde(
        rename = "coverageId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub coverage_id: Option<i32>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(rename = "repoId", default, skip_serializing_if = "Option::is_none")]
    pub repo_id: Option<String>,
    #[serde(rename = "repoType", default, skip_serializing_if = "Option::is_none")]
    pub repo_type: Option<String>,
    #[serde(
        rename = "sourceVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_version: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BulkResultUpdateRequest {
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub requests: Vec<ResultUpdateRequest>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloneOperationInformation {
    #[serde(
        rename = "cloneStatistics",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub clone_statistics: Option<CloneStatistics>,
    #[serde(
        rename = "completionDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completion_date: Option<String>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(
        rename = "destinationObject",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_object: Option<ShallowReference>,
    #[serde(
        rename = "destinationPlan",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_plan: Option<ShallowReference>,
    #[serde(
        rename = "destinationProject",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_project: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "opId", default, skip_serializing_if = "Option::is_none")]
    pub op_id: Option<i32>,
    #[serde(
        rename = "resultObjectType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_object_type: Option<clone_operation_information::ResultObjectType>,
    #[serde(
        rename = "sourceObject",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_object: Option<ShallowReference>,
    #[serde(
        rename = "sourcePlan",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_plan: Option<ShallowReference>,
    #[serde(
        rename = "sourceProject",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_project: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<clone_operation_information::State>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod clone_operation_information {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ResultObjectType {
        #[serde(rename = "testSuite")]
        TestSuite,
        #[serde(rename = "testPlan")]
        TestPlan,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "queued")]
        Queued,
        #[serde(rename = "succeeded")]
        Succeeded,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloneOptions {
    #[serde(
        rename = "cloneRequirements",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub clone_requirements: Option<bool>,
    #[serde(
        rename = "copyAllSuites",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub copy_all_suites: Option<bool>,
    #[serde(
        rename = "copyAncestorHierarchy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub copy_ancestor_hierarchy: Option<bool>,
    #[serde(
        rename = "destinationWorkItemType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_work_item_type: Option<String>,
    #[serde(
        rename = "overrideParameters",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub override_parameters: Option<serde_json::Value>,
    #[serde(
        rename = "relatedLinkComment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub related_link_comment: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloneStatistics {
    #[serde(
        rename = "clonedRequirementsCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub cloned_requirements_count: Option<i32>,
    #[serde(
        rename = "clonedSharedStepsCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub cloned_shared_steps_count: Option<i32>,
    #[serde(
        rename = "clonedTestCasesCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub cloned_test_cases_count: Option<i32>,
    #[serde(
        rename = "totalRequirementsCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_requirements_count: Option<i32>,
    #[serde(
        rename = "totalTestCasesCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_test_cases_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CloneTestCaseOptions {
    #[serde(
        rename = "includeAttachments",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_attachments: Option<bool>,
    #[serde(
        rename = "includeLinks",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_links: Option<bool>,
    #[serde(
        rename = "relatedLinkComment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub related_link_comment: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodeCoverageData {
    #[serde(
        rename = "buildFlavor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_flavor: Option<String>,
    #[serde(
        rename = "buildPlatform",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_platform: Option<String>,
    #[serde(
        rename = "coverageStats",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub coverage_stats: Vec<CodeCoverageStatistics>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodeCoverageStatistics {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub covered: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delta: Option<f64>,
    #[serde(
        rename = "isDeltaAvailable",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_delta_available: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub position: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodeCoverageSummary {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<ShallowReference>,
    #[serde(
        rename = "coverageData",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub coverage_data: Vec<CodeCoverageData>,
    #[serde(
        rename = "deltaBuild",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub delta_build: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<code_coverage_summary::Status>,
}
pub mod code_coverage_summary {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "finalized")]
        Finalized,
        #[serde(rename = "pending")]
        Pending,
        #[serde(rename = "updateRequestQueued")]
        UpdateRequestQueued,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodeCoverageSummary2 {
    #[serde(
        rename = "buildConfigurationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_configuration_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub covered: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub position: Option<i32>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Coverage2 {
    #[serde(
        rename = "coverageId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub coverage_id: Option<i32>,
    #[serde(
        rename = "dateCreated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_created: Option<String>,
    #[serde(
        rename = "dateModified",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_modified: Option<String>,
    #[serde(rename = "lastError", default, skip_serializing_if = "Option::is_none")]
    pub last_error: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoverageStatistics {
    #[serde(
        rename = "blocksCovered",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub blocks_covered: Option<i32>,
    #[serde(
        rename = "blocksNotCovered",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub blocks_not_covered: Option<i32>,
    #[serde(
        rename = "linesCovered",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub lines_covered: Option<i32>,
    #[serde(
        rename = "linesNotCovered",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub lines_not_covered: Option<i32>,
    #[serde(
        rename = "linesPartiallyCovered",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub lines_partially_covered: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateTestMessageLogEntryRequest {
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
    #[serde(
        rename = "testMessageLogEntry",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub test_message_log_entry: Vec<TestMessageLogEntry>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateTestResultsRequest {
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<LegacyTestCaseResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateTestRunRequest {
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<LegacyTestCaseResult>,
    #[serde(rename = "testRun", default, skip_serializing_if = "Option::is_none")]
    pub test_run: Option<LegacyTestRun>,
    #[serde(
        rename = "testSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_settings: Option<LegacyTestSettings>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomTestField {
    #[serde(rename = "fieldName", default, skip_serializing_if = "Option::is_none")]
    pub field_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomTestFieldDefinition {
    #[serde(rename = "fieldId", default, skip_serializing_if = "Option::is_none")]
    pub field_id: Option<i32>,
    #[serde(rename = "fieldName", default, skip_serializing_if = "Option::is_none")]
    pub field_name: Option<String>,
    #[serde(rename = "fieldType", default, skip_serializing_if = "Option::is_none")]
    pub field_type: Option<custom_test_field_definition::FieldType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<custom_test_field_definition::Scope>,
}
pub mod custom_test_field_definition {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FieldType {
        #[serde(rename = "bit")]
        Bit,
        #[serde(rename = "dateTime")]
        DateTime,
        #[serde(rename = "int")]
        Int,
        #[serde(rename = "float")]
        Float,
        #[serde(rename = "string")]
        String,
        #[serde(rename = "guid")]
        Guid,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Scope {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "testRun")]
        TestRun,
        #[serde(rename = "testResult")]
        TestResult,
        #[serde(rename = "system")]
        System,
        #[serde(rename = "all")]
        All,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DatedTestFieldData {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<TestFieldData>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DefaultAfnStripBinding {
    #[serde(
        rename = "testCaseId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_id: Option<i32>,
    #[serde(
        rename = "testResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeleteTestRunRequest {
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
    #[serde(rename = "testRunIds", default, skip_serializing_if = "Vec::is_empty")]
    pub test_run_ids: Vec<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DownloadAttachmentsRequest {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub ids: Vec<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub lengths: Vec<i64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DtlEnvironmentDetails {
    #[serde(
        rename = "csmContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub csm_content: Option<String>,
    #[serde(
        rename = "csmParameters",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub csm_parameters: Option<String>,
    #[serde(
        rename = "subscriptionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub subscription_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FailingSince {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<BuildReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<ReleaseReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FetchTestResultsRequest {
    #[serde(rename = "idAndRevs", default, skip_serializing_if = "Vec::is_empty")]
    pub id_and_revs: Vec<TestCaseResultIdAndRev>,
    #[serde(
        rename = "includeActionResults",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_action_results: Option<bool>,
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FetchTestResultsResponse {
    #[serde(
        rename = "actionResults",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub action_results: Vec<TestActionResult>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub attachments: Vec<TestResultAttachment>,
    #[serde(rename = "deletedIds", default, skip_serializing_if = "Vec::is_empty")]
    pub deleted_ids: Vec<LegacyTestCaseResultIdentifier>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<LegacyTestCaseResult>,
    #[serde(
        rename = "testParameters",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub test_parameters: Vec<TestResultParameter>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FieldDetailsForTestResults {
    #[serde(rename = "fieldName", default, skip_serializing_if = "Option::is_none")]
    pub field_name: Option<String>,
    #[serde(
        rename = "groupsForField",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub groups_for_field: Vec<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileCoverage {
    #[serde(
        rename = "lineBlocksCoverage",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub line_blocks_coverage: Vec<LineBlockCoverage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileCoverageRequest {
    #[serde(rename = "filePath", default, skip_serializing_if = "Option::is_none")]
    pub file_path: Option<String>,
    #[serde(
        rename = "pullRequestBaseIterationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pull_request_base_iteration_id: Option<i32>,
    #[serde(
        rename = "pullRequestId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pull_request_id: Option<i32>,
    #[serde(
        rename = "pullRequestIterationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pull_request_iteration_id: Option<i32>,
    #[serde(rename = "repoId", default, skip_serializing_if = "Option::is_none")]
    pub repo_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FilterPointQuery {
    #[serde(rename = "planId", default, skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<i32>,
    #[serde(rename = "pointIds", default, skip_serializing_if = "Vec::is_empty")]
    pub point_ids: Vec<i32>,
    #[serde(
        rename = "pointOutcome",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub point_outcome: Vec<String>,
    #[serde(rename = "resultState", default, skip_serializing_if = "Vec::is_empty")]
    pub result_state: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FlakyDetection {
    #[serde(
        rename = "flakyDetectionPipelines",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub flaky_detection_pipelines: Option<FlakyDetectionPipelines>,
    #[serde(
        rename = "flakyDetectionType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub flaky_detection_type: Option<flaky_detection::FlakyDetectionType>,
}
pub mod flaky_detection {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum FlakyDetectionType {
        #[serde(rename = "custom")]
        Custom,
        #[serde(rename = "system")]
        System,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FlakyDetectionPipelines {
    #[serde(
        rename = "allowedPipelines",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub allowed_pipelines: Vec<i32>,
    #[serde(
        rename = "isAllPipelinesAllowed",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_all_pipelines_allowed: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FlakySettings {
    #[serde(
        rename = "flakyDetection",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub flaky_detection: Option<FlakyDetection>,
    #[serde(
        rename = "flakyInSummaryReport",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub flaky_in_summary_report: Option<bool>,
    #[serde(
        rename = "isFlakyBugCreated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_flaky_bug_created: Option<bool>,
    #[serde(
        rename = "manualMarkUnmarkFlaky",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub manual_mark_unmark_flaky: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FunctionCoverage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(
        rename = "sourceFile",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_file: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statistics: Option<CoverageStatistics>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FunctionCoverage2 {
    #[serde(
        rename = "blocksCovered",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub blocks_covered: Option<i32>,
    #[serde(
        rename = "blocksNotCovered",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub blocks_not_covered: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
    #[serde(
        rename = "coverageId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub coverage_id: Option<i32>,
    #[serde(
        rename = "functionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub function_id: Option<i32>,
    #[serde(
        rename = "linesCovered",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub lines_covered: Option<i32>,
    #[serde(
        rename = "linesNotCovered",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub lines_not_covered: Option<i32>,
    #[serde(
        rename = "linesPartiallyCovered",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub lines_partially_covered: Option<i32>,
    #[serde(rename = "moduleId", default, skip_serializing_if = "Option::is_none")]
    pub module_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(
        rename = "sourceFile",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_file: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GraphSubjectBase {
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<ReferenceLinks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub descriptor: Option<String>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HttpPostedTcmAttachment {
    #[serde(
        rename = "attachmentContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub attachment_content: Option<String>,
    #[serde(
        rename = "contentLength",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub content_length: Option<i32>,
    #[serde(
        rename = "contentType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub content_type: Option<String>,
    #[serde(rename = "fileName", default, skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityRef {
    #[serde(flatten)]
    pub graph_subject_base: GraphSubjectBase,
    #[serde(
        rename = "directoryAlias",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub directory_alias: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "imageUrl", default, skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inactive: Option<bool>,
    #[serde(
        rename = "isAadIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_aad_identity: Option<bool>,
    #[serde(
        rename = "isContainer",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_container: Option<bool>,
    #[serde(
        rename = "isDeletedInOrigin",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_deleted_in_origin: Option<bool>,
    #[serde(
        rename = "profileUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub profile_url: Option<String>,
    #[serde(
        rename = "uniqueName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JobReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(rename = "jobName", default, skip_serializing_if = "Option::is_none")]
    pub job_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LastResultDetails {
    #[serde(
        rename = "dateCompleted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_completed: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<i64>,
    #[serde(rename = "runBy", default, skip_serializing_if = "Option::is_none")]
    pub run_by: Option<IdentityRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LegacyBuildConfiguration {
    #[serde(
        rename = "branchName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub branch_name: Option<String>,
    #[serde(
        rename = "buildConfigurationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_configuration_id: Option<i32>,
    #[serde(
        rename = "buildDefinitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_definition_id: Option<i32>,
    #[serde(
        rename = "buildDefinitionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_definition_name: Option<String>,
    #[serde(
        rename = "buildFlavor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_flavor: Option<String>,
    #[serde(rename = "buildId", default, skip_serializing_if = "Option::is_none")]
    pub build_id: Option<i32>,
    #[serde(
        rename = "buildNumber",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_number: Option<String>,
    #[serde(
        rename = "buildPlatform",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_platform: Option<String>,
    #[serde(
        rename = "buildQuality",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_quality: Option<String>,
    #[serde(
        rename = "buildSystem",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_system: Option<String>,
    #[serde(rename = "buildUri", default, skip_serializing_if = "Option::is_none")]
    pub build_uri: Option<String>,
    #[serde(
        rename = "completedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completed_date: Option<String>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(
        rename = "oldBuildConfigurationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub old_build_configuration_id: Option<i32>,
    #[serde(
        rename = "repositoryId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub repository_id: Option<String>,
    #[serde(
        rename = "repositoryType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub repository_type: Option<String>,
    #[serde(
        rename = "sourceVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_version: Option<String>,
    #[serde(
        rename = "teamProjectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_project_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LegacyReleaseReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(
        rename = "environmentCreationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_creation_date: Option<String>,
    #[serde(
        rename = "primaryArtifactBuildId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub primary_artifact_build_id: Option<i32>,
    #[serde(
        rename = "primaryArtifactProjectId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub primary_artifact_project_id: Option<String>,
    #[serde(
        rename = "primaryArtifactType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub primary_artifact_type: Option<String>,
    #[serde(
        rename = "releaseCreationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_creation_date: Option<String>,
    #[serde(
        rename = "releaseDefId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_def_id: Option<i32>,
    #[serde(
        rename = "releaseEnvDefId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_env_def_id: Option<i32>,
    #[serde(
        rename = "releaseEnvId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_env_id: Option<i32>,
    #[serde(
        rename = "releaseEnvName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_env_name: Option<String>,
    #[serde(
        rename = "releaseEnvUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_env_uri: Option<String>,
    #[serde(rename = "releaseId", default, skip_serializing_if = "Option::is_none")]
    pub release_id: Option<i32>,
    #[serde(
        rename = "releaseName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_name: Option<String>,
    #[serde(
        rename = "releaseRefId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_ref_id: Option<i32>,
    #[serde(
        rename = "releaseUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_uri: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LegacyTestCaseResult {
    #[serde(
        rename = "afnStripId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub afn_strip_id: Option<i32>,
    #[serde(rename = "areaId", default, skip_serializing_if = "Option::is_none")]
    pub area_id: Option<i32>,
    #[serde(rename = "areaUri", default, skip_serializing_if = "Option::is_none")]
    pub area_uri: Option<String>,
    #[serde(
        rename = "automatedTestId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_id: Option<String>,
    #[serde(
        rename = "automatedTestName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_name: Option<String>,
    #[serde(
        rename = "automatedTestStorage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_storage: Option<String>,
    #[serde(
        rename = "automatedTestType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_type: Option<String>,
    #[serde(
        rename = "automatedTestTypeId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_type_id: Option<String>,
    #[serde(
        rename = "buildNumber",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_number: Option<String>,
    #[serde(
        rename = "buildReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_reference: Option<LegacyBuildConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "computerName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub computer_name: Option<String>,
    #[serde(
        rename = "configurationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub configuration_id: Option<i32>,
    #[serde(
        rename = "configurationName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub configuration_name: Option<String>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(
        rename = "customFields",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub custom_fields: Vec<TestExtensionField>,
    #[serde(
        rename = "dateCompleted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_completed: Option<String>,
    #[serde(
        rename = "dateStarted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_started: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<i64>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(
        rename = "failingSince",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub failing_since: Option<FailingSince>,
    #[serde(
        rename = "failureType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub failure_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<LegacyTestCaseResultIdentifier>,
    #[serde(rename = "isRerun", default, skip_serializing_if = "Option::is_none")]
    pub is_rerun: Option<bool>,
    #[serde(
        rename = "lastUpdated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated: Option<String>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<String>,
    #[serde(
        rename = "lastUpdatedByName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(rename = "ownerName", default, skip_serializing_if = "Option::is_none")]
    pub owner_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<String>,
    #[serde(
        rename = "releaseReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_reference: Option<LegacyReleaseReference>,
    #[serde(
        rename = "resetCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reset_count: Option<i32>,
    #[serde(
        rename = "resolutionStateId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resolution_state_id: Option<i32>,
    #[serde(
        rename = "resultGroupType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_group_type: Option<legacy_test_case_result::ResultGroupType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(rename = "runBy", default, skip_serializing_if = "Option::is_none")]
    pub run_by: Option<String>,
    #[serde(rename = "runByName", default, skip_serializing_if = "Option::is_none")]
    pub run_by_name: Option<String>,
    #[serde(
        rename = "sequenceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sequence_id: Option<i32>,
    #[serde(
        rename = "stackTrace",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub stack_trace: Option<TestExtensionField>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(
        rename = "subResultCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_result_count: Option<i32>,
    #[serde(rename = "suiteName", default, skip_serializing_if = "Option::is_none")]
    pub suite_name: Option<String>,
    #[serde(
        rename = "testCaseArea",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_area: Option<String>,
    #[serde(
        rename = "testCaseAreaUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_area_uri: Option<String>,
    #[serde(
        rename = "testCaseId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_id: Option<i32>,
    #[serde(
        rename = "testCaseReferenceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_reference_id: Option<i32>,
    #[serde(
        rename = "testCaseRevision",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_revision: Option<i32>,
    #[serde(
        rename = "testCaseTitle",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_title: Option<String>,
    #[serde(
        rename = "testPlanId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_plan_id: Option<i32>,
    #[serde(
        rename = "testPointId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_point_id: Option<i32>,
    #[serde(
        rename = "testResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
    #[serde(
        rename = "testRunTitle",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_run_title: Option<String>,
    #[serde(
        rename = "testSuiteId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_suite_id: Option<i32>,
}
pub mod legacy_test_case_result {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ResultGroupType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "rerun")]
        Rerun,
        #[serde(rename = "dataDriven")]
        DataDriven,
        #[serde(rename = "orderedTest")]
        OrderedTest,
        #[serde(rename = "generic")]
        Generic,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LegacyTestCaseResultIdentifier {
    #[serde(rename = "areaUri", default, skip_serializing_if = "Option::is_none")]
    pub area_uri: Option<String>,
    #[serde(
        rename = "testResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LegacyTestRun {
    #[serde(rename = "bugsCount", default, skip_serializing_if = "Option::is_none")]
    pub bugs_count: Option<i32>,
    #[serde(
        rename = "buildConfigurationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_configuration_id: Option<i32>,
    #[serde(
        rename = "buildFlavor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_flavor: Option<String>,
    #[serde(
        rename = "buildNumber",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_number: Option<String>,
    #[serde(
        rename = "buildPlatform",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_platform: Option<String>,
    #[serde(
        rename = "buildReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_reference: Option<LegacyBuildConfiguration>,
    #[serde(rename = "buildUri", default, skip_serializing_if = "Option::is_none")]
    pub build_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "completeDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub complete_date: Option<String>,
    #[serde(
        rename = "configurationIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub configuration_ids: Vec<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller: Option<String>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(
        rename = "csmContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub csm_content: Option<String>,
    #[serde(
        rename = "csmParameters",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub csm_parameters: Option<String>,
    #[serde(
        rename = "customFields",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub custom_fields: Vec<TestExtensionField>,
    #[serde(
        rename = "dropLocation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub drop_location: Option<String>,
    #[serde(
        rename = "dtlAutEnvironment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub dtl_aut_environment: Option<ShallowReference>,
    #[serde(
        rename = "dtlTestEnvironment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub dtl_test_environment: Option<ShallowReference>,
    #[serde(rename = "dueDate", default, skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<RunFilter>,
    #[serde(
        rename = "incompleteTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub incomplete_tests: Option<i32>,
    #[serde(
        rename = "isAutomated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_automated: Option<bool>,
    #[serde(rename = "isBvt", default, skip_serializing_if = "Option::is_none")]
    pub is_bvt: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iteration: Option<String>,
    #[serde(
        rename = "iterationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub iteration_id: Option<i32>,
    #[serde(
        rename = "lastUpdated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated: Option<String>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<String>,
    #[serde(
        rename = "lastUpdatedByName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by_name: Option<String>,
    #[serde(
        rename = "legacySharePath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub legacy_share_path: Option<String>,
    #[serde(
        rename = "notApplicableTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub not_applicable_tests: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(rename = "ownerName", default, skip_serializing_if = "Option::is_none")]
    pub owner_name: Option<String>,
    #[serde(
        rename = "passedTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub passed_tests: Option<i32>,
    #[serde(
        rename = "postProcessState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub post_process_state: Option<String>,
    #[serde(
        rename = "publicTestSettingsId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub public_test_settings_id: Option<i32>,
    #[serde(
        rename = "releaseEnvironmentUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_environment_uri: Option<String>,
    #[serde(
        rename = "releaseReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_reference: Option<LegacyReleaseReference>,
    #[serde(
        rename = "releaseUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(rename = "rowVersion", default, skip_serializing_if = "Vec::is_empty")]
    pub row_version: Vec<String>,
    #[serde(
        rename = "runHasDtlEnvironment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_has_dtl_environment: Option<bool>,
    #[serde(
        rename = "runTimeout",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_timeout: Option<String>,
    #[serde(
        rename = "serviceVersion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub service_version: Option<String>,
    #[serde(
        rename = "sourceWorkflow",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_workflow: Option<String>,
    #[serde(rename = "startDate", default, skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(
        rename = "subscriptionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub subscription_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub substate: Option<String>,
    #[serde(
        rename = "teamProject",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_project: Option<String>,
    #[serde(
        rename = "teamProjectUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_project_uri: Option<String>,
    #[serde(
        rename = "testConfigurationsMapping",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_configurations_mapping: Option<String>,
    #[serde(
        rename = "testEnvironmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_environment_id: Option<String>,
    #[serde(
        rename = "testMessageLogEntries",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub test_message_log_entries: Vec<TestMessageLogDetails>,
    #[serde(
        rename = "testMessageLogId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_message_log_id: Option<i32>,
    #[serde(
        rename = "testPlanId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_plan_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
    #[serde(
        rename = "testRunStatistics",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub test_run_statistics: Vec<LegacyTestRunStatistic>,
    #[serde(
        rename = "testSettingsId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_settings_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(
        rename = "totalTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_tests: Option<i32>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(
        rename = "unanalyzedTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unanalyzed_tests: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LegacyTestRunStatistic {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<String>,
    #[serde(
        rename = "resolutionState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resolution_state: Option<TestResolutionState>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LegacyTestSettings {
    #[serde(rename = "areaId", default, skip_serializing_if = "Option::is_none")]
    pub area_id: Option<i32>,
    #[serde(rename = "areaPath", default, skip_serializing_if = "Option::is_none")]
    pub area_path: Option<String>,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    #[serde(
        rename = "createdByName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_by_name: Option<String>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "isAutomated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_automated: Option<bool>,
    #[serde(rename = "isPublic", default, skip_serializing_if = "Option::is_none")]
    pub is_public: Option<bool>,
    #[serde(
        rename = "lastUpdated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated: Option<String>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<String>,
    #[serde(
        rename = "lastUpdatedByName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by_name: Option<String>,
    #[serde(
        rename = "machineRoles",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub machine_roles: Vec<TestSettingsMachineRole>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<String>,
    #[serde(
        rename = "teamProjectUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_project_uri: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LineBlockCoverage {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LinkedWorkItemsQuery {
    #[serde(
        rename = "automatedTestNames",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub automated_test_names: Vec<String>,
    #[serde(rename = "planId", default, skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<i32>,
    #[serde(rename = "pointIds", default, skip_serializing_if = "Vec::is_empty")]
    pub point_ids: Vec<i32>,
    #[serde(rename = "suiteIds", default, skip_serializing_if = "Vec::is_empty")]
    pub suite_ids: Vec<i32>,
    #[serde(rename = "testCaseIds", default, skip_serializing_if = "Vec::is_empty")]
    pub test_case_ids: Vec<i32>,
    #[serde(
        rename = "workItemCategory",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_category: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LinkedWorkItemsQueryResult {
    #[serde(
        rename = "automatedTestName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_name: Option<String>,
    #[serde(rename = "planId", default, skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<i32>,
    #[serde(rename = "pointId", default, skip_serializing_if = "Option::is_none")]
    pub point_id: Option<i32>,
    #[serde(rename = "suiteId", default, skip_serializing_if = "Option::is_none")]
    pub suite_id: Option<i32>,
    #[serde(
        rename = "testCaseId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_id: Option<i32>,
    #[serde(rename = "workItems", default, skip_serializing_if = "Vec::is_empty")]
    pub work_items: Vec<WorkItemReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModuleCoverage {
    #[serde(
        rename = "blockCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub block_count: Option<i32>,
    #[serde(rename = "blockData", default, skip_serializing_if = "Vec::is_empty")]
    pub block_data: Vec<String>,
    #[serde(rename = "fileUrl", default, skip_serializing_if = "Option::is_none")]
    pub file_url: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub functions: Vec<FunctionCoverage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub signature: Option<String>,
    #[serde(
        rename = "signatureAge",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub signature_age: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statistics: Option<CoverageStatistics>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModuleCoverage2 {
    #[serde(
        rename = "blockCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub block_count: Option<i32>,
    #[serde(rename = "blockData", default, skip_serializing_if = "Vec::is_empty")]
    pub block_data: Vec<String>,
    #[serde(
        rename = "blockDataLength",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub block_data_length: Option<i32>,
    #[serde(
        rename = "blocksCovered",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub blocks_covered: Option<i32>,
    #[serde(
        rename = "blocksNotCovered",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub blocks_not_covered: Option<i32>,
    #[serde(
        rename = "coverageFileUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub coverage_file_url: Option<String>,
    #[serde(
        rename = "coverageId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub coverage_id: Option<i32>,
    #[serde(
        rename = "linesCovered",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub lines_covered: Option<i32>,
    #[serde(
        rename = "linesNotCovered",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub lines_not_covered: Option<i32>,
    #[serde(
        rename = "linesPartiallyCovered",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub lines_partially_covered: Option<i32>,
    #[serde(rename = "moduleId", default, skip_serializing_if = "Option::is_none")]
    pub module_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub signature: Option<String>,
    #[serde(
        rename = "signatureAge",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub signature_age: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NameValuePair {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NewTestResultLoggingSettings {
    #[serde(
        rename = "logNewTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub log_new_tests: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PhaseReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(rename = "phaseName", default, skip_serializing_if = "Option::is_none")]
    pub phase_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelineReference {
    #[serde(
        rename = "jobReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub job_reference: Option<JobReference>,
    #[serde(
        rename = "phaseReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub phase_reference: Option<PhaseReference>,
    #[serde(
        rename = "pipelineId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pipeline_id: Option<i32>,
    #[serde(
        rename = "stageReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub stage_reference: Option<StageReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PipelineTestMetrics {
    #[serde(
        rename = "currentContext",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub current_context: Option<PipelineReference>,
    #[serde(
        rename = "resultsAnalysis",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub results_analysis: Option<ResultsAnalysis>,
    #[serde(
        rename = "resultSummary",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_summary: Option<ResultSummary>,
    #[serde(
        rename = "runSummary",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_summary: Option<RunSummary>,
    #[serde(
        rename = "summaryAtChild",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub summary_at_child: Vec<PipelineTestMetrics>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlanUpdateModel {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub area: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<ShallowReference>,
    #[serde(
        rename = "buildDefinition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_definition: Option<ShallowReference>,
    #[serde(
        rename = "configurationIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub configuration_ids: Vec<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "endDate", default, skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iteration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IdentityRef>,
    #[serde(
        rename = "releaseEnvironmentDefinition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_environment_definition: Option<ReleaseEnvironmentDefinitionReference>,
    #[serde(rename = "startDate", default, skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(
        rename = "testOutcomeSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_outcome_settings: Option<TestOutcomeSettings>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PointAssignment {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tester: Option<IdentityRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PointLastResult {
    #[serde(
        rename = "lastUpdatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_date: Option<String>,
    #[serde(rename = "pointId", default, skip_serializing_if = "Option::is_none")]
    pub point_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PointsFilter {
    #[serde(
        rename = "configurationNames",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub configuration_names: Vec<String>,
    #[serde(rename = "testcaseIds", default, skip_serializing_if = "Vec::is_empty")]
    pub testcase_ids: Vec<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub testers: Vec<IdentityRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PointsReference2 {
    #[serde(rename = "planId", default, skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<i32>,
    #[serde(rename = "pointId", default, skip_serializing_if = "Option::is_none")]
    pub point_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PointsResults2 {
    #[serde(
        rename = "changeNumber",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub change_number: Option<i32>,
    #[serde(
        rename = "lastFailureType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_failure_type: Option<String>,
    #[serde(
        rename = "lastResolutionStateId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_resolution_state_id: Option<i32>,
    #[serde(
        rename = "lastResultOutcome",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_result_outcome: Option<String>,
    #[serde(
        rename = "lastResultState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_result_state: Option<String>,
    #[serde(
        rename = "lastTestResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_test_result_id: Option<i32>,
    #[serde(
        rename = "lastTestRunId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_test_run_id: Option<i32>,
    #[serde(
        rename = "lastUpdated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated: Option<String>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<String>,
    #[serde(rename = "planId", default, skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<i32>,
    #[serde(rename = "pointId", default, skip_serializing_if = "Option::is_none")]
    pub point_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PointUpdateModel {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<String>,
    #[serde(
        rename = "resetToActive",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reset_to_active: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tester: Option<IdentityRef>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PointWorkItemProperty {
    #[serde(rename = "workItem", default, skip_serializing_if = "Option::is_none")]
    pub work_item: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PropertyBag {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bag: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryByPointRequest {
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
    #[serde(
        rename = "testPlanId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_plan_id: Option<i32>,
    #[serde(
        rename = "testPointId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_point_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryByRunRequest {
    #[serde(
        rename = "includeActionResults",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_action_results: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(rename = "pageSize", default, skip_serializing_if = "Option::is_none")]
    pub page_size: Option<i32>,
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryModel {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub query: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryTestActionResultRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<LegacyTestCaseResultIdentifier>,
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryTestActionResultResponse {
    #[serde(
        rename = "testActionResults",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub test_action_results: Vec<TestActionResult>,
    #[serde(
        rename = "testAttachments",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub test_attachments: Vec<TestResultAttachment>,
    #[serde(
        rename = "testResultParameters",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub test_result_parameters: Vec<TestResultParameter>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryTestMessageLogEntryRequest {
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
    #[serde(
        rename = "testMessageLogId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_message_log_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryTestRuns2Request {
    #[serde(
        rename = "includeStatistics",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub include_statistics: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub query: Option<ResultsStoreQuery>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryTestRunsRequest {
    #[serde(rename = "buildUri", default, skip_serializing_if = "Option::is_none")]
    pub build_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(rename = "planId", default, skip_serializing_if = "Option::is_none")]
    pub plan_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub skip: Option<i32>,
    #[serde(
        rename = "teamProjectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_project_name: Option<String>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub top: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryTestRunStatsRequest {
    #[serde(
        rename = "teamProjectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_project_name: Option<String>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseEnvironmentDefinitionReference {
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<i32>,
    #[serde(
        rename = "environmentDefinitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_definition_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(
        rename = "definitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub definition_id: Option<i32>,
    #[serde(
        rename = "environmentCreationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_creation_date: Option<String>,
    #[serde(
        rename = "environmentDefinitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_definition_id: Option<i32>,
    #[serde(
        rename = "environmentDefinitionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_definition_name: Option<String>,
    #[serde(
        rename = "environmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_id: Option<i32>,
    #[serde(
        rename = "environmentName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReleaseReference2 {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(
        rename = "environmentCreationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_creation_date: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(
        rename = "releaseCreationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_creation_date: Option<String>,
    #[serde(
        rename = "releaseDefId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_def_id: Option<i32>,
    #[serde(
        rename = "releaseEnvDefId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_env_def_id: Option<i32>,
    #[serde(
        rename = "releaseEnvId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_env_id: Option<i32>,
    #[serde(
        rename = "releaseEnvName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_env_name: Option<String>,
    #[serde(
        rename = "releaseEnvUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_env_uri: Option<String>,
    #[serde(rename = "releaseId", default, skip_serializing_if = "Option::is_none")]
    pub release_id: Option<i32>,
    #[serde(
        rename = "releaseName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_name: Option<String>,
    #[serde(
        rename = "releaseRefId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_ref_id: Option<i32>,
    #[serde(
        rename = "releaseUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_uri: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RequirementsToTestsMapping2 {
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(rename = "deletedBy", default, skip_serializing_if = "Option::is_none")]
    pub deleted_by: Option<String>,
    #[serde(
        rename = "deletionDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub deletion_date: Option<String>,
    #[serde(
        rename = "isMigratedToWIT",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_migrated_to_wit: Option<bool>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(
        rename = "testMetadataId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_metadata_id: Option<i32>,
    #[serde(
        rename = "workItemId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub work_item_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResetTestResultsRequest {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub ids: Vec<LegacyTestCaseResultIdentifier>,
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Response {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<response::Status>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod response {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "continue")]
        Continue,
        #[serde(rename = "switchingProtocols")]
        SwitchingProtocols,
        #[serde(rename = "ok")]
        Ok,
        #[serde(rename = "created")]
        Created,
        #[serde(rename = "accepted")]
        Accepted,
        #[serde(rename = "nonAuthoritativeInformation")]
        NonAuthoritativeInformation,
        #[serde(rename = "noContent")]
        NoContent,
        #[serde(rename = "resetContent")]
        ResetContent,
        #[serde(rename = "partialContent")]
        PartialContent,
        #[serde(rename = "multipleChoices")]
        MultipleChoices,
        #[serde(rename = "ambiguous")]
        Ambiguous,
        #[serde(rename = "movedPermanently")]
        MovedPermanently,
        #[serde(rename = "moved")]
        Moved,
        #[serde(rename = "found")]
        Found,
        #[serde(rename = "redirect")]
        Redirect,
        #[serde(rename = "seeOther")]
        SeeOther,
        #[serde(rename = "redirectMethod")]
        RedirectMethod,
        #[serde(rename = "notModified")]
        NotModified,
        #[serde(rename = "useProxy")]
        UseProxy,
        #[serde(rename = "unused")]
        Unused,
        #[serde(rename = "temporaryRedirect")]
        TemporaryRedirect,
        #[serde(rename = "redirectKeepVerb")]
        RedirectKeepVerb,
        #[serde(rename = "badRequest")]
        BadRequest,
        #[serde(rename = "unauthorized")]
        Unauthorized,
        #[serde(rename = "paymentRequired")]
        PaymentRequired,
        #[serde(rename = "forbidden")]
        Forbidden,
        #[serde(rename = "notFound")]
        NotFound,
        #[serde(rename = "methodNotAllowed")]
        MethodNotAllowed,
        #[serde(rename = "notAcceptable")]
        NotAcceptable,
        #[serde(rename = "proxyAuthenticationRequired")]
        ProxyAuthenticationRequired,
        #[serde(rename = "requestTimeout")]
        RequestTimeout,
        #[serde(rename = "conflict")]
        Conflict,
        #[serde(rename = "gone")]
        Gone,
        #[serde(rename = "lengthRequired")]
        LengthRequired,
        #[serde(rename = "preconditionFailed")]
        PreconditionFailed,
        #[serde(rename = "requestEntityTooLarge")]
        RequestEntityTooLarge,
        #[serde(rename = "requestUriTooLong")]
        RequestUriTooLong,
        #[serde(rename = "unsupportedMediaType")]
        UnsupportedMediaType,
        #[serde(rename = "requestedRangeNotSatisfiable")]
        RequestedRangeNotSatisfiable,
        #[serde(rename = "expectationFailed")]
        ExpectationFailed,
        #[serde(rename = "upgradeRequired")]
        UpgradeRequired,
        #[serde(rename = "internalServerError")]
        InternalServerError,
        #[serde(rename = "notImplemented")]
        NotImplemented,
        #[serde(rename = "badGateway")]
        BadGateway,
        #[serde(rename = "serviceUnavailable")]
        ServiceUnavailable,
        #[serde(rename = "gatewayTimeout")]
        GatewayTimeout,
        #[serde(rename = "httpVersionNotSupported")]
        HttpVersionNotSupported,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResultRetentionSettings {
    #[serde(
        rename = "automatedResultsRetentionDuration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_results_retention_duration: Option<i32>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<IdentityRef>,
    #[serde(
        rename = "lastUpdatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_date: Option<String>,
    #[serde(
        rename = "manualResultsRetentionDuration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub manual_results_retention_duration: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResultsAnalysis {
    #[serde(
        rename = "previousContext",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub previous_context: Option<PipelineReference>,
    #[serde(
        rename = "resultsDifference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub results_difference: Option<AggregatedResultsDifference>,
    #[serde(
        rename = "testFailuresAnalysis",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_failures_analysis: Option<TestResultFailuresAnalysis>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResultsByQueryRequest {
    #[serde(rename = "pageSize", default, skip_serializing_if = "Option::is_none")]
    pub page_size: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub query: Option<ResultsStoreQuery>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResultsByQueryResponse {
    #[serde(rename = "excessIds", default, skip_serializing_if = "Vec::is_empty")]
    pub excess_ids: Vec<LegacyTestCaseResultIdentifier>,
    #[serde(rename = "testResults", default, skip_serializing_if = "Vec::is_empty")]
    pub test_results: Vec<LegacyTestCaseResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResultsFilter {
    #[serde(
        rename = "automatedTestName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branch: Option<String>,
    #[serde(
        rename = "executedIn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub executed_in: Option<results_filter::ExecutedIn>,
    #[serde(rename = "groupBy", default, skip_serializing_if = "Option::is_none")]
    pub group_by: Option<String>,
    #[serde(
        rename = "maxCompleteDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_complete_date: Option<String>,
    #[serde(
        rename = "resultsCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub results_count: Option<i32>,
    #[serde(
        rename = "testCaseId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_id: Option<i32>,
    #[serde(
        rename = "testCaseReferenceIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub test_case_reference_ids: Vec<i32>,
    #[serde(
        rename = "testPlanId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_plan_id: Option<i32>,
    #[serde(
        rename = "testPointIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub test_point_ids: Vec<i32>,
    #[serde(
        rename = "testResultsContext",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_results_context: Option<TestResultsContext>,
    #[serde(rename = "trendDays", default, skip_serializing_if = "Option::is_none")]
    pub trend_days: Option<i32>,
}
pub mod results_filter {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ExecutedIn {
        #[serde(rename = "any")]
        Any,
        #[serde(rename = "tcm")]
        Tcm,
        #[serde(rename = "tfs")]
        Tfs,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResultsStoreQuery {
    #[serde(
        rename = "dayPrecision",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub day_precision: Option<bool>,
    #[serde(rename = "queryText", default, skip_serializing_if = "Option::is_none")]
    pub query_text: Option<String>,
    #[serde(
        rename = "teamProjectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_project_name: Option<String>,
    #[serde(rename = "timeZone", default, skip_serializing_if = "Option::is_none")]
    pub time_zone: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResultsSummaryByOutcome {
    #[serde(
        rename = "aggregatedResultDetailsByOutcome",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub aggregated_result_details_by_outcome: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(
        rename = "notReportedTestCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub not_reported_test_count: Option<i32>,
    #[serde(
        rename = "totalTestCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_test_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResultSummary {
    #[serde(
        rename = "resultSummaryByRunState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_summary_by_run_state: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResultUpdateRequest {
    #[serde(
        rename = "actionResultDeletes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub action_result_deletes: Vec<TestActionResult>,
    #[serde(
        rename = "actionResults",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub action_results: Vec<TestActionResult>,
    #[serde(
        rename = "attachmentDeletes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub attachment_deletes: Vec<TestResultAttachmentIdentity>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub attachments: Vec<TestResultAttachment>,
    #[serde(
        rename = "parameterDeletes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub parameter_deletes: Vec<TestResultParameter>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub parameters: Vec<TestResultParameter>,
    #[serde(
        rename = "testCaseResult",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_result: Option<LegacyTestCaseResult>,
    #[serde(
        rename = "testResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResultUpdateRequestModel {
    #[serde(
        rename = "actionResultDeletes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub action_result_deletes: Vec<TestActionResultModel>,
    #[serde(
        rename = "actionResults",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub action_results: Vec<TestActionResultModel>,
    #[serde(
        rename = "parameterDeletes",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub parameter_deletes: Vec<TestResultParameterModel>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub parameters: Vec<TestResultParameterModel>,
    #[serde(
        rename = "testCaseResult",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_result: Option<TestCaseResultUpdateModel>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResultUpdateResponse {
    #[serde(
        rename = "attachmentIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub attachment_ids: Vec<i32>,
    #[serde(
        rename = "lastUpdated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated: Option<String>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<String>,
    #[serde(
        rename = "lastUpdatedByName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by_name: Option<String>,
    #[serde(
        rename = "maxReservedSubResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_reserved_sub_result_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(
        rename = "testPlanId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_plan_id: Option<i32>,
    #[serde(
        rename = "testResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResultUpdateResponseModel {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunCreateModel {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<ShallowReference>,
    #[serde(
        rename = "buildDropLocation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_drop_location: Option<String>,
    #[serde(
        rename = "buildFlavor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_flavor: Option<String>,
    #[serde(
        rename = "buildPlatform",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_platform: Option<String>,
    #[serde(
        rename = "buildReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_reference: Option<BuildConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "completeDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub complete_date: Option<String>,
    #[serde(
        rename = "configurationIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub configuration_ids: Vec<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller: Option<String>,
    #[serde(
        rename = "customTestFields",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub custom_test_fields: Vec<CustomTestField>,
    #[serde(
        rename = "dtlAutEnvironment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub dtl_aut_environment: Option<ShallowReference>,
    #[serde(
        rename = "dtlTestEnvironment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub dtl_test_environment: Option<ShallowReference>,
    #[serde(rename = "dueDate", default, skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    #[serde(
        rename = "environmentDetails",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_details: Option<DtlEnvironmentDetails>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<RunFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iteration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IdentityRef>,
    #[serde(
        rename = "pipelineReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pipeline_reference: Option<PipelineReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan: Option<ShallowReference>,
    #[serde(rename = "pointIds", default, skip_serializing_if = "Vec::is_empty")]
    pub point_ids: Vec<i32>,
    #[serde(
        rename = "releaseEnvironmentUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_environment_uri: Option<String>,
    #[serde(
        rename = "releaseReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_reference: Option<ReleaseReference>,
    #[serde(
        rename = "releaseUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_uri: Option<String>,
    #[serde(rename = "runSummary", default, skip_serializing_if = "Vec::is_empty")]
    pub run_summary: Vec<RunSummaryModel>,
    #[serde(
        rename = "runTimeout",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_timeout: Option<String>,
    #[serde(
        rename = "sourceWorkflow",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_workflow: Option<String>,
    #[serde(rename = "startDate", default, skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<TestTag>,
    #[serde(
        rename = "testConfigurationsMapping",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_configurations_mapping: Option<String>,
    #[serde(
        rename = "testEnvironmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_environment_id: Option<String>,
    #[serde(
        rename = "testSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_settings: Option<ShallowReference>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunFilter {
    #[serde(
        rename = "sourceFilter",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_filter: Option<String>,
    #[serde(
        rename = "testCaseFilter",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_filter: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunStatistic {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<String>,
    #[serde(
        rename = "resolutionState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resolution_state: Option<TestResolutionState>,
    #[serde(
        rename = "resultMetadata",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_metadata: Option<run_statistic::ResultMetadata>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}
pub mod run_statistic {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ResultMetadata {
        #[serde(rename = "rerun")]
        Rerun,
        #[serde(rename = "flaky")]
        Flaky,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunSummary {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(
        rename = "noConfigRunsCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub no_config_runs_count: Option<i32>,
    #[serde(
        rename = "runSummaryByOutcome",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_summary_by_outcome: Option<serde_json::Value>,
    #[serde(
        rename = "runSummaryByState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_summary_by_state: Option<serde_json::Value>,
    #[serde(
        rename = "totalRunsCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_runs_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunSummaryModel {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<i64>,
    #[serde(
        rename = "resultCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_count: Option<i32>,
    #[serde(
        rename = "testOutcome",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_outcome: Option<run_summary_model::TestOutcome>,
}
pub mod run_summary_model {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum TestOutcome {
        #[serde(rename = "unspecified")]
        Unspecified,
        #[serde(rename = "none")]
        None,
        #[serde(rename = "passed")]
        Passed,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "inconclusive")]
        Inconclusive,
        #[serde(rename = "timeout")]
        Timeout,
        #[serde(rename = "aborted")]
        Aborted,
        #[serde(rename = "blocked")]
        Blocked,
        #[serde(rename = "notExecuted")]
        NotExecuted,
        #[serde(rename = "warning")]
        Warning,
        #[serde(rename = "error")]
        Error,
        #[serde(rename = "notApplicable")]
        NotApplicable,
        #[serde(rename = "paused")]
        Paused,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "notImpacted")]
        NotImpacted,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunUpdateModel {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<ShallowReference>,
    #[serde(
        rename = "buildDropLocation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_drop_location: Option<String>,
    #[serde(
        rename = "buildFlavor",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_flavor: Option<String>,
    #[serde(
        rename = "buildPlatform",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_platform: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "completedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completed_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller: Option<String>,
    #[serde(
        rename = "deleteInProgressResults",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub delete_in_progress_results: Option<bool>,
    #[serde(
        rename = "dtlAutEnvironment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub dtl_aut_environment: Option<ShallowReference>,
    #[serde(
        rename = "dtlEnvironment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub dtl_environment: Option<ShallowReference>,
    #[serde(
        rename = "dtlEnvironmentDetails",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub dtl_environment_details: Option<DtlEnvironmentDetails>,
    #[serde(rename = "dueDate", default, skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iteration: Option<String>,
    #[serde(rename = "logEntries", default, skip_serializing_if = "Vec::is_empty")]
    pub log_entries: Vec<TestMessageLogDetails>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "releaseEnvironmentUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_environment_uri: Option<String>,
    #[serde(
        rename = "releaseUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_uri: Option<String>,
    #[serde(rename = "runSummary", default, skip_serializing_if = "Vec::is_empty")]
    pub run_summary: Vec<RunSummaryModel>,
    #[serde(
        rename = "sourceWorkflow",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_workflow: Option<String>,
    #[serde(
        rename = "startedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub started_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub substate: Option<run_update_model::Substate>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<TestTag>,
    #[serde(
        rename = "testEnvironmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_environment_id: Option<String>,
    #[serde(
        rename = "testSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_settings: Option<ShallowReference>,
}
pub mod run_update_model {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Substate {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "creatingEnvironment")]
        CreatingEnvironment,
        #[serde(rename = "runningTests")]
        RunningTests,
        #[serde(rename = "canceledByUser")]
        CanceledByUser,
        #[serde(rename = "abortedBySystem")]
        AbortedBySystem,
        #[serde(rename = "timedOut")]
        TimedOut,
        #[serde(rename = "pendingAnalysis")]
        PendingAnalysis,
        #[serde(rename = "analyzed")]
        Analyzed,
        #[serde(rename = "cancellationInProgress")]
        CancellationInProgress,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShallowReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShallowTestCaseResult {
    #[serde(
        rename = "automatedTestName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_name: Option<String>,
    #[serde(
        rename = "automatedTestStorage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_storage: Option<String>,
    #[serde(
        rename = "durationInMs",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub duration_in_ms: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "isReRun", default, skip_serializing_if = "Option::is_none")]
    pub is_re_run: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    #[serde(rename = "refId", default, skip_serializing_if = "Option::is_none")]
    pub ref_id: Option<i32>,
    #[serde(rename = "runId", default, skip_serializing_if = "Option::is_none")]
    pub run_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
    #[serde(
        rename = "testCaseTitle",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_title: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SharedStepModel {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StageReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    #[serde(rename = "stageName", default, skip_serializing_if = "Option::is_none")]
    pub stage_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SuiteCreateModel {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "queryString",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub query_string: Option<String>,
    #[serde(
        rename = "requirementIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub requirement_ids: Vec<i32>,
    #[serde(rename = "suiteType", default, skip_serializing_if = "Option::is_none")]
    pub suite_type: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SuiteEntry {
    #[serde(
        rename = "childSuiteId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub child_suite_id: Option<i32>,
    #[serde(
        rename = "sequenceNumber",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sequence_number: Option<i32>,
    #[serde(rename = "suiteId", default, skip_serializing_if = "Option::is_none")]
    pub suite_id: Option<i32>,
    #[serde(
        rename = "testCaseId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SuiteEntryUpdateModel {
    #[serde(
        rename = "childSuiteId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub child_suite_id: Option<i32>,
    #[serde(
        rename = "sequenceNumber",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sequence_number: Option<i32>,
    #[serde(
        rename = "testCaseId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SuiteTestCase {
    #[serde(
        rename = "pointAssignments",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub point_assignments: Vec<PointAssignment>,
    #[serde(rename = "testCase", default, skip_serializing_if = "Option::is_none")]
    pub test_case: Option<WorkItemReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SuiteTestCaseUpdateModel {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub configurations: Vec<ShallowReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SuiteUpdateModel {
    #[serde(
        rename = "defaultConfigurations",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub default_configurations: Vec<ShallowReference>,
    #[serde(
        rename = "defaultTesters",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub default_testers: Vec<ShallowReference>,
    #[serde(
        rename = "inheritDefaultConfigurations",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub inherit_default_configurations: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<ShallowReference>,
    #[serde(
        rename = "queryString",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub query_string: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TcmPropertyBag2 {
    #[serde(
        rename = "artifactId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_id: Option<i32>,
    #[serde(
        rename = "artifactType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub artifact_type: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamContext {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub team: Option<String>,
    #[serde(rename = "teamId", default, skip_serializing_if = "Option::is_none")]
    pub team_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamProjectReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub abbreviation: Option<String>,
    #[serde(
        rename = "defaultTeamImageUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_team_image_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "lastUpdateTime",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_update_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<team_project_reference::State>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub visibility: Option<team_project_reference::Visibility>,
}
pub mod team_project_reference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "deleting")]
        Deleting,
        #[serde(rename = "new")]
        New,
        #[serde(rename = "wellFormed")]
        WellFormed,
        #[serde(rename = "createPending")]
        CreatePending,
        #[serde(rename = "all")]
        All,
        #[serde(rename = "unchanged")]
        Unchanged,
        #[serde(rename = "deleted")]
        Deleted,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Visibility {
        #[serde(rename = "private")]
        Private,
        #[serde(rename = "public")]
        Public,
        #[serde(rename = "organization")]
        Organization,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestActionResult {
    #[serde(
        rename = "actionPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub action_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(
        rename = "dateCompleted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_completed: Option<String>,
    #[serde(
        rename = "dateStarted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_started: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<i64>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<LegacyTestCaseResultIdentifier>,
    #[serde(
        rename = "iterationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub iteration_id: Option<i32>,
    #[serde(
        rename = "lastUpdated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated: Option<String>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<String>,
    #[serde(
        rename = "sharedStepId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub shared_step_id: Option<i32>,
    #[serde(
        rename = "sharedStepRevision",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub shared_step_revision: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestActionResult2 {
    #[serde(
        rename = "actionPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub action_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(
        rename = "dateCompleted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_completed: Option<String>,
    #[serde(
        rename = "dateStarted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_started: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<i64>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(
        rename = "iterationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub iteration_id: Option<i32>,
    #[serde(
        rename = "lastUpdated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<String>,
    #[serde(
        rename = "sharedStepId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub shared_step_id: Option<i32>,
    #[serde(
        rename = "sharedStepRevision",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub shared_step_revision: Option<i32>,
    #[serde(
        rename = "testResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestActionResultModel {
    #[serde(flatten)]
    pub test_result_model_base: TestResultModelBase,
    #[serde(
        rename = "actionPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub action_path: Option<String>,
    #[serde(
        rename = "iterationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub iteration_id: Option<i32>,
    #[serde(
        rename = "sharedStepModel",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub shared_step_model: Option<SharedStepModel>,
    #[serde(
        rename = "stepIdentifier",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub step_identifier: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestAttachment {
    #[serde(
        rename = "attachmentType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub attachment_type: Option<test_attachment::AttachmentType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(rename = "fileName", default, skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod test_attachment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AttachmentType {
        #[serde(rename = "generalAttachment")]
        GeneralAttachment,
        #[serde(rename = "codeCoverage")]
        CodeCoverage,
        #[serde(rename = "consoleLog")]
        ConsoleLog,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestAttachmentReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestAttachmentRequestModel {
    #[serde(
        rename = "attachmentType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub attachment_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "fileName", default, skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stream: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestAuthoringDetails {
    #[serde(
        rename = "configurationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub configuration_id: Option<i32>,
    #[serde(
        rename = "isAutomated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_automated: Option<bool>,
    #[serde(
        rename = "lastUpdated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated: Option<String>,
    #[serde(rename = "pointId", default, skip_serializing_if = "Option::is_none")]
    pub point_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<String>,
    #[serde(rename = "runBy", default, skip_serializing_if = "Option::is_none")]
    pub run_by: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<test_authoring_details::State>,
    #[serde(rename = "suiteId", default, skip_serializing_if = "Option::is_none")]
    pub suite_id: Option<i32>,
    #[serde(rename = "testerId", default, skip_serializing_if = "Option::is_none")]
    pub tester_id: Option<String>,
}
pub mod test_authoring_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "ready")]
        Ready,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "notReady")]
        NotReady,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "maxValue")]
        MaxValue,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestCaseMetadata2 {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(
        rename = "testMetadataId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_metadata_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestCaseReference2 {
    #[serde(rename = "areaId", default, skip_serializing_if = "Option::is_none")]
    pub area_id: Option<i32>,
    #[serde(
        rename = "automatedTestId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_id: Option<String>,
    #[serde(
        rename = "automatedTestName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_name: Option<String>,
    #[serde(
        rename = "automatedTestNameHash",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub automated_test_name_hash: Vec<String>,
    #[serde(
        rename = "automatedTestStorage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_storage: Option<String>,
    #[serde(
        rename = "automatedTestStorageHash",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub automated_test_storage_hash: Vec<String>,
    #[serde(
        rename = "automatedTestType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_type: Option<String>,
    #[serde(
        rename = "configurationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub configuration_id: Option<i32>,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(
        rename = "lastRefTestRunDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_ref_test_run_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(
        rename = "testCaseId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_id: Option<i32>,
    #[serde(
        rename = "testCaseRefId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_ref_id: Option<i32>,
    #[serde(
        rename = "testCaseRevision",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_revision: Option<i32>,
    #[serde(
        rename = "testCaseTitle",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_title: Option<String>,
    #[serde(
        rename = "testPointId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_point_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestCaseResult {
    #[serde(
        rename = "afnStripId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub afn_strip_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub area: Option<ShallowReference>,
    #[serde(
        rename = "associatedBugs",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub associated_bugs: Vec<ShallowReference>,
    #[serde(
        rename = "automatedTestId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_id: Option<String>,
    #[serde(
        rename = "automatedTestName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_name: Option<String>,
    #[serde(
        rename = "automatedTestStorage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_storage: Option<String>,
    #[serde(
        rename = "automatedTestType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_type: Option<String>,
    #[serde(
        rename = "automatedTestTypeId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_type_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<ShallowReference>,
    #[serde(
        rename = "buildReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_reference: Option<BuildReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "completedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completed_date: Option<String>,
    #[serde(
        rename = "computerName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub computer_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<ShallowReference>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(
        rename = "customFields",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub custom_fields: Vec<CustomTestField>,
    #[serde(
        rename = "durationInMs",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub duration_in_ms: Option<f64>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(
        rename = "failingSince",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub failing_since: Option<FailingSince>,
    #[serde(
        rename = "failureType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub failure_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "iterationDetails",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub iteration_details: Vec<TestIterationDetailsModel>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<IdentityRef>,
    #[serde(
        rename = "lastUpdatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<ShallowReference>,
    #[serde(
        rename = "releaseReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_reference: Option<ReleaseReference>,
    #[serde(
        rename = "resetCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reset_count: Option<i32>,
    #[serde(
        rename = "resolutionState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resolution_state: Option<String>,
    #[serde(
        rename = "resolutionStateId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resolution_state_id: Option<i32>,
    #[serde(
        rename = "resultGroupType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_group_type: Option<test_case_result::ResultGroupType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(rename = "runBy", default, skip_serializing_if = "Option::is_none")]
    pub run_by: Option<IdentityRef>,
    #[serde(
        rename = "stackTrace",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub stack_trace: Option<String>,
    #[serde(
        rename = "startedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub started_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "subResults", default, skip_serializing_if = "Vec::is_empty")]
    pub sub_results: Vec<TestSubResult>,
    #[serde(rename = "testCase", default, skip_serializing_if = "Option::is_none")]
    pub test_case: Option<ShallowReference>,
    #[serde(
        rename = "testCaseReferenceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_reference_id: Option<i32>,
    #[serde(
        rename = "testCaseRevision",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_revision: Option<i32>,
    #[serde(
        rename = "testCaseTitle",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_title: Option<String>,
    #[serde(rename = "testPlan", default, skip_serializing_if = "Option::is_none")]
    pub test_plan: Option<ShallowReference>,
    #[serde(rename = "testPoint", default, skip_serializing_if = "Option::is_none")]
    pub test_point: Option<ShallowReference>,
    #[serde(rename = "testRun", default, skip_serializing_if = "Option::is_none")]
    pub test_run: Option<ShallowReference>,
    #[serde(rename = "testSuite", default, skip_serializing_if = "Option::is_none")]
    pub test_suite: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod test_case_result {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ResultGroupType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "rerun")]
        Rerun,
        #[serde(rename = "dataDriven")]
        DataDriven,
        #[serde(rename = "orderedTest")]
        OrderedTest,
        #[serde(rename = "generic")]
        Generic,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestCaseResultAttachmentModel {
    #[serde(
        rename = "actionPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub action_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "iterationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub iteration_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestCaseResultIdAndRev {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<LegacyTestCaseResultIdentifier>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestCaseResultIdentifier {
    #[serde(
        rename = "testResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestCaseResultUpdateModel {
    #[serde(
        rename = "associatedWorkItems",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub associated_work_items: Vec<i32>,
    #[serde(
        rename = "automatedTestTypeId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_type_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "completedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completed_date: Option<String>,
    #[serde(
        rename = "computerName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub computer_name: Option<String>,
    #[serde(
        rename = "customFields",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub custom_fields: Vec<CustomTestField>,
    #[serde(
        rename = "durationInMs",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub duration_in_ms: Option<String>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(
        rename = "failureType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub failure_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IdentityRef>,
    #[serde(
        rename = "resolutionState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resolution_state: Option<String>,
    #[serde(rename = "runBy", default, skip_serializing_if = "Option::is_none")]
    pub run_by: Option<IdentityRef>,
    #[serde(
        rename = "stackTrace",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub stack_trace: Option<String>,
    #[serde(
        rename = "startedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub started_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(
        rename = "testCasePriority",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_priority: Option<String>,
    #[serde(
        rename = "testResult",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result: Option<ShallowReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestConfiguration {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub area: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "isDefault", default, skip_serializing_if = "Option::is_none")]
    pub is_default: Option<bool>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<IdentityRef>,
    #[serde(
        rename = "lastUpdatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<test_configuration::State>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub values: Vec<NameValuePair>,
}
pub mod test_configuration {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "active")]
        Active,
        #[serde(rename = "inactive")]
        Inactive,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestEnvironment {
    #[serde(
        rename = "environmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_id: Option<String>,
    #[serde(
        rename = "environmentName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestExecutionReportData {
    #[serde(rename = "reportData", default, skip_serializing_if = "Vec::is_empty")]
    pub report_data: Vec<DatedTestFieldData>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestExtensionField {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub field: Option<TestExtensionFieldDetails>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestExtensionFieldDetails {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "isResultScoped",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_result_scoped: Option<bool>,
    #[serde(
        rename = "isRunScoped",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_run_scoped: Option<bool>,
    #[serde(
        rename = "isSystemField",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_system_field: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<test_extension_field_details::Type>,
}
pub mod test_extension_field_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "bigInt")]
        BigInt,
        #[serde(rename = "binary")]
        Binary,
        #[serde(rename = "bit")]
        Bit,
        #[serde(rename = "char")]
        Char,
        #[serde(rename = "dateTime")]
        DateTime,
        #[serde(rename = "decimal")]
        Decimal,
        #[serde(rename = "float")]
        Float,
        #[serde(rename = "image")]
        Image,
        #[serde(rename = "int")]
        Int,
        #[serde(rename = "money")]
        Money,
        #[serde(rename = "nChar")]
        NChar,
        #[serde(rename = "nText")]
        NText,
        #[serde(rename = "nVarChar")]
        NVarChar,
        #[serde(rename = "real")]
        Real,
        #[serde(rename = "uniqueIdentifier")]
        UniqueIdentifier,
        #[serde(rename = "smallDateTime")]
        SmallDateTime,
        #[serde(rename = "smallInt")]
        SmallInt,
        #[serde(rename = "smallMoney")]
        SmallMoney,
        #[serde(rename = "text")]
        Text,
        #[serde(rename = "timestamp")]
        Timestamp,
        #[serde(rename = "tinyInt")]
        TinyInt,
        #[serde(rename = "varBinary")]
        VarBinary,
        #[serde(rename = "varChar")]
        VarChar,
        #[serde(rename = "variant")]
        Variant,
        #[serde(rename = "xml")]
        Xml,
        #[serde(rename = "udt")]
        Udt,
        #[serde(rename = "structured")]
        Structured,
        #[serde(rename = "date")]
        Date,
        #[serde(rename = "time")]
        Time,
        #[serde(rename = "dateTime2")]
        DateTime2,
        #[serde(rename = "dateTimeOffset")]
        DateTimeOffset,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestFailureDetails {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(rename = "testResults", default, skip_serializing_if = "Vec::is_empty")]
    pub test_results: Vec<TestCaseResultIdentifier>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestFailuresAnalysis {
    #[serde(
        rename = "existingFailures",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub existing_failures: Option<TestFailureDetails>,
    #[serde(
        rename = "fixedTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub fixed_tests: Option<TestFailureDetails>,
    #[serde(
        rename = "newFailures",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub new_failures: Option<TestFailureDetails>,
    #[serde(
        rename = "previousContext",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub previous_context: Option<TestResultsContext>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestFailureType {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ShallowReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestFieldData {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub measure: Option<i64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestFieldsEx2 {
    #[serde(rename = "fieldId", default, skip_serializing_if = "Option::is_none")]
    pub field_id: Option<i32>,
    #[serde(rename = "fieldName", default, skip_serializing_if = "Option::is_none")]
    pub field_name: Option<String>,
    #[serde(rename = "fieldType", default, skip_serializing_if = "Option::is_none")]
    pub field_type: Option<String>,
    #[serde(
        rename = "isResultScoped",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_result_scoped: Option<bool>,
    #[serde(
        rename = "isRunScoped",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_run_scoped: Option<bool>,
    #[serde(
        rename = "isSystemField",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_system_field: Option<bool>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestFlakyIdentifier {
    #[serde(
        rename = "branchName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub branch_name: Option<String>,
    #[serde(rename = "isFlaky", default, skip_serializing_if = "Option::is_none")]
    pub is_flaky: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestHistoryQuery {
    #[serde(
        rename = "automatedTestName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branch: Option<String>,
    #[serde(
        rename = "buildDefinitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_definition_id: Option<i32>,
    #[serde(
        rename = "continuationToken",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub continuation_token: Option<String>,
    #[serde(rename = "groupBy", default, skip_serializing_if = "Option::is_none")]
    pub group_by: Option<test_history_query::GroupBy>,
    #[serde(
        rename = "maxCompleteDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_complete_date: Option<String>,
    #[serde(
        rename = "releaseEnvDefinitionId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_env_definition_id: Option<i32>,
    #[serde(
        rename = "resultsForGroup",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub results_for_group: Vec<TestResultHistoryForGroup>,
    #[serde(
        rename = "testCaseId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_id: Option<i32>,
    #[serde(rename = "trendDays", default, skip_serializing_if = "Option::is_none")]
    pub trend_days: Option<i32>,
}
pub mod test_history_query {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum GroupBy {
        #[serde(rename = "branch")]
        Branch,
        #[serde(rename = "environment")]
        Environment,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestIterationDetailsModel {
    #[serde(
        rename = "actionResults",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub action_results: Vec<TestActionResultModel>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub attachments: Vec<TestCaseResultAttachmentModel>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "completedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completed_date: Option<String>,
    #[serde(
        rename = "durationInMs",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub duration_in_ms: Option<f64>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub parameters: Vec<TestResultParameterModel>,
    #[serde(
        rename = "startedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub started_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestLog {
    #[serde(
        rename = "logReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub log_reference: Option<TestLogReference>,
    #[serde(rename = "metaData", default, skip_serializing_if = "Option::is_none")]
    pub meta_data: Option<serde_json::Value>,
    #[serde(
        rename = "modifiedOn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub modified_on: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestLogReference {
    #[serde(rename = "buildId", default, skip_serializing_if = "Option::is_none")]
    pub build_id: Option<i32>,
    #[serde(rename = "filePath", default, skip_serializing_if = "Option::is_none")]
    pub file_path: Option<String>,
    #[serde(
        rename = "releaseEnvId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_env_id: Option<i32>,
    #[serde(rename = "releaseId", default, skip_serializing_if = "Option::is_none")]
    pub release_id: Option<i32>,
    #[serde(rename = "resultId", default, skip_serializing_if = "Option::is_none")]
    pub result_id: Option<i32>,
    #[serde(rename = "runId", default, skip_serializing_if = "Option::is_none")]
    pub run_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<test_log_reference::Scope>,
    #[serde(
        rename = "subResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sub_result_id: Option<i32>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<test_log_reference::Type>,
}
pub mod test_log_reference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Scope {
        #[serde(rename = "run")]
        Run,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Type {
        #[serde(rename = "generalAttachment")]
        GeneralAttachment,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestLogStatus {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exception: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<test_log_status::Status>,
    #[serde(
        rename = "transferFailureType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub transfer_failure_type: Option<String>,
}
pub mod test_log_status {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "success")]
        Success,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "fileAlreadyExists")]
        FileAlreadyExists,
        #[serde(rename = "invalidInput")]
        InvalidInput,
        #[serde(rename = "invalidFileName")]
        InvalidFileName,
        #[serde(rename = "invalidContainer")]
        InvalidContainer,
        #[serde(rename = "transferFailed")]
        TransferFailed,
        #[serde(rename = "featureDisabled")]
        FeatureDisabled,
        #[serde(rename = "buildDoesNotExist")]
        BuildDoesNotExist,
        #[serde(rename = "runDoesNotExist")]
        RunDoesNotExist,
        #[serde(rename = "containerNotCreated")]
        ContainerNotCreated,
        #[serde(rename = "apiNotSupported")]
        ApiNotSupported,
        #[serde(rename = "fileSizeExceeds")]
        FileSizeExceeds,
        #[serde(rename = "containerNotFound")]
        ContainerNotFound,
        #[serde(rename = "fileNotFound")]
        FileNotFound,
        #[serde(rename = "directoryNotFound")]
        DirectoryNotFound,
        #[serde(rename = "storageCapacityExceeded")]
        StorageCapacityExceeded,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestLogStoreEndpointDetails {
    #[serde(
        rename = "endpointSASUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub endpoint_sas_uri: Option<String>,
    #[serde(
        rename = "endpointType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub endpoint_type: Option<test_log_store_endpoint_details::EndpointType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<test_log_store_endpoint_details::Status>,
}
pub mod test_log_store_endpoint_details {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum EndpointType {
        #[serde(rename = "root")]
        Root,
        #[serde(rename = "file")]
        File,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Status {
        #[serde(rename = "success")]
        Success,
        #[serde(rename = "failed")]
        Failed,
        #[serde(rename = "fileAlreadyExists")]
        FileAlreadyExists,
        #[serde(rename = "invalidInput")]
        InvalidInput,
        #[serde(rename = "invalidFileName")]
        InvalidFileName,
        #[serde(rename = "invalidContainer")]
        InvalidContainer,
        #[serde(rename = "transferFailed")]
        TransferFailed,
        #[serde(rename = "featureDisabled")]
        FeatureDisabled,
        #[serde(rename = "buildDoesNotExist")]
        BuildDoesNotExist,
        #[serde(rename = "runDoesNotExist")]
        RunDoesNotExist,
        #[serde(rename = "containerNotCreated")]
        ContainerNotCreated,
        #[serde(rename = "apiNotSupported")]
        ApiNotSupported,
        #[serde(rename = "fileSizeExceeds")]
        FileSizeExceeds,
        #[serde(rename = "containerNotFound")]
        ContainerNotFound,
        #[serde(rename = "fileNotFound")]
        FileNotFound,
        #[serde(rename = "directoryNotFound")]
        DirectoryNotFound,
        #[serde(rename = "storageCapacityExceeded")]
        StorageCapacityExceeded,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestMessageLog2 {
    #[serde(
        rename = "testMessageLogId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_message_log_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestMessageLogDetails {
    #[serde(
        rename = "dateCreated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_created: Option<String>,
    #[serde(rename = "entryId", default, skip_serializing_if = "Option::is_none")]
    pub entry_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestMessageLogEntry {
    #[serde(
        rename = "dateCreated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_created: Option<String>,
    #[serde(rename = "entryId", default, skip_serializing_if = "Option::is_none")]
    pub entry_id: Option<i32>,
    #[serde(rename = "logLevel", default, skip_serializing_if = "Option::is_none")]
    pub log_level: Option<String>,
    #[serde(rename = "logUser", default, skip_serializing_if = "Option::is_none")]
    pub log_user: Option<String>,
    #[serde(
        rename = "logUserName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub log_user_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(
        rename = "testMessageLogId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_message_log_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestMessageLogEntry2 {
    #[serde(
        rename = "dateCreated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_created: Option<String>,
    #[serde(rename = "entryId", default, skip_serializing_if = "Option::is_none")]
    pub entry_id: Option<i32>,
    #[serde(rename = "logLevel", default, skip_serializing_if = "Option::is_none")]
    pub log_level: Option<String>,
    #[serde(rename = "logUser", default, skip_serializing_if = "Option::is_none")]
    pub log_user: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(
        rename = "testMessageLogId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_message_log_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestMethod {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestOperationReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestOutcomeSettings {
    #[serde(
        rename = "syncOutcomeAcrossSuites",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sync_outcome_across_suites: Option<bool>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestParameter2 {
    #[serde(
        rename = "actionPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub action_path: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub actual: Vec<String>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(rename = "dataType", default, skip_serializing_if = "Option::is_none")]
    pub data_type: Option<String>,
    #[serde(
        rename = "dateModified",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_modified: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub expected: Vec<String>,
    #[serde(
        rename = "iterationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub iteration_id: Option<i32>,
    #[serde(
        rename = "parameterName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub parameter_name: Option<String>,
    #[serde(
        rename = "testResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPlan {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub area: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<ShallowReference>,
    #[serde(
        rename = "buildDefinition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_definition: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "endDate", default, skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iteration: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IdentityRef>,
    #[serde(
        rename = "previousBuild",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub previous_build: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ShallowReference>,
    #[serde(
        rename = "releaseEnvironmentDefinition",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_environment_definition: Option<ReleaseEnvironmentDefinitionReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(rename = "rootSuite", default, skip_serializing_if = "Option::is_none")]
    pub root_suite: Option<ShallowReference>,
    #[serde(rename = "startDate", default, skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(
        rename = "testOutcomeSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_outcome_settings: Option<TestOutcomeSettings>,
    #[serde(rename = "updatedBy", default, skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<IdentityRef>,
    #[serde(
        rename = "updatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub updated_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPlanCloneRequest {
    #[serde(
        rename = "destinationTestPlan",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_test_plan: Option<TestPlan>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<CloneOptions>,
    #[serde(rename = "suiteIds", default, skip_serializing_if = "Vec::is_empty")]
    pub suite_ids: Vec<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPlanHubData {
    #[serde(
        rename = "selectedSuiteId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub selected_suite_id: Option<i32>,
    #[serde(rename = "testPlan", default, skip_serializing_if = "Option::is_none")]
    pub test_plan: Option<TestPlan>,
    #[serde(rename = "testPoints", default, skip_serializing_if = "Vec::is_empty")]
    pub test_points: Vec<TestPoint>,
    #[serde(rename = "testSuites", default, skip_serializing_if = "Vec::is_empty")]
    pub test_suites: Vec<TestSuite>,
    #[serde(
        rename = "totalTestPoints",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_test_points: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPlansWithSelection {
    #[serde(
        rename = "lastSelectedPlan",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_selected_plan: Option<i32>,
    #[serde(
        rename = "lastSelectedSuite",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_selected_suite: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub plans: Vec<TestPlan>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPoint {
    #[serde(
        rename = "assignedTo",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub assigned_to: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub automated: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<ShallowReference>,
    #[serde(
        rename = "failureType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub failure_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "lastResetToActive",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_reset_to_active: Option<String>,
    #[serde(
        rename = "lastResolutionStateId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_resolution_state_id: Option<i32>,
    #[serde(
        rename = "lastResult",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_result: Option<ShallowReference>,
    #[serde(
        rename = "lastResultDetails",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_result_details: Option<LastResultDetails>,
    #[serde(
        rename = "lastResultState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_result_state: Option<String>,
    #[serde(
        rename = "lastRunBuildNumber",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_run_build_number: Option<String>,
    #[serde(
        rename = "lastTestRun",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_test_run: Option<ShallowReference>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<IdentityRef>,
    #[serde(
        rename = "lastUpdatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suite: Option<ShallowReference>,
    #[serde(rename = "testCase", default, skip_serializing_if = "Option::is_none")]
    pub test_case: Option<WorkItemReference>,
    #[serde(rename = "testPlan", default, skip_serializing_if = "Option::is_none")]
    pub test_plan: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(
        rename = "workItemProperties",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub work_item_properties: Vec<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPointReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<test_point_reference::State>,
}
pub mod test_point_reference {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "ready")]
        Ready,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "notReady")]
        NotReady,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "maxValue")]
        MaxValue,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPointsEvent {
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
    #[serde(rename = "testPoints", default, skip_serializing_if = "Vec::is_empty")]
    pub test_points: Vec<TestPointReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPointsQuery {
    #[serde(rename = "orderBy", default, skip_serializing_if = "Option::is_none")]
    pub order_by: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub points: Vec<TestPoint>,
    #[serde(
        rename = "pointsFilter",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub points_filter: Option<PointsFilter>,
    #[serde(rename = "witFields", default, skip_serializing_if = "Vec::is_empty")]
    pub wit_fields: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPointsUpdatedEvent {
    #[serde(flatten)]
    pub test_points_event: TestPointsEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResolutionState {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ShallowReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResult2 {
    #[serde(
        rename = "afnStripId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub afn_strip_id: Option<i32>,
    #[serde(
        rename = "computerName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub computer_name: Option<String>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(
        rename = "dateCompleted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_completed: Option<String>,
    #[serde(
        rename = "dateStarted",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_started: Option<String>,
    #[serde(
        rename = "effectivePointState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub effective_point_state: Option<String>,
    #[serde(
        rename = "failureType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub failure_type: Option<String>,
    #[serde(
        rename = "lastUpdated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated: Option<String>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(
        rename = "resetCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub reset_count: Option<i32>,
    #[serde(
        rename = "resolutionStateId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resolution_state_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(rename = "runBy", default, skip_serializing_if = "Option::is_none")]
    pub run_by: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(
        rename = "testCaseRefId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_ref_id: Option<i32>,
    #[serde(
        rename = "testResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultAcrossProjectResponse {
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
    #[serde(
        rename = "testResult",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result: Option<LegacyTestCaseResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultAttachment {
    #[serde(
        rename = "actionPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub action_path: Option<String>,
    #[serde(
        rename = "attachmentType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub attachment_type: Option<test_result_attachment::AttachmentType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(
        rename = "downloadQueryString",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub download_query_string: Option<String>,
    #[serde(rename = "fileName", default, skip_serializing_if = "Option::is_none")]
    pub file_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "isComplete",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_complete: Option<bool>,
    #[serde(
        rename = "iterationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub iteration_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub length: Option<i64>,
    #[serde(rename = "sessionId", default, skip_serializing_if = "Option::is_none")]
    pub session_id: Option<i32>,
    #[serde(
        rename = "testResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
    #[serde(rename = "tmiRunId", default, skip_serializing_if = "Option::is_none")]
    pub tmi_run_id: Option<String>,
}
pub mod test_result_attachment {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum AttachmentType {
        #[serde(rename = "generalAttachment")]
        GeneralAttachment,
        #[serde(rename = "codeCoverage")]
        CodeCoverage,
        #[serde(rename = "consoleLog")]
        ConsoleLog,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultAttachmentIdentity {
    #[serde(
        rename = "attachmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub attachment_id: Option<i32>,
    #[serde(rename = "sessionId", default, skip_serializing_if = "Option::is_none")]
    pub session_id: Option<i32>,
    #[serde(
        rename = "testResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultCreateModel {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub area: Option<ShallowReference>,
    #[serde(
        rename = "associatedWorkItems",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub associated_work_items: Vec<i32>,
    #[serde(
        rename = "automatedTestId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_id: Option<String>,
    #[serde(
        rename = "automatedTestName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_name: Option<String>,
    #[serde(
        rename = "automatedTestStorage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_storage: Option<String>,
    #[serde(
        rename = "automatedTestType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_type: Option<String>,
    #[serde(
        rename = "automatedTestTypeId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_type_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "completedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completed_date: Option<String>,
    #[serde(
        rename = "computerName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub computer_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<ShallowReference>,
    #[serde(
        rename = "customFields",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub custom_fields: Vec<CustomTestField>,
    #[serde(
        rename = "durationInMs",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub duration_in_ms: Option<String>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(
        rename = "failureType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub failure_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IdentityRef>,
    #[serde(
        rename = "resolutionState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub resolution_state: Option<String>,
    #[serde(rename = "runBy", default, skip_serializing_if = "Option::is_none")]
    pub run_by: Option<IdentityRef>,
    #[serde(
        rename = "stackTrace",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub stack_trace: Option<String>,
    #[serde(
        rename = "startedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub started_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "testCase", default, skip_serializing_if = "Option::is_none")]
    pub test_case: Option<ShallowReference>,
    #[serde(
        rename = "testCasePriority",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_priority: Option<String>,
    #[serde(
        rename = "testCaseTitle",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_title: Option<String>,
    #[serde(rename = "testPoint", default, skip_serializing_if = "Option::is_none")]
    pub test_point: Option<ShallowReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultDocument {
    #[serde(
        rename = "operationReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub operation_reference: Option<TestOperationReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub payload: Option<TestResultPayload>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultFailuresAnalysis {
    #[serde(
        rename = "existingFailures",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub existing_failures: Option<TestFailureDetails>,
    #[serde(
        rename = "fixedTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub fixed_tests: Option<TestFailureDetails>,
    #[serde(
        rename = "newFailures",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub new_failures: Option<TestFailureDetails>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultHistory {
    #[serde(
        rename = "groupByField",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub group_by_field: Option<String>,
    #[serde(
        rename = "resultsForGroup",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub results_for_group: Vec<TestResultHistoryDetailsForGroup>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultHistoryDetailsForGroup {
    #[serde(
        rename = "groupByValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub group_by_value: Option<serde_json::Value>,
    #[serde(
        rename = "latestResult",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub latest_result: Option<TestCaseResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultHistoryForGroup {
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(
        rename = "groupByValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub group_by_value: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<TestCaseResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultMetaData {
    #[serde(
        rename = "automatedTestName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_name: Option<String>,
    #[serde(
        rename = "automatedTestStorage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_test_storage: Option<String>,
    #[serde(
        rename = "flakyIdentifiers",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub flaky_identifiers: Vec<TestFlakyIdentifier>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    #[serde(
        rename = "testCaseReferenceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_reference_id: Option<i32>,
    #[serde(
        rename = "testCaseTitle",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_title: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultMetaDataUpdateInput {
    #[serde(
        rename = "flakyIdentifiers",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub flaky_identifiers: Vec<TestFlakyIdentifier>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultMetaDataUpdateResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultModelBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "completedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completed_date: Option<String>,
    #[serde(
        rename = "durationInMs",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub duration_in_ms: Option<f64>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<String>,
    #[serde(
        rename = "startedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub started_date: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultParameter {
    #[serde(
        rename = "actionPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub action_path: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub actual: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub expected: Vec<String>,
    #[serde(
        rename = "iterationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub iteration_id: Option<i32>,
    #[serde(
        rename = "parameterName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub parameter_name: Option<String>,
    #[serde(
        rename = "testResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultParameterModel {
    #[serde(
        rename = "actionPath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub action_path: Option<String>,
    #[serde(
        rename = "iterationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub iteration_id: Option<i32>,
    #[serde(
        rename = "parameterName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub parameter_name: Option<String>,
    #[serde(
        rename = "stepIdentifier",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub step_identifier: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultPayload {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stream: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultReset2 {
    #[serde(
        rename = "auditIdentity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub audit_identity: Option<String>,
    #[serde(
        rename = "dateModified",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_modified: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(
        rename = "testResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result_id: Option<i32>,
    #[serde(
        rename = "testResultRV",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub test_result_rv: Vec<String>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultsContext {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<BuildReference>,
    #[serde(
        rename = "contextType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub context_type: Option<test_results_context::ContextType>,
    #[serde(
        rename = "pipelineReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pipeline_reference: Option<PipelineReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<ReleaseReference>,
}
pub mod test_results_context {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ContextType {
        #[serde(rename = "build")]
        Build,
        #[serde(rename = "release")]
        Release,
        #[serde(rename = "pipeline")]
        Pipeline,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultsDetails {
    #[serde(
        rename = "groupByField",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub group_by_field: Option<String>,
    #[serde(
        rename = "resultsForGroup",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub results_for_group: Vec<TestResultsDetailsForGroup>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultsDetailsForGroup {
    #[serde(
        rename = "groupByValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub group_by_value: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<TestCaseResult>,
    #[serde(
        rename = "resultsCountByOutcome",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub results_count_by_outcome: Option<serde_json::Value>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultsEx2 {
    #[serde(rename = "bitValue", default, skip_serializing_if = "Option::is_none")]
    pub bit_value: Option<bool>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(
        rename = "dateTimeValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_time_value: Option<String>,
    #[serde(rename = "fieldId", default, skip_serializing_if = "Option::is_none")]
    pub field_id: Option<i32>,
    #[serde(rename = "fieldName", default, skip_serializing_if = "Option::is_none")]
    pub field_name: Option<String>,
    #[serde(
        rename = "floatValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub float_value: Option<f64>,
    #[serde(rename = "guidValue", default, skip_serializing_if = "Option::is_none")]
    pub guid_value: Option<String>,
    #[serde(rename = "intValue", default, skip_serializing_if = "Option::is_none")]
    pub int_value: Option<i32>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(
        rename = "stringValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub string_value: Option<String>,
    #[serde(
        rename = "testResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultsGroupsForBuild {
    #[serde(rename = "buildId", default, skip_serializing_if = "Option::is_none")]
    pub build_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub fields: Vec<FieldDetailsForTestResults>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultsGroupsForRelease {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub fields: Vec<FieldDetailsForTestResults>,
    #[serde(
        rename = "releaseEnvId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_env_id: Option<i32>,
    #[serde(rename = "releaseId", default, skip_serializing_if = "Option::is_none")]
    pub release_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultsQuery {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub fields: Vec<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub results: Vec<TestCaseResult>,
    #[serde(
        rename = "resultsFilter",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub results_filter: Option<ResultsFilter>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultsSettings {
    #[serde(
        rename = "flakySettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub flaky_settings: Option<FlakySettings>,
    #[serde(
        rename = "newTestResultLoggingSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub new_test_result_logging_settings: Option<NewTestResultLoggingSettings>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultSummary {
    #[serde(
        rename = "aggregatedResultsAnalysis",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub aggregated_results_analysis: Option<AggregatedResultsAnalysis>,
    #[serde(
        rename = "noConfigRunsCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub no_config_runs_count: Option<i32>,
    #[serde(
        rename = "teamProject",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub team_project: Option<TeamProjectReference>,
    #[serde(
        rename = "testFailures",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_failures: Option<TestFailuresAnalysis>,
    #[serde(
        rename = "testResultsContext",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_results_context: Option<TestResultsContext>,
    #[serde(
        rename = "totalRunsCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_runs_count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultsUpdateSettings {
    #[serde(
        rename = "flakySettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub flaky_settings: Option<FlakySettings>,
    #[serde(
        rename = "newTestResultLoggingSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub new_test_result_logging_settings: Option<NewTestResultLoggingSettings>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultsWithWatermark {
    #[serde(
        rename = "changedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub changed_date: Option<String>,
    #[serde(
        rename = "pointsResults",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub points_results: Vec<PointsResults2>,
    #[serde(rename = "resultId", default, skip_serializing_if = "Option::is_none")]
    pub result_id: Option<i32>,
    #[serde(rename = "runId", default, skip_serializing_if = "Option::is_none")]
    pub run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestResultTrendFilter {
    #[serde(rename = "branchNames", default, skip_serializing_if = "Vec::is_empty")]
    pub branch_names: Vec<String>,
    #[serde(
        rename = "buildCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_count: Option<i32>,
    #[serde(
        rename = "definitionIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub definition_ids: Vec<i32>,
    #[serde(
        rename = "envDefinitionIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub env_definition_ids: Vec<i32>,
    #[serde(
        rename = "maxCompleteDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_complete_date: Option<String>,
    #[serde(
        rename = "publishContext",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub publish_context: Option<String>,
    #[serde(
        rename = "testRunTitles",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub test_run_titles: Vec<String>,
    #[serde(rename = "trendDays", default, skip_serializing_if = "Option::is_none")]
    pub trend_days: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRun {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub build: Option<ShallowReference>,
    #[serde(
        rename = "buildConfiguration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_configuration: Option<BuildConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "completedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completed_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller: Option<String>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(
        rename = "customFields",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub custom_fields: Vec<CustomTestField>,
    #[serde(
        rename = "dropLocation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub drop_location: Option<String>,
    #[serde(
        rename = "dtlAutEnvironment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub dtl_aut_environment: Option<ShallowReference>,
    #[serde(
        rename = "dtlEnvironment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub dtl_environment: Option<ShallowReference>,
    #[serde(
        rename = "dtlEnvironmentCreationDetails",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub dtl_environment_creation_details: Option<DtlEnvironmentDetails>,
    #[serde(rename = "dueDate", default, skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<RunFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "incompleteTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub incomplete_tests: Option<i32>,
    #[serde(
        rename = "isAutomated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_automated: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iteration: Option<String>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<IdentityRef>,
    #[serde(
        rename = "lastUpdatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(
        rename = "notApplicableTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub not_applicable_tests: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IdentityRef>,
    #[serde(
        rename = "passedTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub passed_tests: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    #[serde(
        rename = "pipelineReference",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub pipeline_reference: Option<PipelineReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan: Option<ShallowReference>,
    #[serde(
        rename = "postProcessState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub post_process_state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<ReleaseReference>,
    #[serde(
        rename = "releaseEnvironmentUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_environment_uri: Option<String>,
    #[serde(
        rename = "releaseUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(
        rename = "runStatistics",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub run_statistics: Vec<RunStatistic>,
    #[serde(
        rename = "startedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub started_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub substate: Option<test_run::Substate>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<TestTag>,
    #[serde(
        rename = "testEnvironment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_environment: Option<TestEnvironment>,
    #[serde(
        rename = "testMessageLogId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_message_log_id: Option<i32>,
    #[serde(
        rename = "testSettings",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_settings: Option<ShallowReference>,
    #[serde(
        rename = "totalTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_tests: Option<i32>,
    #[serde(
        rename = "unanalyzedTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unanalyzed_tests: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(
        rename = "webAccessUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub web_access_url: Option<String>,
}
pub mod test_run {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Substate {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "creatingEnvironment")]
        CreatingEnvironment,
        #[serde(rename = "runningTests")]
        RunningTests,
        #[serde(rename = "canceledByUser")]
        CanceledByUser,
        #[serde(rename = "abortedBySystem")]
        AbortedBySystem,
        #[serde(rename = "timedOut")]
        TimedOut,
        #[serde(rename = "pendingAnalysis")]
        PendingAnalysis,
        #[serde(rename = "analyzed")]
        Analyzed,
        #[serde(rename = "cancellationInProgress")]
        CancellationInProgress,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRun2 {
    #[serde(
        rename = "buildConfigurationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_configuration_id: Option<i32>,
    #[serde(
        rename = "buildNumber",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_number: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "completeDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub complete_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub controller: Option<String>,
    #[serde(
        rename = "coverageId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub coverage_id: Option<i32>,
    #[serde(
        rename = "creationDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(rename = "deletedOn", default, skip_serializing_if = "Option::is_none")]
    pub deleted_on: Option<String>,
    #[serde(
        rename = "dropLocation",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub drop_location: Option<String>,
    #[serde(rename = "dueDate", default, skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(
        rename = "incompleteTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub incomplete_tests: Option<i32>,
    #[serde(
        rename = "isAutomated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_automated: Option<bool>,
    #[serde(rename = "isBvt", default, skip_serializing_if = "Option::is_none")]
    pub is_bvt: Option<bool>,
    #[serde(
        rename = "isMigrated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_migrated: Option<bool>,
    #[serde(
        rename = "iterationId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub iteration_id: Option<i32>,
    #[serde(
        rename = "lastUpdated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated: Option<String>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<String>,
    #[serde(
        rename = "legacySharePath",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub legacy_share_path: Option<String>,
    #[serde(
        rename = "maxReservedResultId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_reserved_result_id: Option<i32>,
    #[serde(
        rename = "notApplicableTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub not_applicable_tests: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(
        rename = "passedTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub passed_tests: Option<i32>,
    #[serde(
        rename = "postProcessState",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub post_process_state: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(
        rename = "publicTestSettingsId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub public_test_settings_id: Option<i32>,
    #[serde(
        rename = "releaseEnvironmentUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_environment_uri: Option<String>,
    #[serde(
        rename = "releaseUri",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(rename = "startDate", default, skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(
        rename = "testEnvironmentId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_environment_id: Option<String>,
    #[serde(
        rename = "testMessageLogId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_message_log_id: Option<i32>,
    #[serde(
        rename = "testPlanId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_plan_id: Option<i32>,
    #[serde(
        rename = "testRunContextId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_run_context_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
    #[serde(
        rename = "testSettingsId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_settings_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(
        rename = "totalTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub total_tests: Option<i32>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(
        rename = "unanalyzedTests",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unanalyzed_tests: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunCanceledEvent {
    #[serde(flatten)]
    pub test_run_event: TestRunEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunContext2 {
    #[serde(
        rename = "buildRefId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub build_ref_id: Option<i32>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(
        rename = "releaseRefId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_ref_id: Option<i32>,
    #[serde(
        rename = "sourceWorkflow",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_workflow: Option<String>,
    #[serde(
        rename = "testRunContextId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_run_context_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunCoverage {
    #[serde(rename = "lastError", default, skip_serializing_if = "Option::is_none")]
    pub last_error: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub modules: Vec<ModuleCoverage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "testRun", default, skip_serializing_if = "Option::is_none")]
    pub test_run: Option<ShallowReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunCreatedEvent {
    #[serde(flatten)]
    pub test_run_event: TestRunEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunEvent {
    #[serde(rename = "testRun", default, skip_serializing_if = "Option::is_none")]
    pub test_run: Option<TestRun>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunEx2 {
    #[serde(rename = "bitValue", default, skip_serializing_if = "Option::is_none")]
    pub bit_value: Option<bool>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(
        rename = "dateTimeValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_time_value: Option<String>,
    #[serde(rename = "fieldId", default, skip_serializing_if = "Option::is_none")]
    pub field_id: Option<i32>,
    #[serde(rename = "fieldName", default, skip_serializing_if = "Option::is_none")]
    pub field_name: Option<String>,
    #[serde(
        rename = "floatValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub float_value: Option<f64>,
    #[serde(rename = "guidValue", default, skip_serializing_if = "Option::is_none")]
    pub guid_value: Option<String>,
    #[serde(rename = "intValue", default, skip_serializing_if = "Option::is_none")]
    pub int_value: Option<i32>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(
        rename = "stringValue",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub string_value: Option<String>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunExtended2 {
    #[serde(
        rename = "autEnvironmentUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub aut_environment_url: Option<String>,
    #[serde(
        rename = "csmContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub csm_content: Option<String>,
    #[serde(
        rename = "csmParameters",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub csm_parameters: Option<String>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(
        rename = "sourceFilter",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub source_filter: Option<String>,
    #[serde(
        rename = "subscriptionName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub subscription_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub substate: Option<String>,
    #[serde(
        rename = "testCaseFilter",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_filter: Option<String>,
    #[serde(
        rename = "testEnvironmentUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_environment_url: Option<String>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunStartedEvent {
    #[serde(flatten)]
    pub test_run_event: TestRunEvent,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunStatistic {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub run: Option<ShallowReference>,
    #[serde(
        rename = "runStatistics",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub run_statistics: Vec<RunStatistic>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunSummary2 {
    #[serde(rename = "isRerun", default, skip_serializing_if = "Option::is_none")]
    pub is_rerun: Option<bool>,
    #[serde(rename = "projectId", default, skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(
        rename = "resultCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_count: Option<i32>,
    #[serde(
        rename = "resultDuration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_duration: Option<i64>,
    #[serde(
        rename = "runDuration",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_duration: Option<i64>,
    #[serde(
        rename = "testOutcome",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_outcome: Option<String>,
    #[serde(
        rename = "testRunCompletedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_run_completed_date: Option<String>,
    #[serde(
        rename = "testRunContextId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_run_context_id: Option<i32>,
    #[serde(rename = "testRunId", default, skip_serializing_if = "Option::is_none")]
    pub test_run_id: Option<i32>,
    #[serde(
        rename = "testRunStatsId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_run_stats_id: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunWithDtlEnvEvent {
    #[serde(flatten)]
    pub test_run_event: TestRunEvent,
    #[serde(
        rename = "configurationIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub configuration_ids: Vec<i32>,
    #[serde(
        rename = "mappedTestRunEventType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub mapped_test_run_event_type: Option<String>,
    #[serde(
        rename = "runTimeout",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub run_timeout: Option<String>,
    #[serde(
        rename = "testConfigurationsMapping",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_configurations_mapping: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSession {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub area: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "endDate", default, skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<IdentityRef>,
    #[serde(
        rename = "lastUpdatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<IdentityRef>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ShallowReference>,
    #[serde(
        rename = "propertyBag",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub property_bag: Option<PropertyBag>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<test_session::Source>,
    #[serde(rename = "startDate", default, skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<test_session::State>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod test_session {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum Source {
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "xtDesktop")]
        XtDesktop,
        #[serde(rename = "feedbackDesktop")]
        FeedbackDesktop,
        #[serde(rename = "xtWeb")]
        XtWeb,
        #[serde(rename = "feedbackWeb")]
        FeedbackWeb,
        #[serde(rename = "xtDesktop2")]
        XtDesktop2,
        #[serde(rename = "sessionInsightsForAll")]
        SessionInsightsForAll,
    }
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum State {
        #[serde(rename = "unspecified")]
        Unspecified,
        #[serde(rename = "notStarted")]
        NotStarted,
        #[serde(rename = "inProgress")]
        InProgress,
        #[serde(rename = "paused")]
        Paused,
        #[serde(rename = "completed")]
        Completed,
        #[serde(rename = "declined")]
        Declined,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSessionExploredWorkItemReference {
    #[serde(flatten)]
    pub test_session_work_item_reference: TestSessionWorkItemReference,
    #[serde(
        rename = "associatedWorkItems",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub associated_work_items: Vec<TestSessionWorkItemReference>,
    #[serde(rename = "endTime", default, skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    #[serde(rename = "startTime", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSessionWorkItemReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSettings {
    #[serde(rename = "areaPath", default, skip_serializing_if = "Option::is_none")]
    pub area_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "isPublic", default, skip_serializing_if = "Option::is_none")]
    pub is_public: Option<bool>,
    #[serde(
        rename = "machineRoles",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub machine_roles: Option<String>,
    #[serde(
        rename = "testSettingsContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_settings_content: Option<String>,
    #[serde(
        rename = "testSettingsId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_settings_id: Option<i32>,
    #[serde(
        rename = "testSettingsName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_settings_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSettings2 {
    #[serde(rename = "areaPath", default, skip_serializing_if = "Option::is_none")]
    pub area_path: Option<String>,
    #[serde(rename = "createdBy", default, skip_serializing_if = "Option::is_none")]
    pub created_by: Option<IdentityRef>,
    #[serde(
        rename = "createdDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub created_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "isPublic", default, skip_serializing_if = "Option::is_none")]
    pub is_public: Option<bool>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<IdentityRef>,
    #[serde(
        rename = "lastUpdatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_date: Option<String>,
    #[serde(
        rename = "machineRoles",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub machine_roles: Option<String>,
    #[serde(
        rename = "testSettingsContent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_settings_content: Option<String>,
    #[serde(
        rename = "testSettingsId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_settings_id: Option<i32>,
    #[serde(
        rename = "testSettingsName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_settings_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSettingsMachineRole {
    #[serde(
        rename = "isExecution",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub is_execution: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSubResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(
        rename = "completedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completed_date: Option<String>,
    #[serde(
        rename = "computerName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub computer_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<ShallowReference>,
    #[serde(
        rename = "customFields",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub custom_fields: Vec<CustomTestField>,
    #[serde(
        rename = "displayName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub display_name: Option<String>,
    #[serde(
        rename = "durationInMs",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub duration_in_ms: Option<i64>,
    #[serde(
        rename = "errorMessage",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "lastUpdatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outcome: Option<String>,
    #[serde(rename = "parentId", default, skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<i32>,
    #[serde(
        rename = "resultGroupType",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub result_group_type: Option<test_sub_result::ResultGroupType>,
    #[serde(
        rename = "sequenceId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub sequence_id: Option<i32>,
    #[serde(
        rename = "stackTrace",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub stack_trace: Option<String>,
    #[serde(
        rename = "startedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub started_date: Option<String>,
    #[serde(rename = "subResults", default, skip_serializing_if = "Vec::is_empty")]
    pub sub_results: Vec<TestSubResult>,
    #[serde(
        rename = "testResult",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_result: Option<TestCaseResultIdentifier>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
pub mod test_sub_result {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ResultGroupType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "rerun")]
        Rerun,
        #[serde(rename = "dataDriven")]
        DataDriven,
        #[serde(rename = "orderedTest")]
        OrderedTest,
        #[serde(rename = "generic")]
        Generic,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSuite {
    #[serde(rename = "areaUri", default, skip_serializing_if = "Option::is_none")]
    pub area_uri: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub children: Vec<TestSuite>,
    #[serde(
        rename = "defaultConfigurations",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub default_configurations: Vec<ShallowReference>,
    #[serde(
        rename = "defaultTesters",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub default_testers: Vec<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "inheritDefaultConfigurations",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub inherit_default_configurations: Option<bool>,
    #[serde(rename = "lastError", default, skip_serializing_if = "Option::is_none")]
    pub last_error: Option<String>,
    #[serde(
        rename = "lastPopulatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_populated_date: Option<String>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<IdentityRef>,
    #[serde(
        rename = "lastUpdatedDate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_date: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub plan: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ShallowReference>,
    #[serde(
        rename = "queryString",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub query_string: Option<String>,
    #[serde(
        rename = "requirementId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub requirement_id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub suites: Vec<ShallowReference>,
    #[serde(rename = "suiteType", default, skip_serializing_if = "Option::is_none")]
    pub suite_type: Option<String>,
    #[serde(
        rename = "testCaseCount",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_case_count: Option<i32>,
    #[serde(
        rename = "testCasesUrl",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub test_cases_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSuiteCloneRequest {
    #[serde(
        rename = "cloneOptions",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub clone_options: Option<CloneOptions>,
    #[serde(
        rename = "destinationSuiteId",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_suite_id: Option<i32>,
    #[serde(
        rename = "destinationSuiteProjectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_suite_project_name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSummaryForWorkItem {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub summary: Option<AggregatedDataForResultTrend>,
    #[serde(rename = "workItem", default, skip_serializing_if = "Option::is_none")]
    pub work_item: Option<WorkItemReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestTag {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestTagSummary {
    #[serde(
        rename = "tagsGroupByTestArtifact",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub tags_group_by_test_artifact: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestTagsUpdateModel {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestToWorkItemLinks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub test: Option<TestMethod>,
    #[serde(rename = "workItems", default, skip_serializing_if = "Vec::is_empty")]
    pub work_items: Vec<WorkItemReference>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestVariable {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<ShallowReference>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub values: Vec<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdatedProperties {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(
        rename = "lastUpdated",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated: Option<String>,
    #[serde(
        rename = "lastUpdatedBy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by: Option<String>,
    #[serde(
        rename = "lastUpdatedByName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub last_updated_by_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateTestRunRequest {
    #[serde(
        rename = "attachmentsToAdd",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub attachments_to_add: Vec<TestResultAttachment>,
    #[serde(
        rename = "attachmentsToDelete",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub attachments_to_delete: Vec<TestResultAttachmentIdentity>,
    #[serde(
        rename = "projectName",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_name: Option<String>,
    #[serde(
        rename = "shouldHyderate",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub should_hyderate: Option<bool>,
    #[serde(rename = "testRun", default, skip_serializing_if = "Option::is_none")]
    pub test_run: Option<LegacyTestRun>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateTestRunResponse {
    #[serde(
        rename = "attachmentIds",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub attachment_ids: Vec<i32>,
    #[serde(
        rename = "updatedProperties",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub updated_properties: Option<UpdatedProperties>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UploadAttachmentsRequest {
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub attachments: Vec<HttpPostedTcmAttachment>,
    #[serde(
        rename = "requestParams",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_params: Option<serde_json::Value>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapper {
    #[serde(flatten)]
    pub vss_json_collection_wrapper_base: VssJsonCollectionWrapperBase,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VssJsonCollectionWrapperBase {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemReference {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "webUrl", default, skip_serializing_if = "Option::is_none")]
    pub web_url: Option<String>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkItemToTestLinks {
    #[serde(
        rename = "executedIn",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub executed_in: Option<work_item_to_test_links::ExecutedIn>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tests: Vec<TestMethod>,
    #[serde(rename = "workItem", default, skip_serializing_if = "Option::is_none")]
    pub work_item: Option<WorkItemReference>,
}
pub mod work_item_to_test_links {
    use super::*;
    #[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
    pub enum ExecutedIn {
        #[serde(rename = "any")]
        Any,
        #[serde(rename = "tcm")]
        Tcm,
        #[serde(rename = "tfs")]
        Tfs,
    }
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BuildCoverageList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<BuildCoverage>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SuiteTestCaseList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<SuiteTestCase>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestAttachmentList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestAttachment>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestCaseResultList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestCaseResult>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestIterationDetailsModelList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestIterationDetailsModel>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestPointList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestPoint>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunCoverageList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestRunCoverage>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestRunList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestRun>,
}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSessionList {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub value: Vec<TestSession>,
}
